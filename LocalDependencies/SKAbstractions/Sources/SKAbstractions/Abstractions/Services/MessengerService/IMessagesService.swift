//
//  IMessagesService.swift
//  SKAbstractions
//
//  Created by Vitalii Sosin on 10.05.2024.
//

import Foundation

/// Протокол для сервиса мессенджера, обеспечивающего отправку и получение зашифрованных сообщений.
public protocol IMessagesService {
  /// Получение текущего типа обмена ключами.
  /// - Returns: Тип обмена ключами. Если ключи не обменяны, возвращает `handshakeStart`,
  ///            что означает начало процесса обмена ключами и необходимость визуализации этого процесса в UI.
  ///            Если ключи обменяны, возвращает `encryption`, позволяя перейти к шифрованию сообщений.
  func getKeyExchangeType() -> MessengerKeyExchangeType
  
  /// Установка публичного ключа другой стороны.
  /// Этот метод необходим для сохранения ключа, который будет использоваться для шифрования отправляемых сообщений.
  /// - Parameter key: Публичный ключ собеседника.
  func setTheirPublicKey(_ key: String?)
  
  /// Подготовка сообщения к отправке.
  /// Этот метод включает шифрование сообщения с использованием публичного ключа собеседника и формирование блокчейн-сообщения.
  /// Должен использоваться только после успешного обмена ключами.
  /// - Parameter message: Исходное сообщение, которое нужно зашифровать.
  /// - Returns: Зашифрованное и подготовленное к отправке блокчейн-сообщение или `nil`, если шифрование невозможно.
  func prepareMessage(_ message: String?) -> String?
  
  /// Обработка полученных сообщений.
  /// Этот метод включает извлечение публичного ключа собеседника из полученного сообщения и дешифровку содержимого.
  /// После извлечения публичного ключа, его следует сохранить при помощи `setTheirPublicKey` для будущих шифрований.
  /// - Parameter message: Полученное зашифрованное сообщение.
  /// - Returns: Кортеж, содержащий публичный ключ собеседника и расшифрованное сообщение.
  ///            Если сообщение не содержит нужных данных, возвращает кортеж с `nil` значениями.
  func handleReceiveMessages(_ message: String?) -> (theirPublicKey: String?, message: String?)
}
