//
//  P2PChatManager+Callbacks.swift
//  SKServices
//
//  Created by Vitalii Sosin on 22.06.2024.
//

import SwiftUI
import SKAbstractions
import ToxCore

// MARK: - ConfigurationCallback

@available(iOS 16.0, *)
extension P2PChatManager {
  func configurationCallback() {
    setConnectionStatusCallback()
    setFriendRequestCallback()
    setMessageCallback()
    setSessionTORCallback()
    setFriendStatusCallback()
    setLogCallback()
    setFriendStatusOnlineCallback()
    setFriendTypingCallback()
    setFriendReadReceiptCallback()
  }
}

// MARK: - Callbacks SETS

@available(iOS 16.0, *)
private extension P2PChatManager {
  func setupFileReceiveCallbacks() {
    toxCore.setFileReceiveCallback { friendNumber, fileId, fileName, fileSize in
      print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–∞–π–ª –æ—Ç –¥—Ä—É–≥–∞ \(friendNumber), fileId: \(fileId), fileName: \(fileName), fileSize: \(fileSize) –±–∞–π—Ç")
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
      self.initFileReceive(friendNumber: friendNumber, fileId: fileId, fileName: fileName, fileSize: fileSize)
    }
    
    toxCore.setFileChunkReceiveCallback { friendNumber, fileId, position, data in
      print("–ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥—Ä—É–≥–∞ \(friendNumber), fileId: \(fileId), –ø–æ–∑–∏—Ü–∏—è: \(position), —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: \(data.count) –±–∞–π—Ç")
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞–Ω–∫–∞
      self.receiveChunk(friendNumber: friendNumber, fileId: fileId, position: position, data: data)
    }
  }
  
  func setFriendReadReceiptCallback() {
    toxCore.setFriendReadReceiptCallback { [weak self] friendId, messageId in
      self?.updateFriendReadReceiptCallback(friendId, messageId)
    }
  }
  
  func setFriendTypingCallback() {
    toxCore.setFriendTypingCallback { [weak self] friendId, isTyping in
      self?.updateFriendTyping(friendId, isTyping)
    }
  }
  
  func setFriendStatusOnlineCallback() {
    toxCore.setFriendStatusOnlineCallback { [weak self] friendId, status in
      self?.updateFriendStatusOnline(friendId: friendId, status: status)
    }
  }
  
  func setFriendStatusCallback() {
    toxCore.setFriendStatusCallback { [weak self] friendId, connectionStatus in
      let status: UserStatus
      switch connectionStatus {
      case .none:
        status = .away
      case .tcp:
        status = .online
      case .udp:
        status = .online
      }
      self?.updateFriendStatusOnline(friendId: friendId, status: status)
    }
  }
  
  func setLogCallback() {
    toxCore.setLogCallback { file, level, funcName, line, message, arg, userData in
      let logMessage = "\(file):\(line) - \(funcName): \(message) [\(arg)]"
      
      switch level {
      case .trace:
        print("üõ§Ô∏è TRACE: \(logMessage)")
      case .debug:
        print("üîç DEBUG: \(logMessage)")
      case .info:
        print("‚ÑπÔ∏è INFO: \(logMessage)")
      case .warning:
        print("‚ö†Ô∏è WARNING: \(logMessage)")
      case .error:
        print("‚ùå ERROR: \(logMessage)")
      }
    }
  }
  
  func setFriendRequestCallback() {
    toxCore.setFriendRequestCallback { [weak self] toxPublicKey, jsonString in
      guard let self else { return }
      updateDidReceiveRequestChat(jsonString: jsonString, toxPublicKey: toxPublicKey)
    }
  }
  
  func setConnectionStatusCallback() {
    toxCore.setConnectionStatusCallback { [weak self] connectionStatus in
      guard let self else { return }
      switch connectionStatus {
      case .none:
        updateMyOnlineStatus(status: .offline)
      case .tcp:
        updateMyOnlineStatus(status: .online)
      case .udp:
        updateMyOnlineStatus(status: .online)
      }
    }
  }
  
  func setSessionTORCallback() {
    //    torService.stateAction = { [weak self] result in
    //      guard let self else { return }
    //      switch result {
    //      case .none: break
    //      case .started: break
    //      case .connectingProgress: break
    //      case .connected: break
    //      case .stopped:
    //        updateMyOnlineStatus(status: .offline)
    //        torService.stop()
    //        torService.start(completion: { _ in })
    //      case .refreshing:
    //        updateMyOnlineStatus(status: .inProgress)
    //      }
    //      updateSessionState(state: result)
    //    }
  }
  
  func setMessageCallback() {
    toxCore.setMessageCallback { [weak self] friendId, jsonString in
      guard let self else { return }
      updateDidReceiveMessage(jsonString: jsonString, friendId: friendId)
    }
  }
}

// MARK: - Callbacks UPDATES

@available(iOS 16.0, *)
private extension P2PChatManager {
  func updateFileReceiveCallback(progress: Double, friendId: Int32, filePath: URL?) {
    guard let publicKey = toxCore.publicKeyFromFriendNumber(friendNumber: Int32(friendId)) else {
      return
    }
    
    DispatchQueue.main.async {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–º —á—Ç–æ —Ñ–∞–π–ª –¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.didUpdateFriendReadReceipt.rawValue),
        object: nil,
        userInfo: [
          "publicKey": publicKey,
          "progress": progress,
          "filePath": filePath
        ]
      )
    }
  }
  
  func updateFriendReadReceiptCallback(_ friendId: UInt32, _ messageId: UInt32) {
    guard let publicKey = toxCore.publicKeyFromFriendNumber(friendNumber: Int32(friendId)) else {
      return
    }
    
    DispatchQueue.main.async {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.didUpdateFriendReadReceipt.rawValue),
        object: nil,
        userInfo: [
          "publicKey": publicKey,
          "messageId": messageId
        ]
      )
    }
  }
  
  func updateFriendTyping(_ friendId: Int32, _ isTyping: Bool) {
    guard let publicKey = toxCore.publicKeyFromFriendNumber(friendNumber: friendId) else {
      return
    }
    
    DispatchQueue.main.async {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–º –ø–µ—á–∞—Ç–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.isTyping.rawValue),
        object: nil,
        userInfo: [
          "publicKey": publicKey,
          "isTyping": isTyping
        ]
      )
    }
  }
  
  func updateFriendStatusOnline(friendId: Int32, status: UserStatus) {
    guard let publicKey = toxCore.publicKeyFromFriendNumber(friendNumber: friendId) else {
      return
    }
    
    DispatchQueue.main.async {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –û–ù–õ–ê–ô–ù/–û–§–§ –õ–ê–ô–ù –¥—Ä—É–∑–µ–π
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.didUpdateFriendOnlineStatus.rawValue),
        object: nil,
        userInfo: [
          "publicKey": publicKey,
          "status": status.mapTo()
        ]
      )
    }
  }
  
  func updateMyOnlineStatus(status: MessengerModel.Status) {
    DispatchQueue.main.async {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –û–ù–õ–ê–ô–ù/–û–§–§ –õ–ê–ô–ù
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.didUpdateMyOnlineStatus.rawValue),
        object: nil,
        userInfo: ["onlineStatus": status]
      )
    }
  }
  
  func updateDidReceiveMessage(jsonString: String?, friendId: Int32) {
    guard let jsonString,
          let jsonData = jsonString.data(using: .utf8),
          let dto = try? JSONDecoder().decode(MessengerNetworkRequestDTO.self, from: jsonData) else {
      return
    }
    
    DispatchQueue.main.async {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.didReceiveMessage.rawValue),
        object: nil,
        userInfo: [
          "data": dto.mapToModel(),
          "toxFriendId": friendId
        ]
      )
    }
  }
  
  func updateDidReceiveRequestChat(jsonString: String?, toxPublicKey: String) {
    guard let jsonString,
          let jsonData = jsonString.data(using: .utf8),
          let dto = try? JSONDecoder().decode(MessengerNetworkRequestDTO.self, from: jsonData) else {
      return
    }
    
    DispatchQueue.main.async {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.didInitiateChat.rawValue),
        object: nil,
        userInfo: [
          "requestChat": dto.mapToModel(),
          "toxPublicKey": toxPublicKey
        ]
      )
    }
  }
  
  func updateSessionState(state: TorSessionState) {
    DispatchQueue.main.async {
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.sessionState.rawValue),
        object: nil,
        userInfo: ["sessionState": state]
      )
    }
  }
}

// MARK: - Private

@available(iOS 16.0, *)
private extension P2PChatManager {
  func initFileReceive(friendNumber: Int32, fileId: Int32, fileName: String, fileSize: UInt64) {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
    let filePath = FileManager.default.temporaryDirectory.appendingPathComponent(fileName)
    
    guard FileManager.default.createFile(atPath: filePath.path, contents: nil, attributes: nil) else {
      print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏.")
      return
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤)
    filesInProgress[fileId] = (filePath, fileSize)
  }
  
  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞–Ω–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  func receiveChunk(friendNumber: Int32, fileId: Int32, position: UInt64, data: Data) {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
    guard let (filePath, fileSize) = filesInProgress[fileId] else {
      print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è fileId: \(fileId)")
      return
    }
    
    // –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
    guard let fileHandle = try? FileHandle(forWritingTo: filePath) else {
      print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏.")
      return
    }
    
    fileHandle.seek(toFileOffset: position)
    fileHandle.write(data)
    fileHandle.closeFile()
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
    let fileAttributes = try? FileManager.default.attributesOfItem(atPath: filePath.path)
    let currentSize = fileAttributes?[.size] as? UInt64 ?? 0
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    let progress = Double(currentSize) / Double(fileSize) * 100
    print(String(format: "üòç –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è: %.2f%%", progress))
    updateFileReceiveCallback(progress: progress, friendId: friendNumber, filePath: nil)
    
    if currentSize >= fileSize {
      print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: \(filePath.path)")
      // –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
      updateFileReceiveCallback(
        progress: progress,
        friendId: friendNumber,
        filePath: getFilePath(
          for: fileId
        )
      )
      filesInProgress.removeValue(forKey: fileId)
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
  func getFilePath(for fileId: Int32) -> URL? {
    guard let (filePath, _) = filesInProgress[fileId] else {
      print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è fileId: \(fileId)")
      return nil
    }
    return filePath
  }
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—É—á–∞–µ–º—ã—Ö —Ñ–∞–π–ª–∞—Ö
private var filesInProgress: [Int32: (URL, UInt64)] = [:]
