//
//  P2PChatManager+Callbacks.swift
//  SKServices
//
//  Created by Vitalii Sosin on 22.06.2024.
//

import SwiftUI
import SKAbstractions
import ToxCore

// MARK: - ConfigurationCallback

@available(iOS 16.0, *)
extension P2PChatManager {
  func configurationCallback() {
    setConnectionStatusCallback()
    setFriendRequestCallback()
    setMessageCallback()
    setFriendStatusCallback()
    setLogCallback()
    setFriendStatusOnlineCallback()
    setFriendTypingCallback()
    setFriendReadReceiptCallback()
    setupFileReceiveCallbacks()
  }
}

// MARK: - Callbacks SETS

@available(iOS 16.0, *)
private extension P2PChatManager {
  func setupFileReceiveCallbacks() {
    toxCore.setFileReceiveCallback { [weak self] friendNumber, fileId, fileName, fileSize in
      guard let self else { return }
      print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–∞–π–ª –æ—Ç –¥—Ä—É–≥–∞ \(friendNumber), fileId: \(fileId), fileName: \(fileName), fileSize: \(fileSize) –±–∞–π—Ç")
      
      // MARK: - –®–ê–ì 2 –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç —é–∑–µ—Ä–∞ 1
      
      fileInfo = (friendNumber, fileId, fileName, fileSize)
      self.toxCore.acceptFile(friendNumber: friendNumber, fileId: fileId) { _ in }
    }
    
    toxCore.setFileChunkReceiveCallback { [weak self] friendNumber, fileId, position, data in
      guard let self, let fileInfo, fileInfo.friendNumber == friendNumber, fileInfo.fileId == fileId else {
        print("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
        return
      }
      
      // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Documents
      guard let documentDirectory = FileManager.default.urls(for: .cachesDirectory, in: .userDomainMask).first else {
        print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Documents")
        return
      }
      
      let fileURL = documentDirectory.appendingPathComponent(fileInfo.fileName)
      
      writeFileChunk(
        data: data,
        position: position,
        to: fileURL,
        completion: { [weak self] result in
          guard let self else { return }
          switch result {
          case let .success(progress):
            if progress == 100 {
              print("fileInfo: \(fileInfo.fileSize)")
              if let fileData = try? Data(contentsOf: fileURL) {
                print("file: \(fileData.count)")
              } else {
                print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞")
              }
            }
            
            updateFileReceiveCallback(
              progress: progress,
              friendId: friendNumber,
              filePath: fileURL
            )
          case .failure:
            print("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
            // TODO: - –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫—É–¥–∞ –ø–æ–ª—É—á–∞–ª–∏ —Ñ–∞–π–ª–∏–∫
            break
          }
        }
      )
    }
    
    // MARK: - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É —Ñ–∞–π–ª–∞ (–ü—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
    toxCore.setFileControlCallback { friendNumber, fileId, control in }
    
    toxCore.setFileChunkRequestCallback { [weak self] friendNumber, fileId, position, length in
      guard let self else { return }
      sendChunk(
        to: friendNumber,
        fileId: fileId,
        position: position,
        length: length,
        completion: { [weak self] result in
          guard let self else { return }
          switch result {
          case let .success(progress):
            updateFileSenderCallback(progress: progress, friendId: friendNumber)
            dataManagerService.clearTemporaryDirectory()
          case .failure:
            dataManagerService.clearTemporaryDirectory()
            updateFileSenderErrorCallback(friendId: friendNumber)
          }
        }
      )
    }
  }
  
  func writeFileChunk(
    data: Data,
    position: UInt64,
    to fileURL: URL,
    completion: @escaping (Result<Double, Error>) -> Void
  ) {
    guard let fileInfo else {
      return
    }
    do {
      let fileManager = FileManager.default
      let fileHandle: FileHandle
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
      let temporaryDirectory = URL(fileURLWithPath: NSTemporaryDirectory())
      if !fileManager.fileExists(atPath: temporaryDirectory.path) {
        try fileManager.createDirectory(at: temporaryDirectory, withIntermediateDirectories: true, attributes: nil)
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      if fileManager.fileExists(atPath: fileURL.path) {
        fileHandle = try FileHandle(forUpdating: fileURL)
      } else {
        fileManager.createFile(atPath: fileURL.path, contents: nil, attributes: nil)
        fileHandle = try FileHandle(forWritingTo: fileURL)
      }
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
      fileHandle.seek(toFileOffset: position)
      fileHandle.write(data)
      fileHandle.closeFile()
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      let currentSize = (try fileManager.attributesOfItem(atPath: fileURL.path)[.size] as? UInt64) ?? 0
      let progress = Double(currentSize) / Double(fileInfo.fileSize) * 100.0
      completion(.success(progress))
    } catch {
      completion(.failure(error))
    }
  }
}

@available(iOS 16.0, *)
private extension P2PChatManager {
  func setFriendReadReceiptCallback() {
    toxCore.setFriendReadReceiptCallback { [weak self] friendId, messageId in
      self?.updateFriendReadReceiptCallback(friendId, messageId)
    }
  }
  
  func setFriendTypingCallback() {
    toxCore.setFriendTypingCallback { [weak self] friendId, isTyping in
      self?.updateFriendTyping(friendId, isTyping)
    }
  }
  
  func setFriendStatusOnlineCallback() {
    toxCore.setFriendStatusOnlineCallback { [weak self] friendId, status in
      self?.updateFriendStatusOnline(friendId: friendId, status: status)
    }
  }
  
  func setFriendStatusCallback() {
    toxCore.setFriendStatusCallback { [weak self] friendId, connectionStatus in
      let status: UserStatus
      switch connectionStatus {
      case .none:
        status = .away
      case .tcp:
        status = .online
      case .udp:
        status = .online
      }
      self?.updateFriendStatusOnline(friendId: friendId, status: status)
    }
  }
  
  func setLogCallback() {
    toxCore.setLogCallback { file, level, funcName, line, message, arg, userData in
      let logMessage = "\(file):\(line) - \(funcName): \(message) [\(arg)]"
      
      switch level {
      case .trace:
        print("üõ§Ô∏è TRACE: \(logMessage)")
      case .debug:
        print("üîç DEBUG: \(logMessage)")
      case .info:
        print("‚ÑπÔ∏è INFO: \(logMessage)")
      case .warning:
        print("‚ö†Ô∏è WARNING: \(logMessage)")
      case .error:
        print("‚ùå ERROR: \(logMessage)")
      }
    }
  }
  
  func setFriendRequestCallback() {
    toxCore.setFriendRequestCallback { [weak self] toxPublicKey, jsonString in
      guard let self else { return }
      updateDidReceiveRequestChat(jsonString: jsonString, toxPublicKey: toxPublicKey)
    }
  }
  
  func setConnectionStatusCallback() {
    toxCore.setConnectionStatusCallback { [weak self] connectionStatus in
      guard let self else { return }
      switch connectionStatus {
      case .none:
        updateMyOnlineStatus(status: .offline)
      case .tcp:
        updateMyOnlineStatus(status: .online)
      case .udp:
        updateMyOnlineStatus(status: .online)
      }
    }
  }
  
  func setMessageCallback() {
    toxCore.setMessageCallback { [weak self] friendId, jsonString in
      guard let self else { return }
      updateDidReceiveMessage(jsonString: jsonString, friendId: friendId)
    }
  }
}

// MARK: - Callbacks UPDATES

@available(iOS 16.0, *)
private extension P2PChatManager {
  func updateFileSenderErrorCallback(friendId: Int32) {
    guard let publicKey = toxCore.publicKeyFromFriendNumber(friendNumber: Int32(friendId)) else {
      return
    }
    
    DispatchQueue.main.async { [weak self] in
      guard let self else { return }
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á—Ç–æ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.didUpdateFileErrorSend.rawValue),
        object: nil,
        userInfo: [
          "publicKey": publicKey,
          "messageID": cacheMessengerModel?.messageID
        ]
      )
    }
  }
  
  func updateFileSenderCallback(progress: Double, friendId: Int32) {
    guard let publicKey = toxCore.publicKeyFromFriendNumber(friendNumber: Int32(friendId)) else {
      return
    }
    
    DispatchQueue.main.async { [weak self] in
      guard let self else { return }
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á—Ç–æ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.didUpdateFileSend.rawValue),
        object: nil,
        userInfo: [
          "publicKey": publicKey,
          "progress": progress,
          "messageID": cacheMessengerModel?.messageID
        ]
      )
    }
  }
  
  func updateFileReceiveCallback(progress: Double, friendId: Int32, filePath: URL?) {
    guard let publicKey = toxCore.publicKeyFromFriendNumber(friendNumber: Int32(friendId)) else {
      return
    }
    
    DispatchQueue.main.async {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á—Ç–æ —Ñ–∞–π–ª –ø–æ–ª—É—á–∞–µ—Ç—Å—è
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.didUpdateFileReceive.rawValue),
        object: nil,
        userInfo: [
          "publicKey": publicKey,
          "progress": progress,
          "filePath": filePath
        ]
      )
    }
  }
  
  func updateFriendReadReceiptCallback(_ friendId: UInt32, _ messageId: UInt32) {
    guard let publicKey = toxCore.publicKeyFromFriendNumber(friendNumber: Int32(friendId)) else {
      return
    }
    
    DispatchQueue.main.async {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.didUpdateFriendReadReceipt.rawValue),
        object: nil,
        userInfo: [
          "publicKey": publicKey,
          "messageId": messageId
        ]
      )
    }
  }
  
  func updateFriendTyping(_ friendId: Int32, _ isTyping: Bool) {
    guard let publicKey = toxCore.publicKeyFromFriendNumber(friendNumber: friendId) else {
      return
    }
    
    DispatchQueue.main.async {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–º –ø–µ—á–∞—Ç–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.isTyping.rawValue),
        object: nil,
        userInfo: [
          "publicKey": publicKey,
          "isTyping": isTyping
        ]
      )
    }
  }
  
  func updateFriendStatusOnline(friendId: Int32, status: UserStatus) {
    guard let publicKey = toxCore.publicKeyFromFriendNumber(friendNumber: friendId) else {
      return
    }
    
    DispatchQueue.main.async {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –û–ù–õ–ê–ô–ù/–û–§–§ –õ–ê–ô–ù –¥—Ä—É–∑–µ–π
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.didUpdateFriendOnlineStatus.rawValue),
        object: nil,
        userInfo: [
          "publicKey": publicKey,
          "status": status.mapTo()
        ]
      )
    }
  }
  
  func updateMyOnlineStatus(status: MessengerModel.Status) {
    DispatchQueue.main.async {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –û–ù–õ–ê–ô–ù/–û–§–§ –õ–ê–ô–ù
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.didUpdateMyOnlineStatus.rawValue),
        object: nil,
        userInfo: ["onlineStatus": status]
      )
    }
  }
  
  func updateDidReceiveMessage(jsonString: String?, friendId: Int32) {
    guard let jsonString,
          let jsonData = jsonString.data(using: .utf8),
          let dto = try? JSONDecoder().decode(MessengerNetworkRequestDTO.self, from: jsonData) else {
      return
    }
    
    DispatchQueue.main.async {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.didReceiveMessage.rawValue),
        object: nil,
        userInfo: [
          "data": dto.mapToModel(),
          "toxFriendId": friendId
        ]
      )
    }
  }
  
  func updateDidReceiveRequestChat(jsonString: String?, toxPublicKey: String) {
    guard let jsonString,
          let jsonData = jsonString.data(using: .utf8),
          let dto = try? JSONDecoder().decode(MessengerNetworkRequestDTO.self, from: jsonData) else {
      return
    }
    
    DispatchQueue.main.async {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.didInitiateChat.rawValue),
        object: nil,
        userInfo: [
          "requestChat": dto.mapToModel(),
          "toxPublicKey": toxPublicKey
        ]
      )
    }
  }
  
  func updateSessionState(state: TorSessionState) {
    DispatchQueue.main.async {
      NotificationCenter.default.post(
        name: Notification.Name(NotificationConstants.sessionState.rawValue),
        object: nil,
        userInfo: ["sessionState": state]
      )
    }
  }
}

// MARK: - Private

@available(iOS 16.0, *)
private extension P2PChatManager {
  func initFileReceive(friendNumber: Int32, fileId: Int32, fileName: String, fileSize: UInt64) {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
    let filePath = FileManager.default.temporaryDirectory.appendingPathComponent(fileName)
    
    guard FileManager.default.createFile(atPath: filePath.path, contents: nil, attributes: nil) else {
      print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏.")
      return
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤)
    filesInProgress[fileId] = (filePath, fileSize)
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
  func getFilePath(for fileId: Int32) -> URL? {
    guard let (filePath, _) = filesInProgress[fileId] else {
      print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è fileId: \(fileId)")
      return nil
    }
    return filePath
  }
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—É—á–∞–µ–º—ã—Ö —Ñ–∞–π–ª–∞—Ö
private var filesInProgress: [Int32: (URL, UInt64)] = [:]
