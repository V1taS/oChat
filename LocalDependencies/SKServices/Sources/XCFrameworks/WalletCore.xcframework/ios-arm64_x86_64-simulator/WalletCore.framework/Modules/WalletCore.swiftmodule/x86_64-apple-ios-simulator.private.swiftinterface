// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WalletCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import SwiftProtobuf
@_exported import WalletCore
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct AES {
  public static func encryptCBC(key: Foundation.Data, data: Foundation.Data, iv: Foundation.Data, mode: WalletCore.AESPaddingMode) -> Foundation.Data?
  public static func decryptCBC(key: Foundation.Data, data: Foundation.Data, iv: Foundation.Data, mode: WalletCore.AESPaddingMode) -> Foundation.Data?
  public static func encryptCTR(key: Foundation.Data, data: Foundation.Data, iv: Foundation.Data) -> Foundation.Data?
  public static func decryptCTR(key: Foundation.Data, data: Foundation.Data, iv: Foundation.Data) -> Foundation.Data?
}
public enum AESPaddingMode : Swift.UInt32, Swift.CaseIterable {
  case zero
  case pkcs7
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.AESPaddingMode]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.AESPaddingMode] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
extension WalletCore.Account : Swift.Equatable {
  public static func == (lhs: WalletCore.Account, rhs: WalletCore.Account) -> Swift.Bool
}
extension WalletCore.Account : Swift.Hashable {
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.Account : Swift.Codable {
  final public func encode(to encoder: any Swift.Encoder) throws
  convenience public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class Account {
  final public var address: Swift.String {
    get
  }
  final public var coin: WalletCore.CoinType {
    get
  }
  final public var derivation: WalletCore.Derivation {
    get
  }
  final public var derivationPath: Swift.String {
    get
  }
  final public var publicKey: Swift.String {
    get
  }
  final public var extendedPublicKey: Swift.String {
    get
  }
  public init(address: Swift.String, coin: WalletCore.CoinType, derivation: WalletCore.Derivation, derivationPath: Swift.String, publicKey: Swift.String, extendedPublicKey: Swift.String)
  @objc deinit
}
public protocol Address : Swift.CustomStringConvertible {
}
extension WalletCore.AnyAddress : Swift.Equatable {
}
public typealias AeternitySigningInput = WalletCore.TW_Aeternity_Proto_SigningInput
public typealias AeternitySigningOutput = WalletCore.TW_Aeternity_Proto_SigningOutput
public struct TW_Aeternity_Proto_SigningInput {
  public var fromAddress: Swift.String
  public var toAddress: Swift.String
  public var amount: Foundation.Data
  public var fee: Foundation.Data
  public var payload: Swift.String
  public var ttl: Swift.UInt64
  public var nonce: Swift.UInt64
  public var privateKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aeternity_Proto_SigningOutput {
  public var encoded: Swift.String
  public var signature: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Aeternity_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aeternity_Proto_SigningInput, rhs: WalletCore.TW_Aeternity_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aeternity_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aeternity_Proto_SigningOutput, rhs: WalletCore.TW_Aeternity_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias AionSigningInput = WalletCore.TW_Aion_Proto_SigningInput
public typealias AionSigningOutput = WalletCore.TW_Aion_Proto_SigningOutput
public struct TW_Aion_Proto_SigningInput {
  public var nonce: Foundation.Data
  public var gasPrice: Foundation.Data
  public var gasLimit: Foundation.Data
  public var toAddress: Swift.String
  public var amount: Foundation.Data
  public var payload: Foundation.Data
  public var privateKey: Foundation.Data
  public var timestamp: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aion_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var signature: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Aion_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aion_Proto_SigningInput, rhs: WalletCore.TW_Aion_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aion_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aion_Proto_SigningOutput, rhs: WalletCore.TW_Aion_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias AlgorandTransfer = WalletCore.TW_Algorand_Proto_Transfer
public typealias AlgorandAssetTransfer = WalletCore.TW_Algorand_Proto_AssetTransfer
public typealias AlgorandAssetOptIn = WalletCore.TW_Algorand_Proto_AssetOptIn
public typealias AlgorandSigningInput = WalletCore.TW_Algorand_Proto_SigningInput
public typealias AlgorandSigningOutput = WalletCore.TW_Algorand_Proto_SigningOutput
public struct TW_Algorand_Proto_Transfer {
  public var toAddress: Swift.String
  public var amount: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Algorand_Proto_AssetTransfer {
  public var toAddress: Swift.String
  public var amount: Swift.UInt64
  public var assetID: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Algorand_Proto_AssetOptIn {
  public var assetID: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Algorand_Proto_SigningInput {
  public var genesisID: Swift.String
  public var genesisHash: Foundation.Data
  public var note: Foundation.Data
  public var privateKey: Foundation.Data
  public var firstRound: Swift.UInt64
  public var lastRound: Swift.UInt64
  public var fee: Swift.UInt64
  public var publicKey: Foundation.Data
  public var messageOneof: WalletCore.TW_Algorand_Proto_SigningInput.OneOf_MessageOneof?
  public var transfer: WalletCore.TW_Algorand_Proto_Transfer {
    get
    set
  }
  public var assetTransfer: WalletCore.TW_Algorand_Proto_AssetTransfer {
    get
    set
  }
  public var assetOptIn: WalletCore.TW_Algorand_Proto_AssetOptIn {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case transfer(WalletCore.TW_Algorand_Proto_Transfer)
    case assetTransfer(WalletCore.TW_Algorand_Proto_AssetTransfer)
    case assetOptIn(WalletCore.TW_Algorand_Proto_AssetOptIn)
    public static func == (a: WalletCore.TW_Algorand_Proto_SigningInput.OneOf_MessageOneof, b: WalletCore.TW_Algorand_Proto_SigningInput.OneOf_MessageOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Algorand_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var signature: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Algorand_Proto_Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Algorand_Proto_Transfer, rhs: WalletCore.TW_Algorand_Proto_Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Algorand_Proto_AssetTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Algorand_Proto_AssetTransfer, rhs: WalletCore.TW_Algorand_Proto_AssetTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Algorand_Proto_AssetOptIn : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Algorand_Proto_AssetOptIn, rhs: WalletCore.TW_Algorand_Proto_AssetOptIn) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Algorand_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Algorand_Proto_SigningInput, rhs: WalletCore.TW_Algorand_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Algorand_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Algorand_Proto_SigningOutput, rhs: WalletCore.TW_Algorand_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AnyAddress : WalletCore.Address {
  public static func == (lhs: WalletCore.AnyAddress, rhs: WalletCore.AnyAddress) -> Swift.Bool
  public static func isValid(string: Swift.String, coin: WalletCore.CoinType) -> Swift.Bool
  public static func isValidBech32(string: Swift.String, coin: WalletCore.CoinType, hrp: Swift.String) -> Swift.Bool
  public static func isValidSS58(string: Swift.String, coin: WalletCore.CoinType, ss58Prefix: Swift.UInt32) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  final public var coin: WalletCore.CoinType {
    get
  }
  final public var data: Foundation.Data {
    get
  }
  public init?(string: Swift.String, coin: WalletCore.CoinType)
  public init?(string: Swift.String, coin: WalletCore.CoinType, hrp: Swift.String)
  public init?(string: Swift.String, coin: WalletCore.CoinType, ss58Prefix: Swift.UInt32)
  public init(publicKey: WalletCore.PublicKey, coin: WalletCore.CoinType)
  public init(publicKey: WalletCore.PublicKey, coin: WalletCore.CoinType, derivation: WalletCore.Derivation)
  public init(publicKey: WalletCore.PublicKey, coin: WalletCore.CoinType, hrp: Swift.String)
  public init(publicKey: WalletCore.PublicKey, coin: WalletCore.CoinType, ss58Prefix: Swift.UInt32)
  public init(publicKey: WalletCore.PublicKey, filecoinAddressType: WalletCore.FilecoinAddressType)
  public init(publicKey: WalletCore.PublicKey, firoAddressType: WalletCore.FiroAddressType)
  @objc deinit
}
public typealias SigningInput = SwiftProtobuf.Message
public typealias SigningOutput = SwiftProtobuf.Message
@_hasMissingDesignatedInitializers final public class AnySigner {
  public static func sign<SigningOutput>(input: any SwiftProtobuf.Message, coin: WalletCore.CoinType) -> SigningOutput where SigningOutput : SwiftProtobuf.Message
  public static func nativeSign(data: Foundation.Data, coin: WalletCore.CoinType) -> Foundation.Data
  public static func supportsJSON(coin: WalletCore.CoinType) -> Swift.Bool
  public static func signJSON(_ json: Swift.String, key: Foundation.Data, coin: WalletCore.CoinType) -> Swift.String
  public static func plan<TransactionPlan>(input: any SwiftProtobuf.Message, coin: WalletCore.CoinType) -> TransactionPlan where TransactionPlan : SwiftProtobuf.Message
  public static func nativePlan(data: Foundation.Data, coin: WalletCore.CoinType) -> Foundation.Data
  @objc deinit
}
public typealias AptosTransferMessage = WalletCore.TW_Aptos_Proto_TransferMessage
public typealias AptosStructTag = WalletCore.TW_Aptos_Proto_StructTag
public typealias AptosTokenTransferMessage = WalletCore.TW_Aptos_Proto_TokenTransferMessage
public typealias AptosTokenTransferCoinsMessage = WalletCore.TW_Aptos_Proto_TokenTransferCoinsMessage
public typealias AptosManagedTokensRegisterMessage = WalletCore.TW_Aptos_Proto_ManagedTokensRegisterMessage
public typealias AptosCreateAccountMessage = WalletCore.TW_Aptos_Proto_CreateAccountMessage
public typealias AptosOfferNftMessage = WalletCore.TW_Aptos_Proto_OfferNftMessage
public typealias AptosCancelOfferNftMessage = WalletCore.TW_Aptos_Proto_CancelOfferNftMessage
public typealias AptosClaimNftMessage = WalletCore.TW_Aptos_Proto_ClaimNftMessage
public typealias AptosTortugaClaim = WalletCore.TW_Aptos_Proto_TortugaClaim
public typealias AptosTortugaStake = WalletCore.TW_Aptos_Proto_TortugaStake
public typealias AptosTortugaUnstake = WalletCore.TW_Aptos_Proto_TortugaUnstake
public typealias AptosLiquidStaking = WalletCore.TW_Aptos_Proto_LiquidStaking
public typealias AptosNftMessage = WalletCore.TW_Aptos_Proto_NftMessage
public typealias AptosSigningInput = WalletCore.TW_Aptos_Proto_SigningInput
public typealias AptosTransactionAuthenticator = WalletCore.TW_Aptos_Proto_TransactionAuthenticator
public typealias AptosSigningOutput = WalletCore.TW_Aptos_Proto_SigningOutput
public struct TW_Aptos_Proto_TransferMessage {
  public var to: Swift.String
  public var amount: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aptos_Proto_StructTag {
  public var accountAddress: Swift.String
  public var module: Swift.String
  public var name: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aptos_Proto_TokenTransferMessage {
  public var to: Swift.String
  public var amount: Swift.UInt64
  public var function: WalletCore.TW_Aptos_Proto_StructTag {
    get
    set
  }
  public var hasFunction: Swift.Bool {
    get
  }
  public mutating func clearFunction()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aptos_Proto_TokenTransferCoinsMessage {
  public var to: Swift.String
  public var amount: Swift.UInt64
  public var function: WalletCore.TW_Aptos_Proto_StructTag {
    get
    set
  }
  public var hasFunction: Swift.Bool {
    get
  }
  public mutating func clearFunction()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aptos_Proto_ManagedTokensRegisterMessage {
  public var function: WalletCore.TW_Aptos_Proto_StructTag {
    get
    set
  }
  public var hasFunction: Swift.Bool {
    get
  }
  public mutating func clearFunction()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aptos_Proto_CreateAccountMessage {
  public var authKey: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aptos_Proto_OfferNftMessage {
  public var receiver: Swift.String
  public var creator: Swift.String
  public var collectionName: Swift.String
  public var name: Swift.String
  public var propertyVersion: Swift.UInt64
  public var amount: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aptos_Proto_CancelOfferNftMessage {
  public var receiver: Swift.String
  public var creator: Swift.String
  public var collectionName: Swift.String
  public var name: Swift.String
  public var propertyVersion: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aptos_Proto_ClaimNftMessage {
  public var sender: Swift.String
  public var creator: Swift.String
  public var collectionName: Swift.String
  public var name: Swift.String
  public var propertyVersion: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aptos_Proto_TortugaClaim {
  public var idx: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aptos_Proto_TortugaStake {
  public var amount: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aptos_Proto_TortugaUnstake {
  public var amount: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aptos_Proto_LiquidStaking {
  public var smartContractAddress: Swift.String
  public var liquidStakeTransactionPayload: WalletCore.TW_Aptos_Proto_LiquidStaking.OneOf_LiquidStakeTransactionPayload?
  public var stake: WalletCore.TW_Aptos_Proto_TortugaStake {
    get
    set
  }
  public var unstake: WalletCore.TW_Aptos_Proto_TortugaUnstake {
    get
    set
  }
  public var claim: WalletCore.TW_Aptos_Proto_TortugaClaim {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_LiquidStakeTransactionPayload : Swift.Equatable {
    case stake(WalletCore.TW_Aptos_Proto_TortugaStake)
    case unstake(WalletCore.TW_Aptos_Proto_TortugaUnstake)
    case claim(WalletCore.TW_Aptos_Proto_TortugaClaim)
    public static func == (a: WalletCore.TW_Aptos_Proto_LiquidStaking.OneOf_LiquidStakeTransactionPayload, b: WalletCore.TW_Aptos_Proto_LiquidStaking.OneOf_LiquidStakeTransactionPayload) -> Swift.Bool
  }
  public init()
}
public struct TW_Aptos_Proto_NftMessage {
  public var nftTransactionPayload: WalletCore.TW_Aptos_Proto_NftMessage.OneOf_NftTransactionPayload?
  public var offerNft: WalletCore.TW_Aptos_Proto_OfferNftMessage {
    get
    set
  }
  public var cancelOfferNft: WalletCore.TW_Aptos_Proto_CancelOfferNftMessage {
    get
    set
  }
  public var claimNft: WalletCore.TW_Aptos_Proto_ClaimNftMessage {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_NftTransactionPayload : Swift.Equatable {
    case offerNft(WalletCore.TW_Aptos_Proto_OfferNftMessage)
    case cancelOfferNft(WalletCore.TW_Aptos_Proto_CancelOfferNftMessage)
    case claimNft(WalletCore.TW_Aptos_Proto_ClaimNftMessage)
    public static func == (a: WalletCore.TW_Aptos_Proto_NftMessage.OneOf_NftTransactionPayload, b: WalletCore.TW_Aptos_Proto_NftMessage.OneOf_NftTransactionPayload) -> Swift.Bool
  }
  public init()
}
public struct TW_Aptos_Proto_SigningInput {
  public var sender: Swift.String
  public var sequenceNumber: Swift.Int64
  public var maxGasAmount: Swift.UInt64
  public var gasUnitPrice: Swift.UInt64
  public var expirationTimestampSecs: Swift.UInt64
  public var chainID: Swift.UInt32
  public var privateKey: Foundation.Data
  public var anyEncoded: Swift.String
  public var transactionPayload: WalletCore.TW_Aptos_Proto_SigningInput.OneOf_TransactionPayload?
  public var transfer: WalletCore.TW_Aptos_Proto_TransferMessage {
    get
    set
  }
  public var tokenTransfer: WalletCore.TW_Aptos_Proto_TokenTransferMessage {
    get
    set
  }
  public var createAccount: WalletCore.TW_Aptos_Proto_CreateAccountMessage {
    get
    set
  }
  public var nftMessage: WalletCore.TW_Aptos_Proto_NftMessage {
    get
    set
  }
  public var registerToken: WalletCore.TW_Aptos_Proto_ManagedTokensRegisterMessage {
    get
    set
  }
  public var liquidStakingMessage: WalletCore.TW_Aptos_Proto_LiquidStaking {
    get
    set
  }
  public var tokenTransferCoins: WalletCore.TW_Aptos_Proto_TokenTransferCoinsMessage {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_TransactionPayload : Swift.Equatable {
    case transfer(WalletCore.TW_Aptos_Proto_TransferMessage)
    case tokenTransfer(WalletCore.TW_Aptos_Proto_TokenTransferMessage)
    case createAccount(WalletCore.TW_Aptos_Proto_CreateAccountMessage)
    case nftMessage(WalletCore.TW_Aptos_Proto_NftMessage)
    case registerToken(WalletCore.TW_Aptos_Proto_ManagedTokensRegisterMessage)
    case liquidStakingMessage(WalletCore.TW_Aptos_Proto_LiquidStaking)
    case tokenTransferCoins(WalletCore.TW_Aptos_Proto_TokenTransferCoinsMessage)
    public static func == (a: WalletCore.TW_Aptos_Proto_SigningInput.OneOf_TransactionPayload, b: WalletCore.TW_Aptos_Proto_SigningInput.OneOf_TransactionPayload) -> Swift.Bool
  }
  public init()
}
public struct TW_Aptos_Proto_TransactionAuthenticator {
  public var signature: Foundation.Data
  public var publicKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Aptos_Proto_SigningOutput {
  public var rawTxn: Foundation.Data
  public var authenticator: WalletCore.TW_Aptos_Proto_TransactionAuthenticator {
    get
    set
  }
  public var hasAuthenticator: Swift.Bool {
    get
  }
  public mutating func clearAuthenticator()
  public var encoded: Foundation.Data
  public var json: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Aptos_Proto_TransferMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_TransferMessage, rhs: WalletCore.TW_Aptos_Proto_TransferMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aptos_Proto_StructTag : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_StructTag, rhs: WalletCore.TW_Aptos_Proto_StructTag) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aptos_Proto_TokenTransferMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_TokenTransferMessage, rhs: WalletCore.TW_Aptos_Proto_TokenTransferMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aptos_Proto_TokenTransferCoinsMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_TokenTransferCoinsMessage, rhs: WalletCore.TW_Aptos_Proto_TokenTransferCoinsMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aptos_Proto_ManagedTokensRegisterMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_ManagedTokensRegisterMessage, rhs: WalletCore.TW_Aptos_Proto_ManagedTokensRegisterMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aptos_Proto_CreateAccountMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_CreateAccountMessage, rhs: WalletCore.TW_Aptos_Proto_CreateAccountMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aptos_Proto_OfferNftMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_OfferNftMessage, rhs: WalletCore.TW_Aptos_Proto_OfferNftMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aptos_Proto_CancelOfferNftMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_CancelOfferNftMessage, rhs: WalletCore.TW_Aptos_Proto_CancelOfferNftMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aptos_Proto_ClaimNftMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_ClaimNftMessage, rhs: WalletCore.TW_Aptos_Proto_ClaimNftMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aptos_Proto_TortugaClaim : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_TortugaClaim, rhs: WalletCore.TW_Aptos_Proto_TortugaClaim) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aptos_Proto_TortugaStake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_TortugaStake, rhs: WalletCore.TW_Aptos_Proto_TortugaStake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aptos_Proto_TortugaUnstake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_TortugaUnstake, rhs: WalletCore.TW_Aptos_Proto_TortugaUnstake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aptos_Proto_LiquidStaking : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_LiquidStaking, rhs: WalletCore.TW_Aptos_Proto_LiquidStaking) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aptos_Proto_NftMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_NftMessage, rhs: WalletCore.TW_Aptos_Proto_NftMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aptos_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_SigningInput, rhs: WalletCore.TW_Aptos_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aptos_Proto_TransactionAuthenticator : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_TransactionAuthenticator, rhs: WalletCore.TW_Aptos_Proto_TransactionAuthenticator) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Aptos_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Aptos_Proto_SigningOutput, rhs: WalletCore.TW_Aptos_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct AsnParser {
  public static func ecdsaSignatureFromDer(encoded: Foundation.Data) -> Foundation.Data?
}
public typealias BarzContractAddressInput = WalletCore.TW_Barz_Proto_ContractAddressInput
public typealias BarzFacetCut = WalletCore.TW_Barz_Proto_FacetCut
public typealias BarzDiamondCutInput = WalletCore.TW_Barz_Proto_DiamondCutInput
public typealias BarzFacetCutAction = WalletCore.TW_Barz_Proto_FacetCutAction
public enum TW_Barz_Proto_FacetCutAction : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case add
  case replace
  case remove
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Barz_Proto_FacetCutAction : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Barz_Proto_FacetCutAction]
  public typealias AllCases = [WalletCore.TW_Barz_Proto_FacetCutAction]
}
public struct TW_Barz_Proto_ContractAddressInput {
  public var entryPoint: Swift.String
  public var factory: Swift.String
  public var accountFacet: Swift.String
  public var verificationFacet: Swift.String
  public var facetRegistry: Swift.String
  public var defaultFallback: Swift.String
  public var bytecode: Swift.String
  public var publicKey: Swift.String
  public var salt: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Barz_Proto_FacetCut {
  public var facetAddress: Swift.String
  public var action: WalletCore.TW_Barz_Proto_FacetCutAction
  public var functionSelectors: [Foundation.Data]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Barz_Proto_DiamondCutInput {
  public var facetCuts: [WalletCore.TW_Barz_Proto_FacetCut]
  public var initAddress: Swift.String
  public var initData: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Barz_Proto_FacetCutAction : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Barz_Proto_ContractAddressInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Barz_Proto_ContractAddressInput, rhs: WalletCore.TW_Barz_Proto_ContractAddressInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Barz_Proto_FacetCut : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Barz_Proto_FacetCut, rhs: WalletCore.TW_Barz_Proto_FacetCut) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Barz_Proto_DiamondCutInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Barz_Proto_DiamondCutInput, rhs: WalletCore.TW_Barz_Proto_DiamondCutInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Barz {
  public static func getCounterfactualAddress(input: Foundation.Data) -> Swift.String
  public static func getInitCode(factory: Swift.String, publicKey: WalletCore.PublicKey, verificationFacet: Swift.String, salt: Swift.UInt32) -> Foundation.Data
  public static func getFormattedSignature(signature: Foundation.Data, challenge: Foundation.Data, authenticatorData: Foundation.Data, clientDataJSON: Swift.String) -> Foundation.Data
  public static func getPrefixedMsgHash(msgHash: Foundation.Data, barzAddress: Swift.String, chainId: Swift.UInt32) -> Foundation.Data
  public static func getDiamondCutCode(input: Foundation.Data) -> Foundation.Data
}
public struct Base32 {
  public static func decodeWithAlphabet(string: Swift.String, alphabet: Swift.String?) -> Foundation.Data?
  public static func decode(string: Swift.String) -> Foundation.Data?
  public static func encodeWithAlphabet(data: Foundation.Data, alphabet: Swift.String?) -> Swift.String
  public static func encode(data: Foundation.Data) -> Swift.String
}
public struct Base58 {
  public static func encode(data: Foundation.Data) -> Swift.String
  public static func encodeNoCheck(data: Foundation.Data) -> Swift.String
  public static func decode(string: Swift.String) -> Foundation.Data?
  public static func decodeNoCheck(string: Swift.String) -> Foundation.Data?
}
public struct Base64 {
  public static func decode(string: Swift.String) -> Foundation.Data?
  public static func decodeUrl(string: Swift.String) -> Foundation.Data?
  public static func encode(data: Foundation.Data) -> Swift.String
  public static func encodeUrl(data: Foundation.Data) -> Swift.String
}
public typealias BinanceTransaction = WalletCore.TW_Binance_Proto_Transaction
public typealias BinanceSignature = WalletCore.TW_Binance_Proto_Signature
public typealias BinanceTradeOrder = WalletCore.TW_Binance_Proto_TradeOrder
public typealias BinanceCancelTradeOrder = WalletCore.TW_Binance_Proto_CancelTradeOrder
public typealias BinanceSendOrder = WalletCore.TW_Binance_Proto_SendOrder
public typealias BinanceTokenIssueOrder = WalletCore.TW_Binance_Proto_TokenIssueOrder
public typealias BinanceTokenMintOrder = WalletCore.TW_Binance_Proto_TokenMintOrder
public typealias BinanceTokenBurnOrder = WalletCore.TW_Binance_Proto_TokenBurnOrder
public typealias BinanceTokenFreezeOrder = WalletCore.TW_Binance_Proto_TokenFreezeOrder
public typealias BinanceTokenUnfreezeOrder = WalletCore.TW_Binance_Proto_TokenUnfreezeOrder
public typealias BinanceHTLTOrder = WalletCore.TW_Binance_Proto_HTLTOrder
public typealias BinanceDepositHTLTOrder = WalletCore.TW_Binance_Proto_DepositHTLTOrder
public typealias BinanceClaimHTLOrder = WalletCore.TW_Binance_Proto_ClaimHTLOrder
public typealias BinanceRefundHTLTOrder = WalletCore.TW_Binance_Proto_RefundHTLTOrder
public typealias BinanceTransferOut = WalletCore.TW_Binance_Proto_TransferOut
public typealias BinanceSideChainDelegate = WalletCore.TW_Binance_Proto_SideChainDelegate
public typealias BinanceSideChainRedelegate = WalletCore.TW_Binance_Proto_SideChainRedelegate
public typealias BinanceSideChainUndelegate = WalletCore.TW_Binance_Proto_SideChainUndelegate
public typealias BinanceTimeLockOrder = WalletCore.TW_Binance_Proto_TimeLockOrder
public typealias BinanceTimeRelockOrder = WalletCore.TW_Binance_Proto_TimeRelockOrder
public typealias BinanceTimeUnlockOrder = WalletCore.TW_Binance_Proto_TimeUnlockOrder
public typealias BinanceSigningInput = WalletCore.TW_Binance_Proto_SigningInput
public typealias BinanceSigningOutput = WalletCore.TW_Binance_Proto_SigningOutput
public struct TW_Binance_Proto_Transaction {
  public var msgs: [Foundation.Data]
  public var signatures: [Foundation.Data]
  public var memo: Swift.String
  public var source: Swift.Int64
  public var data: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_Signature {
  public var pubKey: Foundation.Data
  public var signature: Foundation.Data
  public var accountNumber: Swift.Int64
  public var sequence: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TradeOrder {
  public var sender: Foundation.Data
  public var id: Swift.String
  public var symbol: Swift.String
  public var ordertype: Swift.Int64
  public var side: Swift.Int64
  public var price: Swift.Int64
  public var quantity: Swift.Int64
  public var timeinforce: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_CancelTradeOrder {
  public var sender: Foundation.Data
  public var symbol: Swift.String
  public var refid: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_SendOrder {
  public var inputs: [WalletCore.TW_Binance_Proto_SendOrder.Input]
  public var outputs: [WalletCore.TW_Binance_Proto_SendOrder.Output]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public struct Token {
    public var denom: Swift.String
    public var amount: Swift.Int64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Input {
    public var address: Foundation.Data
    public var coins: [WalletCore.TW_Binance_Proto_SendOrder.Token]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Output {
    public var address: Foundation.Data
    public var coins: [WalletCore.TW_Binance_Proto_SendOrder.Token]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_Binance_Proto_TokenIssueOrder {
  public var from: Foundation.Data
  public var name: Swift.String
  public var symbol: Swift.String
  public var totalSupply: Swift.Int64
  public var mintable: Swift.Bool
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TokenMintOrder {
  public var from: Foundation.Data
  public var symbol: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TokenBurnOrder {
  public var from: Foundation.Data
  public var symbol: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TokenFreezeOrder {
  public var from: Foundation.Data
  public var symbol: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TokenUnfreezeOrder {
  public var from: Foundation.Data
  public var symbol: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_HTLTOrder {
  public var from: Foundation.Data
  public var to: Foundation.Data
  public var recipientOtherChain: Swift.String
  public var senderOtherChain: Swift.String
  public var randomNumberHash: Foundation.Data
  public var timestamp: Swift.Int64
  public var amount: [WalletCore.TW_Binance_Proto_SendOrder.Token]
  public var expectedIncome: Swift.String
  public var heightSpan: Swift.Int64
  public var crossChain: Swift.Bool
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_DepositHTLTOrder {
  public var from: Foundation.Data
  public var amount: [WalletCore.TW_Binance_Proto_SendOrder.Token]
  public var swapID: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_ClaimHTLOrder {
  public var from: Foundation.Data
  public var swapID: Foundation.Data
  public var randomNumber: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_RefundHTLTOrder {
  public var from: Foundation.Data
  public var swapID: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TransferOut {
  public var from: Foundation.Data
  public var to: Foundation.Data
  public var amount: WalletCore.TW_Binance_Proto_SendOrder.Token {
    get
    set
  }
  public var hasAmount: Swift.Bool {
    get
  }
  public mutating func clearAmount()
  public var expireTime: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_SideChainDelegate {
  public var delegatorAddr: Foundation.Data
  public var validatorAddr: Foundation.Data
  public var delegation: WalletCore.TW_Binance_Proto_SendOrder.Token {
    get
    set
  }
  public var hasDelegation: Swift.Bool {
    get
  }
  public mutating func clearDelegation()
  public var chainID: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_SideChainRedelegate {
  public var delegatorAddr: Foundation.Data
  public var validatorSrcAddr: Foundation.Data
  public var validatorDstAddr: Foundation.Data
  public var amount: WalletCore.TW_Binance_Proto_SendOrder.Token {
    get
    set
  }
  public var hasAmount: Swift.Bool {
    get
  }
  public mutating func clearAmount()
  public var chainID: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_SideChainUndelegate {
  public var delegatorAddr: Foundation.Data
  public var validatorAddr: Foundation.Data
  public var amount: WalletCore.TW_Binance_Proto_SendOrder.Token {
    get
    set
  }
  public var hasAmount: Swift.Bool {
    get
  }
  public mutating func clearAmount()
  public var chainID: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TimeLockOrder {
  public var fromAddress: Foundation.Data
  public var description_p: Swift.String
  public var amount: [WalletCore.TW_Binance_Proto_SendOrder.Token]
  public var lockTime: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TimeRelockOrder {
  public var fromAddress: Foundation.Data
  public var id: Swift.Int64
  public var description_p: Swift.String
  public var amount: [WalletCore.TW_Binance_Proto_SendOrder.Token]
  public var lockTime: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_TimeUnlockOrder {
  public var fromAddress: Foundation.Data
  public var id: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Binance_Proto_SigningInput {
  public var chainID: Swift.String
  public var accountNumber: Swift.Int64
  public var sequence: Swift.Int64
  public var source: Swift.Int64
  public var memo: Swift.String
  public var privateKey: Foundation.Data
  public var orderOneof: WalletCore.TW_Binance_Proto_SigningInput.OneOf_OrderOneof?
  public var tradeOrder: WalletCore.TW_Binance_Proto_TradeOrder {
    get
    set
  }
  public var cancelTradeOrder: WalletCore.TW_Binance_Proto_CancelTradeOrder {
    get
    set
  }
  public var sendOrder: WalletCore.TW_Binance_Proto_SendOrder {
    get
    set
  }
  public var freezeOrder: WalletCore.TW_Binance_Proto_TokenFreezeOrder {
    get
    set
  }
  public var unfreezeOrder: WalletCore.TW_Binance_Proto_TokenUnfreezeOrder {
    get
    set
  }
  public var htltOrder: WalletCore.TW_Binance_Proto_HTLTOrder {
    get
    set
  }
  public var depositHtltOrder: WalletCore.TW_Binance_Proto_DepositHTLTOrder {
    get
    set
  }
  public var claimHtltOrder: WalletCore.TW_Binance_Proto_ClaimHTLOrder {
    get
    set
  }
  public var refundHtltOrder: WalletCore.TW_Binance_Proto_RefundHTLTOrder {
    get
    set
  }
  public var issueOrder: WalletCore.TW_Binance_Proto_TokenIssueOrder {
    get
    set
  }
  public var mintOrder: WalletCore.TW_Binance_Proto_TokenMintOrder {
    get
    set
  }
  public var burnOrder: WalletCore.TW_Binance_Proto_TokenBurnOrder {
    get
    set
  }
  public var transferOutOrder: WalletCore.TW_Binance_Proto_TransferOut {
    get
    set
  }
  public var sideDelegateOrder: WalletCore.TW_Binance_Proto_SideChainDelegate {
    get
    set
  }
  public var sideRedelegateOrder: WalletCore.TW_Binance_Proto_SideChainRedelegate {
    get
    set
  }
  public var sideUndelegateOrder: WalletCore.TW_Binance_Proto_SideChainUndelegate {
    get
    set
  }
  public var timeLockOrder: WalletCore.TW_Binance_Proto_TimeLockOrder {
    get
    set
  }
  public var timeRelockOrder: WalletCore.TW_Binance_Proto_TimeRelockOrder {
    get
    set
  }
  public var timeUnlockOrder: WalletCore.TW_Binance_Proto_TimeUnlockOrder {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_OrderOneof : Swift.Equatable {
    case tradeOrder(WalletCore.TW_Binance_Proto_TradeOrder)
    case cancelTradeOrder(WalletCore.TW_Binance_Proto_CancelTradeOrder)
    case sendOrder(WalletCore.TW_Binance_Proto_SendOrder)
    case freezeOrder(WalletCore.TW_Binance_Proto_TokenFreezeOrder)
    case unfreezeOrder(WalletCore.TW_Binance_Proto_TokenUnfreezeOrder)
    case htltOrder(WalletCore.TW_Binance_Proto_HTLTOrder)
    case depositHtltOrder(WalletCore.TW_Binance_Proto_DepositHTLTOrder)
    case claimHtltOrder(WalletCore.TW_Binance_Proto_ClaimHTLOrder)
    case refundHtltOrder(WalletCore.TW_Binance_Proto_RefundHTLTOrder)
    case issueOrder(WalletCore.TW_Binance_Proto_TokenIssueOrder)
    case mintOrder(WalletCore.TW_Binance_Proto_TokenMintOrder)
    case burnOrder(WalletCore.TW_Binance_Proto_TokenBurnOrder)
    case transferOutOrder(WalletCore.TW_Binance_Proto_TransferOut)
    case sideDelegateOrder(WalletCore.TW_Binance_Proto_SideChainDelegate)
    case sideRedelegateOrder(WalletCore.TW_Binance_Proto_SideChainRedelegate)
    case sideUndelegateOrder(WalletCore.TW_Binance_Proto_SideChainUndelegate)
    case timeLockOrder(WalletCore.TW_Binance_Proto_TimeLockOrder)
    case timeRelockOrder(WalletCore.TW_Binance_Proto_TimeRelockOrder)
    case timeUnlockOrder(WalletCore.TW_Binance_Proto_TimeUnlockOrder)
    public static func == (a: WalletCore.TW_Binance_Proto_SigningInput.OneOf_OrderOneof, b: WalletCore.TW_Binance_Proto_SigningInput.OneOf_OrderOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Binance_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var signature: Foundation.Data
  public var signatureJson: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Binance_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_Transaction, rhs: WalletCore.TW_Binance_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_Signature : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_Signature, rhs: WalletCore.TW_Binance_Proto_Signature) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TradeOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TradeOrder, rhs: WalletCore.TW_Binance_Proto_TradeOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_CancelTradeOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_CancelTradeOrder, rhs: WalletCore.TW_Binance_Proto_CancelTradeOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SendOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SendOrder, rhs: WalletCore.TW_Binance_Proto_SendOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SendOrder.Token : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SendOrder.Token, rhs: WalletCore.TW_Binance_Proto_SendOrder.Token) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SendOrder.Input : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SendOrder.Input, rhs: WalletCore.TW_Binance_Proto_SendOrder.Input) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SendOrder.Output : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SendOrder.Output, rhs: WalletCore.TW_Binance_Proto_SendOrder.Output) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TokenIssueOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TokenIssueOrder, rhs: WalletCore.TW_Binance_Proto_TokenIssueOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TokenMintOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TokenMintOrder, rhs: WalletCore.TW_Binance_Proto_TokenMintOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TokenBurnOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TokenBurnOrder, rhs: WalletCore.TW_Binance_Proto_TokenBurnOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TokenFreezeOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TokenFreezeOrder, rhs: WalletCore.TW_Binance_Proto_TokenFreezeOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TokenUnfreezeOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TokenUnfreezeOrder, rhs: WalletCore.TW_Binance_Proto_TokenUnfreezeOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_HTLTOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_HTLTOrder, rhs: WalletCore.TW_Binance_Proto_HTLTOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_DepositHTLTOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_DepositHTLTOrder, rhs: WalletCore.TW_Binance_Proto_DepositHTLTOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_ClaimHTLOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_ClaimHTLOrder, rhs: WalletCore.TW_Binance_Proto_ClaimHTLOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_RefundHTLTOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_RefundHTLTOrder, rhs: WalletCore.TW_Binance_Proto_RefundHTLTOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TransferOut : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TransferOut, rhs: WalletCore.TW_Binance_Proto_TransferOut) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SideChainDelegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SideChainDelegate, rhs: WalletCore.TW_Binance_Proto_SideChainDelegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SideChainRedelegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SideChainRedelegate, rhs: WalletCore.TW_Binance_Proto_SideChainRedelegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SideChainUndelegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SideChainUndelegate, rhs: WalletCore.TW_Binance_Proto_SideChainUndelegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TimeLockOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TimeLockOrder, rhs: WalletCore.TW_Binance_Proto_TimeLockOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TimeRelockOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TimeRelockOrder, rhs: WalletCore.TW_Binance_Proto_TimeRelockOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_TimeUnlockOrder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_TimeUnlockOrder, rhs: WalletCore.TW_Binance_Proto_TimeUnlockOrder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SigningInput, rhs: WalletCore.TW_Binance_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Binance_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Binance_Proto_SigningOutput, rhs: WalletCore.TW_Binance_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias BitcoinTransaction = WalletCore.TW_Bitcoin_Proto_Transaction
public typealias BitcoinTransactionInput = WalletCore.TW_Bitcoin_Proto_TransactionInput
public typealias BitcoinOutPoint = WalletCore.TW_Bitcoin_Proto_OutPoint
public typealias BitcoinTransactionOutput = WalletCore.TW_Bitcoin_Proto_TransactionOutput
public typealias BitcoinUnspentTransaction = WalletCore.TW_Bitcoin_Proto_UnspentTransaction
public typealias BitcoinOutputAddress = WalletCore.TW_Bitcoin_Proto_OutputAddress
public typealias BitcoinOutputIndex = WalletCore.TW_Bitcoin_Proto_OutputIndex
public typealias BitcoinSigningInput = WalletCore.TW_Bitcoin_Proto_SigningInput
public typealias BitcoinTransactionPlan = WalletCore.TW_Bitcoin_Proto_TransactionPlan
public typealias BitcoinSigningOutput = WalletCore.TW_Bitcoin_Proto_SigningOutput
public typealias BitcoinHashPublicKey = WalletCore.TW_Bitcoin_Proto_HashPublicKey
public typealias BitcoinPreSigningOutput = WalletCore.TW_Bitcoin_Proto_PreSigningOutput
public typealias BitcoinTransactionVariant = WalletCore.TW_Bitcoin_Proto_TransactionVariant
public enum TW_Bitcoin_Proto_TransactionVariant : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case p2Pkh
  case p2Wpkh
  case p2Trkeypath
  case brc20Transfer
  case nftinscription
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_TransactionVariant : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Bitcoin_Proto_TransactionVariant]
  public typealias AllCases = [WalletCore.TW_Bitcoin_Proto_TransactionVariant]
}
public struct TW_Bitcoin_Proto_Transaction {
  public var version: Swift.Int32
  public var lockTime: Swift.UInt32
  public var inputs: [WalletCore.TW_Bitcoin_Proto_TransactionInput]
  public var outputs: [WalletCore.TW_Bitcoin_Proto_TransactionOutput]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_TransactionInput {
  public var previousOutput: WalletCore.TW_Bitcoin_Proto_OutPoint {
    get
    set
  }
  public var hasPreviousOutput: Swift.Bool {
    get
  }
  public mutating func clearPreviousOutput()
  public var sequence: Swift.UInt32
  public var script: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_OutPoint {
  public var hash: Foundation.Data
  public var index: Swift.UInt32
  public var sequence: Swift.UInt32
  public var tree: Swift.Int32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_TransactionOutput {
  public var value: Swift.Int64
  public var script: Foundation.Data
  public var spendingScript: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_UnspentTransaction {
  public var outPoint: WalletCore.TW_Bitcoin_Proto_OutPoint {
    get
    set
  }
  public var hasOutPoint: Swift.Bool {
    get
  }
  public mutating func clearOutPoint()
  public var script: Foundation.Data
  public var amount: Swift.Int64
  public var variant: WalletCore.TW_Bitcoin_Proto_TransactionVariant
  public var spendingScript: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_OutputAddress {
  public var toAddress: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_OutputIndex {
  public var index: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_SigningInput {
  public var hashType: Swift.UInt32 {
    get
    set
  }
  public var amount: Swift.Int64 {
    get
    set
  }
  public var byteFee: Swift.Int64 {
    get
    set
  }
  public var toAddress: Swift.String {
    get
    set
  }
  public var changeAddress: Swift.String {
    get
    set
  }
  public var privateKey: [Foundation.Data] {
    get
    set
  }
  public var scripts: Swift.Dictionary<Swift.String, Foundation.Data> {
    get
    set
  }
  public var utxo: [WalletCore.TW_Bitcoin_Proto_UnspentTransaction] {
    get
    set
  }
  public var useMaxAmount: Swift.Bool {
    get
    set
  }
  public var coinType: Swift.UInt32 {
    get
    set
  }
  public var plan: WalletCore.TW_Bitcoin_Proto_TransactionPlan {
    get
    set
  }
  public var hasPlan: Swift.Bool {
    get
  }
  public mutating func clearPlan()
  public var lockTime: Swift.UInt32 {
    get
    set
  }
  public var outputOpReturn: Foundation.Data {
    get
    set
  }
  public var outputOpReturnIndex: WalletCore.TW_Bitcoin_Proto_OutputIndex {
    get
    set
  }
  public var hasOutputOpReturnIndex: Swift.Bool {
    get
  }
  public mutating func clearOutputOpReturnIndex()
  public var extraOutputs: [WalletCore.TW_Bitcoin_Proto_OutputAddress] {
    get
    set
  }
  public var useMaxUtxo: Swift.Bool {
    get
    set
  }
  public var disableDustFilter: Swift.Bool {
    get
    set
  }
  public var time: Swift.UInt32 {
    get
    set
  }
  public var isItBrcOperation: Swift.Bool {
    get
    set
  }
  public var planningV2: WalletCore.TW_BitcoinV2_Proto_ComposePlan {
    get
    set
  }
  public var hasPlanningV2: Swift.Bool {
    get
  }
  public mutating func clearPlanningV2()
  public var signingV2: WalletCore.TW_BitcoinV2_Proto_SigningInput {
    get
    set
  }
  public var hasSigningV2: Swift.Bool {
    get
  }
  public mutating func clearSigningV2()
  public var dustPolicy: WalletCore.TW_Bitcoin_Proto_SigningInput.OneOf_DustPolicy? {
    get
    set
  }
  public var fixedDustThreshold: Swift.Int64 {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_DustPolicy : Swift.Equatable {
    case fixedDustThreshold(Swift.Int64)
    public static func == (a: WalletCore.TW_Bitcoin_Proto_SigningInput.OneOf_DustPolicy, b: WalletCore.TW_Bitcoin_Proto_SigningInput.OneOf_DustPolicy) -> Swift.Bool
  }
  public init()
}
public struct TW_Bitcoin_Proto_TransactionPlan {
  public var amount: Swift.Int64
  public var availableAmount: Swift.Int64
  public var fee: Swift.Int64
  public var change: Swift.Int64
  public var utxos: [WalletCore.TW_Bitcoin_Proto_UnspentTransaction]
  public var branchID: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var outputOpReturn: Foundation.Data
  public var outputOpReturnIndex: WalletCore.TW_Bitcoin_Proto_OutputIndex {
    get
    set
  }
  public var hasOutputOpReturnIndex: Swift.Bool {
    get
  }
  public mutating func clearOutputOpReturnIndex()
  public var preblockhash: Foundation.Data
  public var preblockheight: Swift.Int64
  public var planningResultV2: WalletCore.TW_BitcoinV2_Proto_TransactionPlan {
    get
    set
  }
  public var hasPlanningResultV2: Swift.Bool {
    get
  }
  public mutating func clearPlanningResultV2()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_SigningOutput {
  public var transaction: WalletCore.TW_Bitcoin_Proto_Transaction {
    get
    set
  }
  public var hasTransaction: Swift.Bool {
    get
  }
  public mutating func clearTransaction()
  public var encoded: Foundation.Data {
    get
    set
  }
  public var transactionID: Swift.String {
    get
    set
  }
  public var error: WalletCore.TW_Common_Proto_SigningError {
    get
    set
  }
  public var errorMessage: Swift.String {
    get
    set
  }
  public var signingResultV2: WalletCore.TW_BitcoinV2_Proto_SigningOutput {
    get
    set
  }
  public var hasSigningResultV2: Swift.Bool {
    get
  }
  public mutating func clearSigningResultV2()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_HashPublicKey {
  public var dataHash: Foundation.Data
  public var publicKeyHash: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Bitcoin_Proto_PreSigningOutput {
  public var hashPublicKeys: [WalletCore.TW_Bitcoin_Proto_HashPublicKey]
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Bitcoin_Proto_TransactionVariant : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Bitcoin_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_Transaction, rhs: WalletCore.TW_Bitcoin_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_TransactionInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_TransactionInput, rhs: WalletCore.TW_Bitcoin_Proto_TransactionInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_OutPoint : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_OutPoint, rhs: WalletCore.TW_Bitcoin_Proto_OutPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_TransactionOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_TransactionOutput, rhs: WalletCore.TW_Bitcoin_Proto_TransactionOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_UnspentTransaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_UnspentTransaction, rhs: WalletCore.TW_Bitcoin_Proto_UnspentTransaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_OutputAddress : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_OutputAddress, rhs: WalletCore.TW_Bitcoin_Proto_OutputAddress) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_OutputIndex : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_OutputIndex, rhs: WalletCore.TW_Bitcoin_Proto_OutputIndex) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_SigningInput, rhs: WalletCore.TW_Bitcoin_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_TransactionPlan : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_TransactionPlan, rhs: WalletCore.TW_Bitcoin_Proto_TransactionPlan) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_SigningOutput, rhs: WalletCore.TW_Bitcoin_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_HashPublicKey : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_HashPublicKey, rhs: WalletCore.TW_Bitcoin_Proto_HashPublicKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Bitcoin_Proto_PreSigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Bitcoin_Proto_PreSigningOutput, rhs: WalletCore.TW_Bitcoin_Proto_PreSigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.BitcoinAddress : Swift.Equatable {
  final public var base58String: Swift.String {
    get
  }
  final public func hash(into hasher: inout Swift.Hasher)
  public static func compatibleAddress(publicKey: WalletCore.PublicKey, prefix: Swift.UInt8) -> WalletCore.BitcoinAddress
}
@_hasMissingDesignatedInitializers final public class BitcoinAddress : WalletCore.Address {
  public static func == (lhs: WalletCore.BitcoinAddress, rhs: WalletCore.BitcoinAddress) -> Swift.Bool
  public static func isValid(data: Foundation.Data) -> Swift.Bool
  public static func isValidString(string: Swift.String) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  final public var prefix: Swift.UInt8 {
    get
  }
  final public var keyhash: Foundation.Data {
    get
  }
  public init?(string: Swift.String)
  public init?(data: Foundation.Data)
  public init?(publicKey: WalletCore.PublicKey, prefix: Swift.UInt8)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class BitcoinFee {
  public static func calculateFee(data: Foundation.Data, satVb: Swift.String) -> Swift.String?
  @objc deinit
}
public struct BitcoinMessageSigner {
  public static func signMessage(privateKey: WalletCore.PrivateKey, address: Swift.String, message: Swift.String) -> Swift.String
  public static func verifyMessage(address: Swift.String, message: Swift.String, signature: Swift.String) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class BitcoinScript {
  public static func == (lhs: WalletCore.BitcoinScript, rhs: WalletCore.BitcoinScript) -> Swift.Bool
  public static func buildPayToPublicKey(pubkey: Foundation.Data) -> WalletCore.BitcoinScript
  public static func buildPayToPublicKeyHash(hash: Foundation.Data) -> WalletCore.BitcoinScript
  public static func buildPayToScriptHash(scriptHash: Foundation.Data) -> WalletCore.BitcoinScript
  public static func buildPayToWitnessPubkeyHash(hash: Foundation.Data) -> WalletCore.BitcoinScript
  public static func buildPayToWitnessScriptHash(scriptHash: Foundation.Data) -> WalletCore.BitcoinScript
  public static func buildBRC20InscribeTransfer(ticker: Swift.String, amount: Swift.String, pubkey: Foundation.Data) -> Foundation.Data
  public static func buildOrdinalNftInscription(mimeType: Swift.String, payload: Foundation.Data, pubkey: Foundation.Data) -> Foundation.Data
  public static func lockScriptForAddress(address: Swift.String, coin: WalletCore.CoinType) -> WalletCore.BitcoinScript
  public static func lockScriptForAddressReplay(address: Swift.String, coin: WalletCore.CoinType, blockHash: Foundation.Data, blockHeight: Swift.Int64) -> WalletCore.BitcoinScript
  public static func hashTypeForCoin(coinType: WalletCore.CoinType) -> Swift.UInt32
  final public var size: Swift.Int {
    get
  }
  final public var data: Foundation.Data {
    get
  }
  final public var scriptHash: Foundation.Data {
    get
  }
  final public var isPayToScriptHash: Swift.Bool {
    get
  }
  final public var isPayToWitnessScriptHash: Swift.Bool {
    get
  }
  final public var isPayToWitnessPublicKeyHash: Swift.Bool {
    get
  }
  final public var isWitnessProgram: Swift.Bool {
    get
  }
  public init()
  public init(data: Foundation.Data)
  public init(script: WalletCore.BitcoinScript)
  @objc deinit
  final public func matchPayToPubkey() -> Foundation.Data?
  final public func matchPayToPubkeyHash() -> Foundation.Data?
  final public func matchPayToScriptHash() -> Foundation.Data?
  final public func matchPayToWitnessPublicKeyHash() -> Foundation.Data?
  final public func matchPayToWitnessScriptHash() -> Foundation.Data?
  final public func encode() -> Foundation.Data
}
extension WalletCore.BitcoinSigHashType {
  public func isSingle() -> Swift.Bool
  public func isNone() -> Swift.Bool
}
public enum BitcoinSigHashType : Swift.UInt32, Swift.CaseIterable {
  case all
  case none
  case single
  case fork
  case forkBTG
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.BitcoinSigHashType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.BitcoinSigHashType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public typealias BitcoinV2SigningInput = WalletCore.TW_BitcoinV2_Proto_SigningInput
public typealias BitcoinV2Input = WalletCore.TW_BitcoinV2_Proto_Input
public typealias BitcoinV2Output = WalletCore.TW_BitcoinV2_Proto_Output
public typealias BitcoinV2ToPublicKeyOrHash = WalletCore.TW_BitcoinV2_Proto_ToPublicKeyOrHash
public typealias BitcoinV2PreSigningOutput = WalletCore.TW_BitcoinV2_Proto_PreSigningOutput
public typealias BitcoinV2SigningOutput = WalletCore.TW_BitcoinV2_Proto_SigningOutput
public typealias BitcoinV2Transaction = WalletCore.TW_BitcoinV2_Proto_Transaction
public typealias BitcoinV2TransactionInput = WalletCore.TW_BitcoinV2_Proto_TransactionInput
public typealias BitcoinV2TransactionOutput = WalletCore.TW_BitcoinV2_Proto_TransactionOutput
public typealias BitcoinV2ComposePlan = WalletCore.TW_BitcoinV2_Proto_ComposePlan
public typealias BitcoinV2TransactionPlan = WalletCore.TW_BitcoinV2_Proto_TransactionPlan
public typealias BitcoinV2Error = WalletCore.TW_BitcoinV2_Proto_Error
public enum TW_BitcoinV2_Proto_Error : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case ok
  case utxoInvalidLeafHash
  case utxoInvalidSighashType
  case utxoInvalidLockTime
  case utxoInvalidTxid
  case utxoSighashFailed
  case utxoMissingSighashMethod
  case utxoFailedEncoding
  case utxoInsufficientInputs
  case utxoNoOutputsSpecified
  case utxoMissingChangeScriptPubkey
  case zeroSequenceNotEnabled
  case unmatchedInputSignatureCount
  case missingInputBuilder
  case missingOutputBuilder
  case missingRecipient
  case missingInscription
  case missingTaggedOutput
  case legacyP2TrInvalidVariant
  case legacyNoSpendingScriptProvided
  case legacyExpectedRedeemScript
  case legacyOutpointNotSet
  case legacyNoPrivateKey
  case legacyNoPlanProvided
  case invalidPrivateKey
  case invalidPublicKey
  case invalidSighash
  case invalidWitnessPubkeyHash
  case invalidBrc20Ticker
  case invalidEcdsaSignature
  case invalidSchnorrSignature
  case invalidControlBlock
  case invalidPubkeyHash
  case invalidTaprootRoot
  case invalidRedeemScript
  case invalidWpkhScriptCode
  case invalidWitnessRedeemScriptHash
  case invalidWitnessEncoding
  case invalidTaprootTweakedPubkey
  case invalidChangeOutput
  case unsupportedAddressRecipient
  case badAddressRecipient
  case ordinalMimeTypeTooLarge
  case ordinalPayloadTooLarge
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_Error : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_BitcoinV2_Proto_Error]
  public typealias AllCases = [WalletCore.TW_BitcoinV2_Proto_Error]
}
public struct TW_BitcoinV2_Proto_SigningInput {
  public var version: Swift.Int32
  public var privateKey: Foundation.Data
  public var lockTime: WalletCore.TW_Utxo_Proto_LockTime {
    get
    set
  }
  public var hasLockTime: Swift.Bool {
    get
  }
  public mutating func clearLockTime()
  public var inputs: [WalletCore.TW_BitcoinV2_Proto_Input]
  public var outputs: [WalletCore.TW_BitcoinV2_Proto_Output]
  public var inputSelector: WalletCore.TW_Utxo_Proto_InputSelector
  public var feePerVb: Swift.UInt64
  public var changeOutput: WalletCore.TW_BitcoinV2_Proto_Output {
    get
    set
  }
  public var hasChangeOutput: Swift.Bool {
    get
  }
  public mutating func clearChangeOutput()
  public var disableChangeOutput: Swift.Bool
  public var dangerousUseFixedSchnorrRng: Swift.Bool
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_BitcoinV2_Proto_Input {
  public var privateKey: Foundation.Data
  public var txid: Foundation.Data
  public var vout: Swift.UInt32
  public var sequence: Swift.UInt32
  public var sequenceEnableZero: Swift.Bool
  public var value: Swift.UInt64
  public var sighashType: WalletCore.TW_Utxo_Proto_SighashType
  public var toRecipient: WalletCore.TW_BitcoinV2_Proto_Input.OneOf_ToRecipient?
  public var builder: WalletCore.TW_BitcoinV2_Proto_Input.InputBuilder {
    get
    set
  }
  public var customScript: WalletCore.TW_BitcoinV2_Proto_Input.InputScriptWitness {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_ToRecipient : Swift.Equatable {
    case builder(WalletCore.TW_BitcoinV2_Proto_Input.InputBuilder)
    case customScript(WalletCore.TW_BitcoinV2_Proto_Input.InputScriptWitness)
    public static func == (a: WalletCore.TW_BitcoinV2_Proto_Input.OneOf_ToRecipient, b: WalletCore.TW_BitcoinV2_Proto_Input.OneOf_ToRecipient) -> Swift.Bool
  }
  public struct InputBuilder {
    public var variant: WalletCore.TW_BitcoinV2_Proto_Input.InputBuilder.OneOf_Variant?
    public var p2Sh: Foundation.Data {
      get
      set
    }
    public var p2Pkh: Foundation.Data {
      get
      set
    }
    public var p2Wsh: Foundation.Data {
      get
      set
    }
    public var p2Wpkh: Foundation.Data {
      get
      set
    }
    public var p2TrKeyPath: WalletCore.TW_BitcoinV2_Proto_Input.InputTaprootKeyPath {
      get
      set
    }
    public var p2TrScriptPath: WalletCore.TW_BitcoinV2_Proto_Input.InputTaprootScriptPath {
      get
      set
    }
    public var brc20Inscribe: WalletCore.TW_BitcoinV2_Proto_Input.InputBrc20Inscription {
      get
      set
    }
    public var ordinalInscribe: WalletCore.TW_BitcoinV2_Proto_Input.InputOrdinalInscription {
      get
      set
    }
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public enum OneOf_Variant : Swift.Equatable {
      case p2Sh(Foundation.Data)
      case p2Pkh(Foundation.Data)
      case p2Wsh(Foundation.Data)
      case p2Wpkh(Foundation.Data)
      case p2TrKeyPath(WalletCore.TW_BitcoinV2_Proto_Input.InputTaprootKeyPath)
      case p2TrScriptPath(WalletCore.TW_BitcoinV2_Proto_Input.InputTaprootScriptPath)
      case brc20Inscribe(WalletCore.TW_BitcoinV2_Proto_Input.InputBrc20Inscription)
      case ordinalInscribe(WalletCore.TW_BitcoinV2_Proto_Input.InputOrdinalInscription)
      public static func == (a: WalletCore.TW_BitcoinV2_Proto_Input.InputBuilder.OneOf_Variant, b: WalletCore.TW_BitcoinV2_Proto_Input.InputBuilder.OneOf_Variant) -> Swift.Bool
    }
    public init()
  }
  public struct InputScriptWitness {
    public var scriptPubkey: Foundation.Data
    public var scriptSig: Foundation.Data
    public var witnessItems: [Foundation.Data]
    public var signingMethod: WalletCore.TW_Utxo_Proto_SigningMethod
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct InputTaprootKeyPath {
    public var onePrevout: Swift.Bool
    public var publicKey: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct InputTaprootScriptPath {
    public var onePrevout: Swift.Bool
    public var payload: Foundation.Data
    public var controlBlock: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct InputOrdinalInscription {
    public var onePrevout: Swift.Bool
    public var inscribeTo: Foundation.Data
    public var mimeType: Swift.String
    public var payload: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct InputBrc20Inscription {
    public var onePrevout: Swift.Bool
    public var inscribeTo: Foundation.Data
    public var ticker: Swift.String
    public var transferAmount: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_BitcoinV2_Proto_Output {
  public var value: Swift.UInt64
  public var toRecipient: WalletCore.TW_BitcoinV2_Proto_Output.OneOf_ToRecipient?
  public var builder: WalletCore.TW_BitcoinV2_Proto_Output.OutputBuilder {
    get
    set
  }
  public var customScriptPubkey: Foundation.Data {
    get
    set
  }
  public var fromAddress: Swift.String {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_ToRecipient : Swift.Equatable {
    case builder(WalletCore.TW_BitcoinV2_Proto_Output.OutputBuilder)
    case customScriptPubkey(Foundation.Data)
    case fromAddress(Swift.String)
    public static func == (a: WalletCore.TW_BitcoinV2_Proto_Output.OneOf_ToRecipient, b: WalletCore.TW_BitcoinV2_Proto_Output.OneOf_ToRecipient) -> Swift.Bool
  }
  public struct OutputBuilder {
    public var variant: WalletCore.TW_BitcoinV2_Proto_Output.OutputBuilder.OneOf_Variant?
    public var p2Sh: WalletCore.TW_BitcoinV2_Proto_Output.OutputRedeemScriptOrHash {
      get
      set
    }
    public var p2Pkh: WalletCore.TW_BitcoinV2_Proto_ToPublicKeyOrHash {
      get
      set
    }
    public var p2Wsh: WalletCore.TW_BitcoinV2_Proto_Output.OutputRedeemScriptOrHash {
      get
      set
    }
    public var p2Wpkh: WalletCore.TW_BitcoinV2_Proto_ToPublicKeyOrHash {
      get
      set
    }
    public var p2TrKeyPath: Foundation.Data {
      get
      set
    }
    public var p2TrScriptPath: WalletCore.TW_BitcoinV2_Proto_Output.OutputTaprootScriptPath {
      get
      set
    }
    public var p2TrDangerousAssumeTweaked: Foundation.Data {
      get
      set
    }
    public var brc20Inscribe: WalletCore.TW_BitcoinV2_Proto_Output.OutputBrc20Inscription {
      get
      set
    }
    public var ordinalInscribe: WalletCore.TW_BitcoinV2_Proto_Output.OutputOrdinalInscription {
      get
      set
    }
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public enum OneOf_Variant : Swift.Equatable {
      case p2Sh(WalletCore.TW_BitcoinV2_Proto_Output.OutputRedeemScriptOrHash)
      case p2Pkh(WalletCore.TW_BitcoinV2_Proto_ToPublicKeyOrHash)
      case p2Wsh(WalletCore.TW_BitcoinV2_Proto_Output.OutputRedeemScriptOrHash)
      case p2Wpkh(WalletCore.TW_BitcoinV2_Proto_ToPublicKeyOrHash)
      case p2TrKeyPath(Foundation.Data)
      case p2TrScriptPath(WalletCore.TW_BitcoinV2_Proto_Output.OutputTaprootScriptPath)
      case p2TrDangerousAssumeTweaked(Foundation.Data)
      case brc20Inscribe(WalletCore.TW_BitcoinV2_Proto_Output.OutputBrc20Inscription)
      case ordinalInscribe(WalletCore.TW_BitcoinV2_Proto_Output.OutputOrdinalInscription)
      public static func == (a: WalletCore.TW_BitcoinV2_Proto_Output.OutputBuilder.OneOf_Variant, b: WalletCore.TW_BitcoinV2_Proto_Output.OutputBuilder.OneOf_Variant) -> Swift.Bool
    }
    public init()
  }
  public struct OutputRedeemScriptOrHash {
    public var variant: WalletCore.TW_BitcoinV2_Proto_Output.OutputRedeemScriptOrHash.OneOf_Variant?
    public var redeemScript: Foundation.Data {
      get
      set
    }
    public var hash: Foundation.Data {
      get
      set
    }
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public enum OneOf_Variant : Swift.Equatable {
      case redeemScript(Foundation.Data)
      case hash(Foundation.Data)
      public static func == (a: WalletCore.TW_BitcoinV2_Proto_Output.OutputRedeemScriptOrHash.OneOf_Variant, b: WalletCore.TW_BitcoinV2_Proto_Output.OutputRedeemScriptOrHash.OneOf_Variant) -> Swift.Bool
    }
    public init()
  }
  public struct OutputTaprootScriptPath {
    public var internalKey: Foundation.Data
    public var merkleRoot: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct OutputOrdinalInscription {
    public var inscribeTo: Foundation.Data
    public var mimeType: Swift.String
    public var payload: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct OutputBrc20Inscription {
    public var inscribeTo: Foundation.Data
    public var ticker: Swift.String
    public var transferAmount: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_BitcoinV2_Proto_ToPublicKeyOrHash {
  public var toAddress: WalletCore.TW_BitcoinV2_Proto_ToPublicKeyOrHash.OneOf_ToAddress?
  public var pubkey: Foundation.Data {
    get
    set
  }
  public var hash: Foundation.Data {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_ToAddress : Swift.Equatable {
    case pubkey(Foundation.Data)
    case hash(Foundation.Data)
    public static func == (a: WalletCore.TW_BitcoinV2_Proto_ToPublicKeyOrHash.OneOf_ToAddress, b: WalletCore.TW_BitcoinV2_Proto_ToPublicKeyOrHash.OneOf_ToAddress) -> Swift.Bool
  }
  public init()
}
public struct TW_BitcoinV2_Proto_PreSigningOutput {
  public var error: WalletCore.TW_BitcoinV2_Proto_Error
  public var errorMessage: Swift.String
  public var txid: Foundation.Data
  public var sighashes: [WalletCore.TW_Utxo_Proto_Sighash]
  public var utxoInputs: [WalletCore.TW_Utxo_Proto_TxIn]
  public var utxoOutputs: [WalletCore.TW_BitcoinV2_Proto_PreSigningOutput.TxOut]
  public var weightEstimate: Swift.UInt64
  public var feeEstimate: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public struct TxOut {
    public var value: Swift.UInt64
    public var scriptPubkey: Foundation.Data
    public var taprootPayload: Foundation.Data
    public var controlBlock: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_BitcoinV2_Proto_SigningOutput {
  public var error: WalletCore.TW_BitcoinV2_Proto_Error
  public var errorMessage: Swift.String
  public var transaction: WalletCore.TW_BitcoinV2_Proto_Transaction {
    get
    set
  }
  public var hasTransaction: Swift.Bool {
    get
  }
  public mutating func clearTransaction()
  public var encoded: Foundation.Data
  public var txid: Foundation.Data
  public var weight: Swift.UInt64
  public var fee: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_BitcoinV2_Proto_Transaction {
  public var version: Swift.Int32
  public var lockTime: WalletCore.TW_Utxo_Proto_LockTime {
    get
    set
  }
  public var hasLockTime: Swift.Bool {
    get
  }
  public mutating func clearLockTime()
  public var inputs: [WalletCore.TW_BitcoinV2_Proto_TransactionInput]
  public var outputs: [WalletCore.TW_BitcoinV2_Proto_TransactionOutput]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_BitcoinV2_Proto_TransactionInput {
  public var txid: Foundation.Data
  public var vout: Swift.UInt32
  public var sequence: Swift.UInt32
  public var scriptSig: Foundation.Data
  public var witnessItems: [Foundation.Data]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_BitcoinV2_Proto_TransactionOutput {
  public var scriptPubkey: Foundation.Data
  public var value: Swift.UInt64
  public var taprootPayload: Foundation.Data
  public var controlBlock: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_BitcoinV2_Proto_ComposePlan {
  public var compose: WalletCore.TW_BitcoinV2_Proto_ComposePlan.OneOf_Compose?
  public var brc20: WalletCore.TW_BitcoinV2_Proto_ComposePlan.ComposeBrc20Plan {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Compose : Swift.Equatable {
    case brc20(WalletCore.TW_BitcoinV2_Proto_ComposePlan.ComposeBrc20Plan)
    public static func == (a: WalletCore.TW_BitcoinV2_Proto_ComposePlan.OneOf_Compose, b: WalletCore.TW_BitcoinV2_Proto_ComposePlan.OneOf_Compose) -> Swift.Bool
  }
  public struct ComposeBrc20Plan {
    public var privateKey: Foundation.Data {
      get
      set
    }
    public var inputs: [WalletCore.TW_BitcoinV2_Proto_Input] {
      get
      set
    }
    public var inputSelector: WalletCore.TW_Utxo_Proto_InputSelector {
      get
      set
    }
    public var taggedOutput: WalletCore.TW_BitcoinV2_Proto_Output {
      get
      set
    }
    public var hasTaggedOutput: Swift.Bool {
      get
    }
    public mutating func clearTaggedOutput()
    public var inscription: WalletCore.TW_BitcoinV2_Proto_Input.InputBrc20Inscription {
      get
      set
    }
    public var hasInscription: Swift.Bool {
      get
    }
    public mutating func clearInscription()
    public var feePerVb: Swift.UInt64 {
      get
      set
    }
    public var changeOutput: WalletCore.TW_BitcoinV2_Proto_Output {
      get
      set
    }
    public var hasChangeOutput: Swift.Bool {
      get
    }
    public mutating func clearChangeOutput()
    public var disableChangeOutput: Swift.Bool {
      get
      set
    }
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_BitcoinV2_Proto_TransactionPlan {
  public var error: WalletCore.TW_BitcoinV2_Proto_Error
  public var errorMessage: Swift.String
  public var plan: WalletCore.TW_BitcoinV2_Proto_TransactionPlan.OneOf_Plan?
  public var brc20: WalletCore.TW_BitcoinV2_Proto_TransactionPlan.Brc20Plan {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Plan : Swift.Equatable {
    case brc20(WalletCore.TW_BitcoinV2_Proto_TransactionPlan.Brc20Plan)
    public static func == (a: WalletCore.TW_BitcoinV2_Proto_TransactionPlan.OneOf_Plan, b: WalletCore.TW_BitcoinV2_Proto_TransactionPlan.OneOf_Plan) -> Swift.Bool
  }
  public struct Brc20Plan {
    public var commit: WalletCore.TW_BitcoinV2_Proto_SigningInput {
      get
      set
    }
    public var hasCommit: Swift.Bool {
      get
    }
    public mutating func clearCommit()
    public var reveal: WalletCore.TW_BitcoinV2_Proto_SigningInput {
      get
      set
    }
    public var hasReveal: Swift.Bool {
      get
    }
    public mutating func clearReveal()
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
extension WalletCore.TW_BitcoinV2_Proto_Error : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_BitcoinV2_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_SigningInput, rhs: WalletCore.TW_BitcoinV2_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_Input : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_Input, rhs: WalletCore.TW_BitcoinV2_Proto_Input) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_Input.InputBuilder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_Input.InputBuilder, rhs: WalletCore.TW_BitcoinV2_Proto_Input.InputBuilder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_Input.InputScriptWitness : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_Input.InputScriptWitness, rhs: WalletCore.TW_BitcoinV2_Proto_Input.InputScriptWitness) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_Input.InputTaprootKeyPath : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_Input.InputTaprootKeyPath, rhs: WalletCore.TW_BitcoinV2_Proto_Input.InputTaprootKeyPath) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_Input.InputTaprootScriptPath : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_Input.InputTaprootScriptPath, rhs: WalletCore.TW_BitcoinV2_Proto_Input.InputTaprootScriptPath) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_Input.InputOrdinalInscription : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_Input.InputOrdinalInscription, rhs: WalletCore.TW_BitcoinV2_Proto_Input.InputOrdinalInscription) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_Input.InputBrc20Inscription : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_Input.InputBrc20Inscription, rhs: WalletCore.TW_BitcoinV2_Proto_Input.InputBrc20Inscription) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_Output : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_Output, rhs: WalletCore.TW_BitcoinV2_Proto_Output) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_Output.OutputBuilder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_Output.OutputBuilder, rhs: WalletCore.TW_BitcoinV2_Proto_Output.OutputBuilder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_Output.OutputRedeemScriptOrHash : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_Output.OutputRedeemScriptOrHash, rhs: WalletCore.TW_BitcoinV2_Proto_Output.OutputRedeemScriptOrHash) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_Output.OutputTaprootScriptPath : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_Output.OutputTaprootScriptPath, rhs: WalletCore.TW_BitcoinV2_Proto_Output.OutputTaprootScriptPath) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_Output.OutputOrdinalInscription : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_Output.OutputOrdinalInscription, rhs: WalletCore.TW_BitcoinV2_Proto_Output.OutputOrdinalInscription) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_Output.OutputBrc20Inscription : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_Output.OutputBrc20Inscription, rhs: WalletCore.TW_BitcoinV2_Proto_Output.OutputBrc20Inscription) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_ToPublicKeyOrHash : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_ToPublicKeyOrHash, rhs: WalletCore.TW_BitcoinV2_Proto_ToPublicKeyOrHash) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_PreSigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_PreSigningOutput, rhs: WalletCore.TW_BitcoinV2_Proto_PreSigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_PreSigningOutput.TxOut : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_PreSigningOutput.TxOut, rhs: WalletCore.TW_BitcoinV2_Proto_PreSigningOutput.TxOut) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_SigningOutput, rhs: WalletCore.TW_BitcoinV2_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_Transaction, rhs: WalletCore.TW_BitcoinV2_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_TransactionInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_TransactionInput, rhs: WalletCore.TW_BitcoinV2_Proto_TransactionInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_TransactionOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_TransactionOutput, rhs: WalletCore.TW_BitcoinV2_Proto_TransactionOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_ComposePlan : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_ComposePlan, rhs: WalletCore.TW_BitcoinV2_Proto_ComposePlan) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_ComposePlan.ComposeBrc20Plan : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_ComposePlan.ComposeBrc20Plan, rhs: WalletCore.TW_BitcoinV2_Proto_ComposePlan.ComposeBrc20Plan) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_TransactionPlan : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_TransactionPlan, rhs: WalletCore.TW_BitcoinV2_Proto_TransactionPlan) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_BitcoinV2_Proto_TransactionPlan.Brc20Plan : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_BitcoinV2_Proto_TransactionPlan.Brc20Plan, rhs: WalletCore.TW_BitcoinV2_Proto_TransactionPlan.Brc20Plan) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum Blockchain : Swift.UInt32, Swift.CaseIterable {
  case bitcoin
  case ethereum
  case vechain
  case tron
  case icon
  case binance
  case ripple
  case tezos
  case nimiq
  case stellar
  case aion
  case cosmos
  case theta
  case ontology
  case zilliqa
  case ioTeX
  case eos
  case nano
  case nuls
  case waves
  case aeternity
  case nebulas
  case fio
  case solana
  case harmony
  case near
  case algorand
  case iost
  case polkadot
  case cardano
  case neo
  case filecoin
  case multiversX
  case oasisNetwork
  case decred
  case zcash
  case groestlcoin
  case thorchain
  case ronin
  case kusama
  case zen
  case bitcoinDiamond
  case verge
  case nervos
  case everscale
  case aptos
  case nebl
  case hedera
  case theOpenNetwork
  case sui
  case greenfield
  case internetComputer
  case nativeEvmos
  case nativeInjective
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.Blockchain]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.Blockchain] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public typealias CardanoOutPoint = WalletCore.TW_Cardano_Proto_OutPoint
public typealias CardanoTokenAmount = WalletCore.TW_Cardano_Proto_TokenAmount
public typealias CardanoTxInput = WalletCore.TW_Cardano_Proto_TxInput
public typealias CardanoTxOutput = WalletCore.TW_Cardano_Proto_TxOutput
public typealias CardanoTokenBundle = WalletCore.TW_Cardano_Proto_TokenBundle
public typealias CardanoTransfer = WalletCore.TW_Cardano_Proto_Transfer
public typealias CardanoRegisterStakingKey = WalletCore.TW_Cardano_Proto_RegisterStakingKey
public typealias CardanoDeregisterStakingKey = WalletCore.TW_Cardano_Proto_DeregisterStakingKey
public typealias CardanoDelegate = WalletCore.TW_Cardano_Proto_Delegate
public typealias CardanoWithdraw = WalletCore.TW_Cardano_Proto_Withdraw
public typealias CardanoTransactionPlan = WalletCore.TW_Cardano_Proto_TransactionPlan
public typealias CardanoSigningInput = WalletCore.TW_Cardano_Proto_SigningInput
public typealias CardanoSigningOutput = WalletCore.TW_Cardano_Proto_SigningOutput
public struct TW_Cardano_Proto_OutPoint {
  public var txHash: Foundation.Data
  public var outputIndex: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_TokenAmount {
  public var policyID: Swift.String
  public var assetName: Swift.String
  public var amount: Foundation.Data
  public var assetNameHex: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_TxInput {
  public var outPoint: WalletCore.TW_Cardano_Proto_OutPoint {
    get
    set
  }
  public var hasOutPoint: Swift.Bool {
    get
  }
  public mutating func clearOutPoint()
  public var address: Swift.String
  public var amount: Swift.UInt64
  public var tokenAmount: [WalletCore.TW_Cardano_Proto_TokenAmount]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_TxOutput {
  public var address: Swift.String
  public var amount: Swift.UInt64
  public var tokenAmount: [WalletCore.TW_Cardano_Proto_TokenAmount]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_TokenBundle {
  public var token: [WalletCore.TW_Cardano_Proto_TokenAmount]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_Transfer {
  public var toAddress: Swift.String
  public var changeAddress: Swift.String
  public var amount: Swift.UInt64
  public var tokenAmount: WalletCore.TW_Cardano_Proto_TokenBundle {
    get
    set
  }
  public var hasTokenAmount: Swift.Bool {
    get
  }
  public mutating func clearTokenAmount()
  public var useMaxAmount: Swift.Bool
  public var forceFee: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_RegisterStakingKey {
  public var stakingAddress: Swift.String
  public var depositAmount: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_DeregisterStakingKey {
  public var stakingAddress: Swift.String
  public var undepositAmount: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_Delegate {
  public var stakingAddress: Swift.String
  public var poolID: Foundation.Data
  public var depositAmount: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_Withdraw {
  public var stakingAddress: Swift.String
  public var withdrawAmount: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_TransactionPlan {
  public var availableAmount: Swift.UInt64
  public var amount: Swift.UInt64
  public var fee: Swift.UInt64
  public var change: Swift.UInt64
  public var deposit: Swift.UInt64
  public var undeposit: Swift.UInt64
  public var availableTokens: [WalletCore.TW_Cardano_Proto_TokenAmount]
  public var outputTokens: [WalletCore.TW_Cardano_Proto_TokenAmount]
  public var changeTokens: [WalletCore.TW_Cardano_Proto_TokenAmount]
  public var utxos: [WalletCore.TW_Cardano_Proto_TxInput]
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var extraOutputs: [WalletCore.TW_Cardano_Proto_TxOutput]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_SigningInput {
  public var utxos: [WalletCore.TW_Cardano_Proto_TxInput] {
    get
    set
  }
  public var privateKey: [Foundation.Data] {
    get
    set
  }
  public var transferMessage: WalletCore.TW_Cardano_Proto_Transfer {
    get
    set
  }
  public var hasTransferMessage: Swift.Bool {
    get
  }
  public mutating func clearTransferMessage()
  public var registerStakingKey: WalletCore.TW_Cardano_Proto_RegisterStakingKey {
    get
    set
  }
  public var hasRegisterStakingKey: Swift.Bool {
    get
  }
  public mutating func clearRegisterStakingKey()
  public var delegate: WalletCore.TW_Cardano_Proto_Delegate {
    get
    set
  }
  public var hasDelegate: Swift.Bool {
    get
  }
  public mutating func clearDelegate()
  public var withdraw: WalletCore.TW_Cardano_Proto_Withdraw {
    get
    set
  }
  public var hasWithdraw: Swift.Bool {
    get
  }
  public mutating func clearWithdraw()
  public var deregisterStakingKey: WalletCore.TW_Cardano_Proto_DeregisterStakingKey {
    get
    set
  }
  public var hasDeregisterStakingKey: Swift.Bool {
    get
  }
  public mutating func clearDeregisterStakingKey()
  public var ttl: Swift.UInt64 {
    get
    set
  }
  public var plan: WalletCore.TW_Cardano_Proto_TransactionPlan {
    get
    set
  }
  public var hasPlan: Swift.Bool {
    get
  }
  public mutating func clearPlan()
  public var extraOutputs: [WalletCore.TW_Cardano_Proto_TxOutput] {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cardano_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var txID: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Cardano_Proto_OutPoint : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_OutPoint, rhs: WalletCore.TW_Cardano_Proto_OutPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_TokenAmount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_TokenAmount, rhs: WalletCore.TW_Cardano_Proto_TokenAmount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_TxInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_TxInput, rhs: WalletCore.TW_Cardano_Proto_TxInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_TxOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_TxOutput, rhs: WalletCore.TW_Cardano_Proto_TxOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_TokenBundle : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_TokenBundle, rhs: WalletCore.TW_Cardano_Proto_TokenBundle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_Transfer, rhs: WalletCore.TW_Cardano_Proto_Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_RegisterStakingKey : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_RegisterStakingKey, rhs: WalletCore.TW_Cardano_Proto_RegisterStakingKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_DeregisterStakingKey : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_DeregisterStakingKey, rhs: WalletCore.TW_Cardano_Proto_DeregisterStakingKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_Delegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_Delegate, rhs: WalletCore.TW_Cardano_Proto_Delegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_Withdraw : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_Withdraw, rhs: WalletCore.TW_Cardano_Proto_Withdraw) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_TransactionPlan : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_TransactionPlan, rhs: WalletCore.TW_Cardano_Proto_TransactionPlan) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_SigningInput, rhs: WalletCore.TW_Cardano_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cardano_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cardano_Proto_SigningOutput, rhs: WalletCore.TW_Cardano_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Cardano {
  public static func minAdaAmount(tokenBundle: Foundation.Data) -> Swift.UInt64
  public static func outputMinAdaAmount(toAddress: Swift.String, tokenBundle: Foundation.Data, coinsPerUtxoByte: Swift.String) -> Swift.String?
  public static func getStakingAddress(baseAddress: Swift.String) -> Swift.String
  public static func getByronAddress(publicKey: WalletCore.PublicKey) -> Swift.String
}
extension WalletCore.CoinType {
  public func address(string: Swift.String) -> WalletCore.AnyAddress?
}
extension WalletCore.CoinType {
  public var blockchain: WalletCore.Blockchain {
    get
  }
  public var purpose: WalletCore.Purpose {
    get
  }
  public var curve: WalletCore.Curve {
    get
  }
  public var xpubVersion: WalletCore.HDVersion {
    get
  }
  public var xprvVersion: WalletCore.HDVersion {
    get
  }
  public var hrp: WalletCore.HRP {
    get
  }
  public var p2pkhPrefix: Swift.UInt8 {
    get
  }
  public var p2shPrefix: Swift.UInt8 {
    get
  }
  public var staticPrefix: Swift.UInt8 {
    get
  }
  public var chainId: Swift.String {
    get
  }
  public var slip44Id: Swift.UInt32 {
    get
  }
  public var ss58Prefix: Swift.UInt32 {
    get
  }
  public var publicKeyType: WalletCore.PublicKeyType {
    get
  }
  public func validate(address: Swift.String) -> Swift.Bool
  public func derivationPath() -> Swift.String
  public func derivationPathWithDerivation(derivation: WalletCore.Derivation) -> Swift.String
  public func deriveAddress(privateKey: WalletCore.PrivateKey) -> Swift.String
  public func deriveAddressFromPublicKey(publicKey: WalletCore.PublicKey) -> Swift.String
  public func deriveAddressFromPublicKeyAndDerivation(publicKey: WalletCore.PublicKey, derivation: WalletCore.Derivation) -> Swift.String
}
public enum CoinType : Swift.UInt32, Swift.CaseIterable {
  case aeternity
  case aion
  case binance
  case bitcoin
  case bitcoinCash
  case bitcoinGold
  case callisto
  case cardano
  case cosmos
  case pivx
  case dash
  case decred
  case digiByte
  case dogecoin
  case eos
  case wax
  case ethereum
  case ethereumClassic
  case fio
  case goChain
  case groestlcoin
  case icon
  case ioTeX
  case kava
  case kin
  case litecoin
  case monacoin
  case nebulas
  case nuls
  case nano
  case near
  case nimiq
  case ontology
  case poanetwork
  case qtum
  case xrp
  case solana
  case stellar
  case tezos
  case theta
  case thunderCore
  case neo
  case viction
  case tron
  case veChain
  case viacoin
  case wanchain
  case zcash
  case firo
  case zilliqa
  case zelcash
  case ravencoin
  case waves
  case terra
  case terraV2
  case harmony
  case algorand
  case kusama
  case polkadot
  case filecoin
  case multiversX
  case bandChain
  case smartChainLegacy
  case smartChain
  case tbinance
  case oasis
  case polygon
  case thorchain
  case bluzelle
  case optimism
  case zksync
  case arbitrum
  case ecochain
  case avalancheCChain
  case xdai
  case fantom
  case cryptoOrg
  case celo
  case ronin
  case osmosis
  case ecash
  case iost
  case cronosChain
  case smartBitcoinCash
  case kuCoinCommunityChain
  case bitcoinDiamond
  case boba
  case syscoin
  case verge
  case zen
  case metis
  case aurora
  case evmos
  case nativeEvmos
  case moonriver
  case moonbeam
  case kavaEvm
  case klaytn
  case meter
  case okxchain
  case stratis
  case komodo
  case nervos
  case everscale
  case aptos
  case nebl
  case hedera
  case secret
  case nativeInjective
  case agoric
  case ton
  case sui
  case stargaze
  case polygonzkEVM
  case juno
  case stride
  case axelar
  case crescent
  case kujira
  case ioTeXEVM
  case nativeCanto
  case comdex
  case neutron
  case sommelier
  case fetchAI
  case mars
  case umee
  case coreum
  case quasar
  case persistence
  case akash
  case noble
  case scroll
  case rootstock
  case thetaFuel
  case confluxeSpace
  case acala
  case acalaEVM
  case opBNB
  case neon
  case base
  case sei
  case arbitrumNova
  case linea
  case greenfield
  case mantle
  case zenEON
  case internetComputer
  case tia
  case mantaPacific
  case nativeZetaChain
  case zetaEVM
  case dydx
  case merlin
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.CoinType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.CoinType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct CoinTypeConfiguration {
  public static func getSymbol(type: WalletCore.CoinType) -> Swift.String
  public static func getDecimals(type: WalletCore.CoinType) -> Swift.Int32
  public static func getTransactionURL(type: WalletCore.CoinType, transactionID: Swift.String) -> Swift.String
  public static func getAccountURL(type: WalletCore.CoinType, accountID: Swift.String) -> Swift.String
  public static func getID(type: WalletCore.CoinType) -> Swift.String
  public static func getName(type: WalletCore.CoinType) -> Swift.String
}
public typealias CommonSigningError = WalletCore.TW_Common_Proto_SigningError
public enum TW_Common_Proto_SigningError : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case ok
  case errorGeneral
  case errorInternal
  case errorLowBalance
  case errorZeroAmountRequested
  case errorMissingPrivateKey
  case errorInvalidPrivateKey
  case errorInvalidAddress
  case errorInvalidUtxo
  case errorInvalidUtxoAmount
  case errorWrongFee
  case errorSigning
  case errorTxTooBig
  case errorMissingInputUtxos
  case errorNotEnoughUtxos
  case errorScriptRedeem
  case errorScriptOutput
  case errorScriptWitnessProgram
  case errorInvalidMemo
  case errorInputParse
  case errorNoSupportN2N
  case errorSignaturesCount
  case errorInvalidParams
  case errorInvalidRequestedTokenAmount
  case errorNotSupported
  case errorDustAmountRequested
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Common_Proto_SigningError : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Common_Proto_SigningError]
  public typealias AllCases = [WalletCore.TW_Common_Proto_SigningError]
}
extension WalletCore.TW_Common_Proto_SigningError : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
public typealias CosmosAmount = WalletCore.TW_Cosmos_Proto_Amount
public typealias CosmosFee = WalletCore.TW_Cosmos_Proto_Fee
public typealias CosmosHeight = WalletCore.TW_Cosmos_Proto_Height
public typealias CosmosTHORChainAsset = WalletCore.TW_Cosmos_Proto_THORChainAsset
public typealias CosmosTHORChainCoin = WalletCore.TW_Cosmos_Proto_THORChainCoin
public typealias CosmosMessage = WalletCore.TW_Cosmos_Proto_Message
public typealias CosmosSignerInfo = WalletCore.TW_Cosmos_Proto_SignerInfo
public typealias CosmosSigningInput = WalletCore.TW_Cosmos_Proto_SigningInput
public typealias CosmosSigningOutput = WalletCore.TW_Cosmos_Proto_SigningOutput
public typealias CosmosBroadcastMode = WalletCore.TW_Cosmos_Proto_BroadcastMode
public typealias CosmosSigningMode = WalletCore.TW_Cosmos_Proto_SigningMode
public typealias CosmosTxHasher = WalletCore.TW_Cosmos_Proto_TxHasher
public typealias CosmosSignerPublicKeyType = WalletCore.TW_Cosmos_Proto_SignerPublicKeyType
public enum TW_Cosmos_Proto_BroadcastMode : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case block
  case sync
  case async
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_BroadcastMode : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Cosmos_Proto_BroadcastMode]
  public typealias AllCases = [WalletCore.TW_Cosmos_Proto_BroadcastMode]
}
public enum TW_Cosmos_Proto_SigningMode : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case json
  case protobuf
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_SigningMode : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Cosmos_Proto_SigningMode]
  public typealias AllCases = [WalletCore.TW_Cosmos_Proto_SigningMode]
}
public enum TW_Cosmos_Proto_TxHasher : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case useDefault
  case sha256
  case keccak256
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_TxHasher : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Cosmos_Proto_TxHasher]
  public typealias AllCases = [WalletCore.TW_Cosmos_Proto_TxHasher]
}
public enum TW_Cosmos_Proto_SignerPublicKeyType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case secp256K1
  case secp256K1Extended
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_SignerPublicKeyType : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Cosmos_Proto_SignerPublicKeyType]
  public typealias AllCases = [WalletCore.TW_Cosmos_Proto_SignerPublicKeyType]
}
public struct TW_Cosmos_Proto_Amount {
  public var denom: Swift.String
  public var amount: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cosmos_Proto_Fee {
  public var amounts: [WalletCore.TW_Cosmos_Proto_Amount]
  public var gas: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cosmos_Proto_Height {
  public var revisionNumber: Swift.UInt64
  public var revisionHeight: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cosmos_Proto_THORChainAsset {
  public var chain: Swift.String
  public var symbol: Swift.String
  public var ticker: Swift.String
  public var synth: Swift.Bool
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cosmos_Proto_THORChainCoin {
  public var asset: WalletCore.TW_Cosmos_Proto_THORChainAsset {
    get
    set
  }
  public var hasAsset: Swift.Bool {
    get
  }
  public mutating func clearAsset()
  public var amount: Swift.String
  public var decimals: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cosmos_Proto_Message {
  public var messageOneof: WalletCore.TW_Cosmos_Proto_Message.OneOf_MessageOneof?
  public var sendCoinsMessage: WalletCore.TW_Cosmos_Proto_Message.Send {
    get
    set
  }
  public var transferTokensMessage: WalletCore.TW_Cosmos_Proto_Message.Transfer {
    get
    set
  }
  public var stakeMessage: WalletCore.TW_Cosmos_Proto_Message.Delegate {
    get
    set
  }
  public var unstakeMessage: WalletCore.TW_Cosmos_Proto_Message.Undelegate {
    get
    set
  }
  public var restakeMessage: WalletCore.TW_Cosmos_Proto_Message.BeginRedelegate {
    get
    set
  }
  public var withdrawStakeRewardMessage: WalletCore.TW_Cosmos_Proto_Message.WithdrawDelegationReward {
    get
    set
  }
  public var rawJsonMessage: WalletCore.TW_Cosmos_Proto_Message.RawJSON {
    get
    set
  }
  public var wasmTerraExecuteContractTransferMessage: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer {
    get
    set
  }
  public var wasmTerraExecuteContractSendMessage: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend {
    get
    set
  }
  public var thorchainSendMessage: WalletCore.TW_Cosmos_Proto_Message.THORChainSend {
    get
    set
  }
  public var wasmTerraExecuteContractGeneric: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric {
    get
    set
  }
  public var wasmExecuteContractTransferMessage: WalletCore.TW_Cosmos_Proto_Message.WasmExecuteContractTransfer {
    get
    set
  }
  public var wasmExecuteContractSendMessage: WalletCore.TW_Cosmos_Proto_Message.WasmExecuteContractSend {
    get
    set
  }
  public var wasmExecuteContractGeneric: WalletCore.TW_Cosmos_Proto_Message.WasmExecuteContractGeneric {
    get
    set
  }
  public var signDirectMessage: WalletCore.TW_Cosmos_Proto_Message.SignDirect {
    get
    set
  }
  public var authGrant: WalletCore.TW_Cosmos_Proto_Message.AuthGrant {
    get
    set
  }
  public var authRevoke: WalletCore.TW_Cosmos_Proto_Message.AuthRevoke {
    get
    set
  }
  public var setWithdrawAddressMessage: WalletCore.TW_Cosmos_Proto_Message.SetWithdrawAddress {
    get
    set
  }
  public var msgVote: WalletCore.TW_Cosmos_Proto_Message.MsgVote {
    get
    set
  }
  public var msgStrideLiquidStakingStake: WalletCore.TW_Cosmos_Proto_Message.MsgStrideLiquidStakingStake {
    get
    set
  }
  public var msgStrideLiquidStakingRedeem: WalletCore.TW_Cosmos_Proto_Message.MsgStrideLiquidStakingRedeem {
    get
    set
  }
  public var thorchainDepositMessage: WalletCore.TW_Cosmos_Proto_Message.THORChainDeposit {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case sendCoinsMessage(WalletCore.TW_Cosmos_Proto_Message.Send)
    case transferTokensMessage(WalletCore.TW_Cosmos_Proto_Message.Transfer)
    case stakeMessage(WalletCore.TW_Cosmos_Proto_Message.Delegate)
    case unstakeMessage(WalletCore.TW_Cosmos_Proto_Message.Undelegate)
    case restakeMessage(WalletCore.TW_Cosmos_Proto_Message.BeginRedelegate)
    case withdrawStakeRewardMessage(WalletCore.TW_Cosmos_Proto_Message.WithdrawDelegationReward)
    case rawJsonMessage(WalletCore.TW_Cosmos_Proto_Message.RawJSON)
    case wasmTerraExecuteContractTransferMessage(WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer)
    case wasmTerraExecuteContractSendMessage(WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend)
    case thorchainSendMessage(WalletCore.TW_Cosmos_Proto_Message.THORChainSend)
    case wasmTerraExecuteContractGeneric(WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric)
    case wasmExecuteContractTransferMessage(WalletCore.TW_Cosmos_Proto_Message.WasmExecuteContractTransfer)
    case wasmExecuteContractSendMessage(WalletCore.TW_Cosmos_Proto_Message.WasmExecuteContractSend)
    case wasmExecuteContractGeneric(WalletCore.TW_Cosmos_Proto_Message.WasmExecuteContractGeneric)
    case signDirectMessage(WalletCore.TW_Cosmos_Proto_Message.SignDirect)
    case authGrant(WalletCore.TW_Cosmos_Proto_Message.AuthGrant)
    case authRevoke(WalletCore.TW_Cosmos_Proto_Message.AuthRevoke)
    case setWithdrawAddressMessage(WalletCore.TW_Cosmos_Proto_Message.SetWithdrawAddress)
    case msgVote(WalletCore.TW_Cosmos_Proto_Message.MsgVote)
    case msgStrideLiquidStakingStake(WalletCore.TW_Cosmos_Proto_Message.MsgStrideLiquidStakingStake)
    case msgStrideLiquidStakingRedeem(WalletCore.TW_Cosmos_Proto_Message.MsgStrideLiquidStakingRedeem)
    case thorchainDepositMessage(WalletCore.TW_Cosmos_Proto_Message.THORChainDeposit)
    public static func == (a: WalletCore.TW_Cosmos_Proto_Message.OneOf_MessageOneof, b: WalletCore.TW_Cosmos_Proto_Message.OneOf_MessageOneof) -> Swift.Bool
  }
  public enum AuthorizationType : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case unspecified
    case delegate
    case undelegate
    case redelegate
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum VoteOption : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case unspecified
    case yes
    case abstain
    case no
    case noWithVeto
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public struct Send {
    public var fromAddress: Swift.String
    public var toAddress: Swift.String
    public var amounts: [WalletCore.TW_Cosmos_Proto_Amount]
    public var typePrefix: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Transfer {
    public var sourcePort: Swift.String
    public var sourceChannel: Swift.String
    public var token: WalletCore.TW_Cosmos_Proto_Amount {
      get
      set
    }
    public var hasToken: Swift.Bool {
      get
    }
    public mutating func clearToken()
    public var sender: Swift.String
    public var receiver: Swift.String
    public var timeoutHeight: WalletCore.TW_Cosmos_Proto_Height {
      get
      set
    }
    public var hasTimeoutHeight: Swift.Bool {
      get
    }
    public mutating func clearTimeoutHeight()
    public var timeoutTimestamp: Swift.UInt64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Delegate {
    public var delegatorAddress: Swift.String
    public var validatorAddress: Swift.String
    public var amount: WalletCore.TW_Cosmos_Proto_Amount {
      get
      set
    }
    public var hasAmount: Swift.Bool {
      get
    }
    public mutating func clearAmount()
    public var typePrefix: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Undelegate {
    public var delegatorAddress: Swift.String
    public var validatorAddress: Swift.String
    public var amount: WalletCore.TW_Cosmos_Proto_Amount {
      get
      set
    }
    public var hasAmount: Swift.Bool {
      get
    }
    public mutating func clearAmount()
    public var typePrefix: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct BeginRedelegate {
    public var delegatorAddress: Swift.String
    public var validatorSrcAddress: Swift.String
    public var validatorDstAddress: Swift.String
    public var amount: WalletCore.TW_Cosmos_Proto_Amount {
      get
      set
    }
    public var hasAmount: Swift.Bool {
      get
    }
    public mutating func clearAmount()
    public var typePrefix: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct SetWithdrawAddress {
    public var delegatorAddress: Swift.String
    public var withdrawAddress: Swift.String
    public var typePrefix: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct WithdrawDelegationReward {
    public var delegatorAddress: Swift.String
    public var validatorAddress: Swift.String
    public var typePrefix: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct WasmTerraExecuteContractTransfer {
    public var senderAddress: Swift.String
    public var contractAddress: Swift.String
    public var amount: Foundation.Data
    public var recipientAddress: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct WasmTerraExecuteContractSend {
    public var senderAddress: Swift.String
    public var contractAddress: Swift.String
    public var amount: Foundation.Data
    public var recipientContractAddress: Swift.String
    public var msg: Swift.String
    public var coin: [Swift.String]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct THORChainSend {
    public var fromAddress: Foundation.Data
    public var toAddress: Foundation.Data
    public var amounts: [WalletCore.TW_Cosmos_Proto_Amount]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct THORChainDeposit {
    public var coins: [WalletCore.TW_Cosmos_Proto_THORChainCoin]
    public var memo: Swift.String
    public var signer: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct WasmTerraExecuteContractGeneric {
    public var senderAddress: Swift.String
    public var contractAddress: Swift.String
    public var executeMsg: Swift.String
    public var coins: [WalletCore.TW_Cosmos_Proto_Amount]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct WasmExecuteContractTransfer {
    public var senderAddress: Swift.String
    public var contractAddress: Swift.String
    public var amount: Foundation.Data
    public var recipientAddress: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct WasmExecuteContractSend {
    public var senderAddress: Swift.String
    public var contractAddress: Swift.String
    public var amount: Foundation.Data
    public var recipientContractAddress: Swift.String
    public var msg: Swift.String
    public var coin: [Swift.String]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct WasmExecuteContractGeneric {
    public var senderAddress: Swift.String
    public var contractAddress: Swift.String
    public var executeMsg: Swift.String
    public var coins: [WalletCore.TW_Cosmos_Proto_Amount]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct RawJSON {
    public var type: Swift.String
    public var value: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct SignDirect {
    public var bodyBytes: Foundation.Data
    public var authInfoBytes: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct StakeAuthorization {
    public var maxTokens: WalletCore.TW_Cosmos_Proto_Amount {
      get
      set
    }
    public var hasMaxTokens: Swift.Bool {
      get
    }
    public mutating func clearMaxTokens()
    public var validators: WalletCore.TW_Cosmos_Proto_Message.StakeAuthorization.OneOf_Validators?
    public var allowList: WalletCore.TW_Cosmos_Proto_Message.StakeAuthorization.Validators {
      get
      set
    }
    public var denyList: WalletCore.TW_Cosmos_Proto_Message.StakeAuthorization.Validators {
      get
      set
    }
    public var authorizationType: WalletCore.TW_Cosmos_Proto_Message.AuthorizationType
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public enum OneOf_Validators : Swift.Equatable {
      case allowList(WalletCore.TW_Cosmos_Proto_Message.StakeAuthorization.Validators)
      case denyList(WalletCore.TW_Cosmos_Proto_Message.StakeAuthorization.Validators)
      public static func == (a: WalletCore.TW_Cosmos_Proto_Message.StakeAuthorization.OneOf_Validators, b: WalletCore.TW_Cosmos_Proto_Message.StakeAuthorization.OneOf_Validators) -> Swift.Bool
    }
    public struct Validators {
      public var address: [Swift.String]
      public var unknownFields: SwiftProtobuf.UnknownStorage
      public init()
    }
    public init()
  }
  public struct AuthGrant {
    public var granter: Swift.String
    public var grantee: Swift.String
    public var grantType: WalletCore.TW_Cosmos_Proto_Message.AuthGrant.OneOf_GrantType?
    public var grantStake: WalletCore.TW_Cosmos_Proto_Message.StakeAuthorization {
      get
      set
    }
    public var expiration: Swift.Int64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public enum OneOf_GrantType : Swift.Equatable {
      case grantStake(WalletCore.TW_Cosmos_Proto_Message.StakeAuthorization)
      public static func == (a: WalletCore.TW_Cosmos_Proto_Message.AuthGrant.OneOf_GrantType, b: WalletCore.TW_Cosmos_Proto_Message.AuthGrant.OneOf_GrantType) -> Swift.Bool
    }
    public init()
  }
  public struct AuthRevoke {
    public var granter: Swift.String
    public var grantee: Swift.String
    public var msgTypeURL: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct MsgVote {
    public var proposalID: Swift.UInt64
    public var voter: Swift.String
    public var option: WalletCore.TW_Cosmos_Proto_Message.VoteOption
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct MsgStrideLiquidStakingStake {
    public var creator: Swift.String
    public var amount: Swift.String
    public var hostDenom: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct MsgStrideLiquidStakingRedeem {
    public var creator: Swift.String
    public var amount: Swift.String
    public var hostZone: Swift.String
    public var receiver: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
extension WalletCore.TW_Cosmos_Proto_Message.AuthorizationType : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Cosmos_Proto_Message.AuthorizationType]
  public typealias AllCases = [WalletCore.TW_Cosmos_Proto_Message.AuthorizationType]
}
extension WalletCore.TW_Cosmos_Proto_Message.VoteOption : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Cosmos_Proto_Message.VoteOption]
  public typealias AllCases = [WalletCore.TW_Cosmos_Proto_Message.VoteOption]
}
public struct TW_Cosmos_Proto_SignerInfo {
  public var publicKeyType: WalletCore.TW_Cosmos_Proto_SignerPublicKeyType
  public var jsonType: Swift.String
  public var protobufType: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cosmos_Proto_SigningInput {
  public var signingMode: WalletCore.TW_Cosmos_Proto_SigningMode
  public var accountNumber: Swift.UInt64
  public var chainID: Swift.String
  public var fee: WalletCore.TW_Cosmos_Proto_Fee {
    get
    set
  }
  public var hasFee: Swift.Bool {
    get
  }
  public mutating func clearFee()
  public var memo: Swift.String
  public var sequence: Swift.UInt64
  public var privateKey: Foundation.Data
  public var messages: [WalletCore.TW_Cosmos_Proto_Message]
  public var mode: WalletCore.TW_Cosmos_Proto_BroadcastMode
  public var publicKey: Foundation.Data
  public var txHasher: WalletCore.TW_Cosmos_Proto_TxHasher
  public var signerInfo: WalletCore.TW_Cosmos_Proto_SignerInfo {
    get
    set
  }
  public var hasSignerInfo: Swift.Bool {
    get
  }
  public mutating func clearSignerInfo()
  public var timeoutHeight: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Cosmos_Proto_SigningOutput {
  public var signature: Foundation.Data
  public var json: Swift.String
  public var serialized: Swift.String
  public var signatureJson: Swift.String
  public var errorMessage: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Cosmos_Proto_BroadcastMode : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Cosmos_Proto_SigningMode : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Cosmos_Proto_TxHasher : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Cosmos_Proto_SignerPublicKeyType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Cosmos_Proto_Amount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Amount, rhs: WalletCore.TW_Cosmos_Proto_Amount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Fee : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Fee, rhs: WalletCore.TW_Cosmos_Proto_Fee) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Height : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Height, rhs: WalletCore.TW_Cosmos_Proto_Height) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_THORChainAsset : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_THORChainAsset, rhs: WalletCore.TW_Cosmos_Proto_THORChainAsset) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_THORChainCoin : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_THORChainCoin, rhs: WalletCore.TW_Cosmos_Proto_THORChainCoin) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message, rhs: WalletCore.TW_Cosmos_Proto_Message) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.AuthorizationType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Cosmos_Proto_Message.VoteOption : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Cosmos_Proto_Message.Send : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.Send, rhs: WalletCore.TW_Cosmos_Proto_Message.Send) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.Transfer, rhs: WalletCore.TW_Cosmos_Proto_Message.Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.Delegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.Delegate, rhs: WalletCore.TW_Cosmos_Proto_Message.Delegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.Undelegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.Undelegate, rhs: WalletCore.TW_Cosmos_Proto_Message.Undelegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.BeginRedelegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.BeginRedelegate, rhs: WalletCore.TW_Cosmos_Proto_Message.BeginRedelegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.SetWithdrawAddress : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.SetWithdrawAddress, rhs: WalletCore.TW_Cosmos_Proto_Message.SetWithdrawAddress) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.WithdrawDelegationReward : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.WithdrawDelegationReward, rhs: WalletCore.TW_Cosmos_Proto_Message.WithdrawDelegationReward) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer, rhs: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend, rhs: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.THORChainSend : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.THORChainSend, rhs: WalletCore.TW_Cosmos_Proto_Message.THORChainSend) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.THORChainDeposit : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.THORChainDeposit, rhs: WalletCore.TW_Cosmos_Proto_Message.THORChainDeposit) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric, rhs: WalletCore.TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.WasmExecuteContractTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.WasmExecuteContractTransfer, rhs: WalletCore.TW_Cosmos_Proto_Message.WasmExecuteContractTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.WasmExecuteContractSend : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.WasmExecuteContractSend, rhs: WalletCore.TW_Cosmos_Proto_Message.WasmExecuteContractSend) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.WasmExecuteContractGeneric : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.WasmExecuteContractGeneric, rhs: WalletCore.TW_Cosmos_Proto_Message.WasmExecuteContractGeneric) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.RawJSON : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.RawJSON, rhs: WalletCore.TW_Cosmos_Proto_Message.RawJSON) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.SignDirect : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.SignDirect, rhs: WalletCore.TW_Cosmos_Proto_Message.SignDirect) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.StakeAuthorization : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.StakeAuthorization, rhs: WalletCore.TW_Cosmos_Proto_Message.StakeAuthorization) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.StakeAuthorization.Validators : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.StakeAuthorization.Validators, rhs: WalletCore.TW_Cosmos_Proto_Message.StakeAuthorization.Validators) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.AuthGrant : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.AuthGrant, rhs: WalletCore.TW_Cosmos_Proto_Message.AuthGrant) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.AuthRevoke : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.AuthRevoke, rhs: WalletCore.TW_Cosmos_Proto_Message.AuthRevoke) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.MsgVote : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.MsgVote, rhs: WalletCore.TW_Cosmos_Proto_Message.MsgVote) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.MsgStrideLiquidStakingStake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.MsgStrideLiquidStakingStake, rhs: WalletCore.TW_Cosmos_Proto_Message.MsgStrideLiquidStakingStake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_Message.MsgStrideLiquidStakingRedeem : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_Message.MsgStrideLiquidStakingRedeem, rhs: WalletCore.TW_Cosmos_Proto_Message.MsgStrideLiquidStakingRedeem) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_SignerInfo : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_SignerInfo, rhs: WalletCore.TW_Cosmos_Proto_SignerInfo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_SigningInput, rhs: WalletCore.TW_Cosmos_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Cosmos_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Cosmos_Proto_SigningOutput, rhs: WalletCore.TW_Cosmos_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum Curve : Swift.UInt32, Swift.CaseIterable, Swift.CustomStringConvertible {
  case secp256k1
  case ed25519
  case ed25519Blake2bNano
  case curve25519
  case nist256p1
  case ed25519ExtendedCardano
  case starkex
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.Curve]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.Curve] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
extension Foundation.Data {
  public init?(hexString: Swift.String)
  public static func reverse(hexString: Swift.String) -> Foundation.Data
  public var hexString: Swift.String {
    get
  }
}
extension Swift.KeyedDecodingContainerProtocol {
  public func decodeHexString(forKey key: Self.Key) throws -> Foundation.Data
  public func decodeHexStringIfPresent(forKey key: Self.Key) throws -> Foundation.Data?
}
@_hasMissingDesignatedInitializers final public class DataVector {
  final public var size: Swift.Int {
    get
  }
  public init()
  public init(data: Foundation.Data)
  @objc deinit
  final public func add(data: Foundation.Data)
  final public func get(index: Swift.Int) -> Foundation.Data?
}
public typealias DecredTransaction = WalletCore.TW_Decred_Proto_Transaction
public typealias DecredTransactionInput = WalletCore.TW_Decred_Proto_TransactionInput
public typealias DecredTransactionOutput = WalletCore.TW_Decred_Proto_TransactionOutput
public typealias DecredSigningOutput = WalletCore.TW_Decred_Proto_SigningOutput
public struct TW_Decred_Proto_Transaction {
  public var serializeType: Swift.UInt32
  public var version: Swift.UInt32
  public var inputs: [WalletCore.TW_Decred_Proto_TransactionInput]
  public var outputs: [WalletCore.TW_Decred_Proto_TransactionOutput]
  public var lockTime: Swift.UInt32
  public var expiry: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Decred_Proto_TransactionInput {
  public var previousOutput: WalletCore.TW_Bitcoin_Proto_OutPoint {
    get
    set
  }
  public var hasPreviousOutput: Swift.Bool {
    get
  }
  public mutating func clearPreviousOutput()
  public var sequence: Swift.UInt32
  public var valueIn: Swift.Int64
  public var blockHeight: Swift.UInt32
  public var blockIndex: Swift.UInt32
  public var script: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Decred_Proto_TransactionOutput {
  public var value: Swift.Int64
  public var version: Swift.UInt32
  public var script: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Decred_Proto_SigningOutput {
  public var transaction: WalletCore.TW_Decred_Proto_Transaction {
    get
    set
  }
  public var hasTransaction: Swift.Bool {
    get
  }
  public mutating func clearTransaction()
  public var encoded: Foundation.Data
  public var transactionID: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Decred_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Decred_Proto_Transaction, rhs: WalletCore.TW_Decred_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Decred_Proto_TransactionInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Decred_Proto_TransactionInput, rhs: WalletCore.TW_Decred_Proto_TransactionInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Decred_Proto_TransactionOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Decred_Proto_TransactionOutput, rhs: WalletCore.TW_Decred_Proto_TransactionOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Decred_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Decred_Proto_SigningOutput, rhs: WalletCore.TW_Decred_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum Derivation : Swift.UInt32, Swift.CaseIterable {
  case `default`
  case custom
  case bitcoinSegwit
  case bitcoinLegacy
  case bitcoinTestnet
  case litecoinLegacy
  case solanaSolana
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.Derivation]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.Derivation] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
extension WalletCore.DerivationPath : Swift.Equatable, Swift.Hashable, Swift.CustomStringConvertible {
  public typealias Index = WalletCore.DerivationPathIndex
  public static func == (lhs: WalletCore.DerivationPath, rhs: WalletCore.DerivationPath) -> Swift.Bool
  final public var coinType: Swift.UInt32 {
    get
  }
  final public var indices: [WalletCore.DerivationPath.Index] {
    get
  }
  convenience public init(purpose: WalletCore.Purpose, coin: Swift.UInt32)
  convenience public init?(_ string: Swift.String)
  final public subscript(index: Swift.Int) -> WalletCore.DerivationPathIndex? {
    get
  }
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.DerivationPath : Swift.Codable {
  final public func encode(to encoder: any Swift.Encoder) throws
  convenience public init(from decoder: any Swift.Decoder) throws
}
extension WalletCore.DerivationPathIndex : Swift.Equatable, Swift.Hashable, Swift.CustomStringConvertible {
  public static func == (lhs: WalletCore.DerivationPathIndex, rhs: WalletCore.DerivationPathIndex) -> Swift.Bool
  convenience public init(_ value: Swift.UInt32, hardened: Swift.Bool)
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.DerivationPathIndex : Swift.Codable {
  final public func encode(to encoder: any Swift.Encoder) throws
  convenience public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class DerivationPath {
  final public var purpose: WalletCore.Purpose {
    get
  }
  final public var coin: Swift.UInt32 {
    get
  }
  final public var account: Swift.UInt32 {
    get
  }
  final public var change: Swift.UInt32 {
    get
  }
  final public var address: Swift.UInt32 {
    get
  }
  final public var description: Swift.String {
    get
  }
  public init(purpose: WalletCore.Purpose, coin: Swift.UInt32, account: Swift.UInt32, change: Swift.UInt32, address: Swift.UInt32)
  public init?(string: Swift.String)
  @objc deinit
  final public func indexAt(index: Swift.UInt32) -> WalletCore.DerivationPathIndex?
  final public func indicesCount() -> Swift.UInt32
}
@_hasMissingDesignatedInitializers final public class DerivationPathIndex {
  final public var value: Swift.UInt32 {
    get
  }
  final public var hardened: Swift.Bool {
    get
  }
  final public var description: Swift.String {
    get
  }
  public init(value: Swift.UInt32, hardened: Swift.Bool)
  @objc deinit
}
public typealias EOSAsset = WalletCore.TW_EOS_Proto_Asset
public typealias EOSSigningInput = WalletCore.TW_EOS_Proto_SigningInput
public typealias EOSSigningOutput = WalletCore.TW_EOS_Proto_SigningOutput
public typealias EOSKeyType = WalletCore.TW_EOS_Proto_KeyType
public enum TW_EOS_Proto_KeyType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case legacy
  case modernk1
  case modernr1
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EOS_Proto_KeyType : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_EOS_Proto_KeyType]
  public typealias AllCases = [WalletCore.TW_EOS_Proto_KeyType]
}
public struct TW_EOS_Proto_Asset {
  public var amount: Swift.Int64
  public var decimals: Swift.UInt32
  public var symbol: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EOS_Proto_SigningInput {
  public var chainID: Foundation.Data
  public var referenceBlockID: Foundation.Data
  public var referenceBlockTime: Swift.Int32
  public var currency: Swift.String
  public var sender: Swift.String
  public var recipient: Swift.String
  public var memo: Swift.String
  public var asset: WalletCore.TW_EOS_Proto_Asset {
    get
    set
  }
  public var hasAsset: Swift.Bool {
    get
  }
  public mutating func clearAsset()
  public var privateKey: Foundation.Data
  public var privateKeyType: WalletCore.TW_EOS_Proto_KeyType
  public var expiration: Swift.Int32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EOS_Proto_SigningOutput {
  public var jsonEncoded: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_EOS_Proto_KeyType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_EOS_Proto_Asset : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EOS_Proto_Asset, rhs: WalletCore.TW_EOS_Proto_Asset) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EOS_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EOS_Proto_SigningInput, rhs: WalletCore.TW_EOS_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EOS_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EOS_Proto_SigningOutput, rhs: WalletCore.TW_EOS_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias EthereumTransaction = WalletCore.TW_Ethereum_Proto_Transaction
public typealias EthereumUserOperation = WalletCore.TW_Ethereum_Proto_UserOperation
public typealias EthereumSigningInput = WalletCore.TW_Ethereum_Proto_SigningInput
public typealias EthereumSigningOutput = WalletCore.TW_Ethereum_Proto_SigningOutput
public typealias EthereumMaybeChainId = WalletCore.TW_Ethereum_Proto_MaybeChainId
public typealias EthereumMessageSigningInput = WalletCore.TW_Ethereum_Proto_MessageSigningInput
public typealias EthereumMessageSigningOutput = WalletCore.TW_Ethereum_Proto_MessageSigningOutput
public typealias EthereumMessageVerifyingInput = WalletCore.TW_Ethereum_Proto_MessageVerifyingInput
public typealias EthereumTransactionMode = WalletCore.TW_Ethereum_Proto_TransactionMode
public typealias EthereumMessageType = WalletCore.TW_Ethereum_Proto_MessageType
public enum TW_Ethereum_Proto_TransactionMode : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case legacy
  case enveloped
  case userOp
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_TransactionMode : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Ethereum_Proto_TransactionMode]
  public typealias AllCases = [WalletCore.TW_Ethereum_Proto_TransactionMode]
}
public enum TW_Ethereum_Proto_MessageType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case legacy
  case eip155
  case typed
  case typedEip155
  case immutableX
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_MessageType : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Ethereum_Proto_MessageType]
  public typealias AllCases = [WalletCore.TW_Ethereum_Proto_MessageType]
}
public struct TW_Ethereum_Proto_Transaction {
  public var transactionOneof: WalletCore.TW_Ethereum_Proto_Transaction.OneOf_TransactionOneof?
  public var transfer: WalletCore.TW_Ethereum_Proto_Transaction.Transfer {
    get
    set
  }
  public var erc20Transfer: WalletCore.TW_Ethereum_Proto_Transaction.ERC20Transfer {
    get
    set
  }
  public var erc20Approve: WalletCore.TW_Ethereum_Proto_Transaction.ERC20Approve {
    get
    set
  }
  public var erc721Transfer: WalletCore.TW_Ethereum_Proto_Transaction.ERC721Transfer {
    get
    set
  }
  public var erc1155Transfer: WalletCore.TW_Ethereum_Proto_Transaction.ERC1155Transfer {
    get
    set
  }
  public var contractGeneric: WalletCore.TW_Ethereum_Proto_Transaction.ContractGeneric {
    get
    set
  }
  public var batch: WalletCore.TW_Ethereum_Proto_Transaction.Batch {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_TransactionOneof : Swift.Equatable {
    case transfer(WalletCore.TW_Ethereum_Proto_Transaction.Transfer)
    case erc20Transfer(WalletCore.TW_Ethereum_Proto_Transaction.ERC20Transfer)
    case erc20Approve(WalletCore.TW_Ethereum_Proto_Transaction.ERC20Approve)
    case erc721Transfer(WalletCore.TW_Ethereum_Proto_Transaction.ERC721Transfer)
    case erc1155Transfer(WalletCore.TW_Ethereum_Proto_Transaction.ERC1155Transfer)
    case contractGeneric(WalletCore.TW_Ethereum_Proto_Transaction.ContractGeneric)
    case batch(WalletCore.TW_Ethereum_Proto_Transaction.Batch)
    public static func == (a: WalletCore.TW_Ethereum_Proto_Transaction.OneOf_TransactionOneof, b: WalletCore.TW_Ethereum_Proto_Transaction.OneOf_TransactionOneof) -> Swift.Bool
  }
  public struct Transfer {
    public var amount: Foundation.Data
    public var data: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct ERC20Transfer {
    public var to: Swift.String
    public var amount: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct ERC20Approve {
    public var spender: Swift.String
    public var amount: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct ERC721Transfer {
    public var from: Swift.String
    public var to: Swift.String
    public var tokenID: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct ERC1155Transfer {
    public var from: Swift.String
    public var to: Swift.String
    public var tokenID: Foundation.Data
    public var value: Foundation.Data
    public var data: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct ContractGeneric {
    public var amount: Foundation.Data
    public var data: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Batch {
    public var calls: [WalletCore.TW_Ethereum_Proto_Transaction.Batch.BatchedCall]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public struct BatchedCall {
      public var address: Swift.String
      public var amount: Foundation.Data
      public var payload: Foundation.Data
      public var unknownFields: SwiftProtobuf.UnknownStorage
      public init()
    }
    public init()
  }
  public init()
}
public struct TW_Ethereum_Proto_UserOperation {
  public var entryPoint: Swift.String
  public var initCode: Foundation.Data
  public var sender: Swift.String
  public var preVerificationGas: Foundation.Data
  public var verificationGasLimit: Foundation.Data
  public var paymasterAndData: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ethereum_Proto_SigningInput {
  public var chainID: Foundation.Data {
    get
    set
  }
  public var nonce: Foundation.Data {
    get
    set
  }
  public var txMode: WalletCore.TW_Ethereum_Proto_TransactionMode {
    get
    set
  }
  public var gasPrice: Foundation.Data {
    get
    set
  }
  public var gasLimit: Foundation.Data {
    get
    set
  }
  public var maxInclusionFeePerGas: Foundation.Data {
    get
    set
  }
  public var maxFeePerGas: Foundation.Data {
    get
    set
  }
  public var toAddress: Swift.String {
    get
    set
  }
  public var privateKey: Foundation.Data {
    get
    set
  }
  public var transaction: WalletCore.TW_Ethereum_Proto_Transaction {
    get
    set
  }
  public var hasTransaction: Swift.Bool {
    get
  }
  public mutating func clearTransaction()
  public var userOperation: WalletCore.TW_Ethereum_Proto_UserOperation {
    get
    set
  }
  public var hasUserOperation: Swift.Bool {
    get
  }
  public mutating func clearUserOperation()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ethereum_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var v: Foundation.Data
  public var r: Foundation.Data
  public var s: Foundation.Data
  public var data: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var preHash: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ethereum_Proto_MaybeChainId {
  public var chainID: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ethereum_Proto_MessageSigningInput {
  public var privateKey: Foundation.Data
  public var message: Swift.String
  public var chainID: WalletCore.TW_Ethereum_Proto_MaybeChainId {
    get
    set
  }
  public var hasChainID: Swift.Bool {
    get
  }
  public mutating func clearChainID()
  public var messageType: WalletCore.TW_Ethereum_Proto_MessageType
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ethereum_Proto_MessageSigningOutput {
  public var signature: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ethereum_Proto_MessageVerifyingInput {
  public var message: Swift.String
  public var publicKey: Foundation.Data
  public var signature: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Ethereum_Proto_TransactionMode : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Ethereum_Proto_MessageType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Ethereum_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_Transaction, rhs: WalletCore.TW_Ethereum_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_Transaction.Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_Transaction.Transfer, rhs: WalletCore.TW_Ethereum_Proto_Transaction.Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_Transaction.ERC20Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_Transaction.ERC20Transfer, rhs: WalletCore.TW_Ethereum_Proto_Transaction.ERC20Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_Transaction.ERC20Approve : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_Transaction.ERC20Approve, rhs: WalletCore.TW_Ethereum_Proto_Transaction.ERC20Approve) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_Transaction.ERC721Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_Transaction.ERC721Transfer, rhs: WalletCore.TW_Ethereum_Proto_Transaction.ERC721Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_Transaction.ERC1155Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_Transaction.ERC1155Transfer, rhs: WalletCore.TW_Ethereum_Proto_Transaction.ERC1155Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_Transaction.ContractGeneric : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_Transaction.ContractGeneric, rhs: WalletCore.TW_Ethereum_Proto_Transaction.ContractGeneric) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_Transaction.Batch : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_Transaction.Batch, rhs: WalletCore.TW_Ethereum_Proto_Transaction.Batch) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_Transaction.Batch.BatchedCall : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_Transaction.Batch.BatchedCall, rhs: WalletCore.TW_Ethereum_Proto_Transaction.Batch.BatchedCall) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_UserOperation : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_UserOperation, rhs: WalletCore.TW_Ethereum_Proto_UserOperation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_SigningInput, rhs: WalletCore.TW_Ethereum_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_SigningOutput, rhs: WalletCore.TW_Ethereum_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_MaybeChainId : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_MaybeChainId, rhs: WalletCore.TW_Ethereum_Proto_MaybeChainId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_MessageSigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_MessageSigningInput, rhs: WalletCore.TW_Ethereum_Proto_MessageSigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_MessageSigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_MessageSigningOutput, rhs: WalletCore.TW_Ethereum_Proto_MessageSigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ethereum_Proto_MessageVerifyingInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ethereum_Proto_MessageVerifyingInput, rhs: WalletCore.TW_Ethereum_Proto_MessageVerifyingInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Ethereum {
  public static func eip2645GetPath(ethAddress: Swift.String, layer: Swift.String, application: Swift.String, index: Swift.String) -> Swift.String
}
public typealias EthereumAbiBoolType = WalletCore.TW_EthereumAbi_Proto_BoolType
public typealias EthereumAbiNumberNType = WalletCore.TW_EthereumAbi_Proto_NumberNType
public typealias EthereumAbiStringType = WalletCore.TW_EthereumAbi_Proto_StringType
public typealias EthereumAbiAddressType = WalletCore.TW_EthereumAbi_Proto_AddressType
public typealias EthereumAbiArrayType = WalletCore.TW_EthereumAbi_Proto_ArrayType
public typealias EthereumAbiFixedArrayType = WalletCore.TW_EthereumAbi_Proto_FixedArrayType
public typealias EthereumAbiByteArrayType = WalletCore.TW_EthereumAbi_Proto_ByteArrayType
public typealias EthereumAbiByteArrayFixType = WalletCore.TW_EthereumAbi_Proto_ByteArrayFixType
public typealias EthereumAbiTupleType = WalletCore.TW_EthereumAbi_Proto_TupleType
public typealias EthereumAbiParam = WalletCore.TW_EthereumAbi_Proto_Param
public typealias EthereumAbiParamType = WalletCore.TW_EthereumAbi_Proto_ParamType
public typealias EthereumAbiNumberNParam = WalletCore.TW_EthereumAbi_Proto_NumberNParam
public typealias EthereumAbiArrayParam = WalletCore.TW_EthereumAbi_Proto_ArrayParam
public typealias EthereumAbiTupleParam = WalletCore.TW_EthereumAbi_Proto_TupleParam
public typealias EthereumAbiToken = WalletCore.TW_EthereumAbi_Proto_Token
public typealias EthereumAbiContractCallDecodingInput = WalletCore.TW_EthereumAbi_Proto_ContractCallDecodingInput
public typealias EthereumAbiContractCallDecodingOutput = WalletCore.TW_EthereumAbi_Proto_ContractCallDecodingOutput
public typealias EthereumAbiAbiParams = WalletCore.TW_EthereumAbi_Proto_AbiParams
public typealias EthereumAbiParamsDecodingInput = WalletCore.TW_EthereumAbi_Proto_ParamsDecodingInput
public typealias EthereumAbiParamsDecodingOutput = WalletCore.TW_EthereumAbi_Proto_ParamsDecodingOutput
public typealias EthereumAbiValueDecodingInput = WalletCore.TW_EthereumAbi_Proto_ValueDecodingInput
public typealias EthereumAbiValueDecodingOutput = WalletCore.TW_EthereumAbi_Proto_ValueDecodingOutput
public typealias EthereumAbiFunctionEncodingInput = WalletCore.TW_EthereumAbi_Proto_FunctionEncodingInput
public typealias EthereumAbiFunctionEncodingOutput = WalletCore.TW_EthereumAbi_Proto_FunctionEncodingOutput
public typealias EthereumAbiFunctionGetTypeInput = WalletCore.TW_EthereumAbi_Proto_FunctionGetTypeInput
public typealias EthereumAbiAbiError = WalletCore.TW_EthereumAbi_Proto_AbiError
public enum TW_EthereumAbi_Proto_AbiError : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case ok
  case errorInternal
  case errorAbiMismatch
  case errorInvalidAbi
  case errorInvalidParamType
  case errorInvalidAddressValue
  case errorInvalidUintValue
  case errorMissingParamType
  case errorMissingParamValue
  case errorDecodingData
  case errorEmptyType
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_AbiError : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_EthereumAbi_Proto_AbiError]
  public typealias AllCases = [WalletCore.TW_EthereumAbi_Proto_AbiError]
}
public struct TW_EthereumAbi_Proto_BoolType {
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_NumberNType {
  public var bits: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_StringType {
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_AddressType {
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_ArrayType {
  public var elementType: WalletCore.TW_EthereumAbi_Proto_ParamType {
    get
    set
  }
  public var hasElementType: Swift.Bool {
    get
  }
  public mutating func clearElementType()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_FixedArrayType {
  public var size: Swift.UInt64 {
    get
    set
  }
  public var elementType: WalletCore.TW_EthereumAbi_Proto_ParamType {
    get
    set
  }
  public var hasElementType: Swift.Bool {
    get
  }
  public mutating func clearElementType()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_ByteArrayType {
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_ByteArrayFixType {
  public var size: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_TupleType {
  public var params: [WalletCore.TW_EthereumAbi_Proto_Param]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_Param {
  public var name: Swift.String
  public var param: WalletCore.TW_EthereumAbi_Proto_ParamType {
    get
    set
  }
  public var hasParam: Swift.Bool {
    get
  }
  public mutating func clearParam()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_ParamType {
  public var param: WalletCore.TW_EthereumAbi_Proto_ParamType.OneOf_Param? {
    get
    set
  }
  public var boolean: WalletCore.TW_EthereumAbi_Proto_BoolType {
    get
    set
  }
  public var numberInt: WalletCore.TW_EthereumAbi_Proto_NumberNType {
    get
    set
  }
  public var numberUint: WalletCore.TW_EthereumAbi_Proto_NumberNType {
    get
    set
  }
  public var stringParam: WalletCore.TW_EthereumAbi_Proto_StringType {
    get
    set
  }
  public var address: WalletCore.TW_EthereumAbi_Proto_AddressType {
    get
    set
  }
  public var byteArray: WalletCore.TW_EthereumAbi_Proto_ByteArrayType {
    get
    set
  }
  public var byteArrayFix: WalletCore.TW_EthereumAbi_Proto_ByteArrayFixType {
    get
    set
  }
  public var array: WalletCore.TW_EthereumAbi_Proto_ArrayType {
    get
    set
  }
  public var fixedArray: WalletCore.TW_EthereumAbi_Proto_FixedArrayType {
    get
    set
  }
  public var tuple: WalletCore.TW_EthereumAbi_Proto_TupleType {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Param : Swift.Equatable {
    case boolean(WalletCore.TW_EthereumAbi_Proto_BoolType)
    case numberInt(WalletCore.TW_EthereumAbi_Proto_NumberNType)
    case numberUint(WalletCore.TW_EthereumAbi_Proto_NumberNType)
    case stringParam(WalletCore.TW_EthereumAbi_Proto_StringType)
    case address(WalletCore.TW_EthereumAbi_Proto_AddressType)
    case byteArray(WalletCore.TW_EthereumAbi_Proto_ByteArrayType)
    case byteArrayFix(WalletCore.TW_EthereumAbi_Proto_ByteArrayFixType)
    case array(WalletCore.TW_EthereumAbi_Proto_ArrayType)
    case fixedArray(WalletCore.TW_EthereumAbi_Proto_FixedArrayType)
    case tuple(WalletCore.TW_EthereumAbi_Proto_TupleType)
    public static func == (a: WalletCore.TW_EthereumAbi_Proto_ParamType.OneOf_Param, b: WalletCore.TW_EthereumAbi_Proto_ParamType.OneOf_Param) -> Swift.Bool
  }
  public init()
}
public struct TW_EthereumAbi_Proto_NumberNParam {
  public var bits: Swift.UInt32
  public var value: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_ArrayParam {
  public var elementType: WalletCore.TW_EthereumAbi_Proto_ParamType {
    get
    set
  }
  public var hasElementType: Swift.Bool {
    get
  }
  public mutating func clearElementType()
  public var elements: [WalletCore.TW_EthereumAbi_Proto_Token]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_TupleParam {
  public var params: [WalletCore.TW_EthereumAbi_Proto_Token]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_Token {
  public var name: Swift.String
  public var token: WalletCore.TW_EthereumAbi_Proto_Token.OneOf_Token?
  public var boolean: Swift.Bool {
    get
    set
  }
  public var numberInt: WalletCore.TW_EthereumAbi_Proto_NumberNParam {
    get
    set
  }
  public var numberUint: WalletCore.TW_EthereumAbi_Proto_NumberNParam {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
  public var address: Swift.String {
    get
    set
  }
  public var byteArray: Foundation.Data {
    get
    set
  }
  public var byteArrayFix: Foundation.Data {
    get
    set
  }
  public var array: WalletCore.TW_EthereumAbi_Proto_ArrayParam {
    get
    set
  }
  public var fixedArray: WalletCore.TW_EthereumAbi_Proto_ArrayParam {
    get
    set
  }
  public var tuple: WalletCore.TW_EthereumAbi_Proto_TupleParam {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Token : Swift.Equatable {
    case boolean(Swift.Bool)
    case numberInt(WalletCore.TW_EthereumAbi_Proto_NumberNParam)
    case numberUint(WalletCore.TW_EthereumAbi_Proto_NumberNParam)
    case stringValue(Swift.String)
    case address(Swift.String)
    case byteArray(Foundation.Data)
    case byteArrayFix(Foundation.Data)
    case array(WalletCore.TW_EthereumAbi_Proto_ArrayParam)
    case fixedArray(WalletCore.TW_EthereumAbi_Proto_ArrayParam)
    case tuple(WalletCore.TW_EthereumAbi_Proto_TupleParam)
    public static func == (a: WalletCore.TW_EthereumAbi_Proto_Token.OneOf_Token, b: WalletCore.TW_EthereumAbi_Proto_Token.OneOf_Token) -> Swift.Bool
  }
  public init()
}
public struct TW_EthereumAbi_Proto_ContractCallDecodingInput {
  public var encoded: Foundation.Data
  public var smartContractAbiJson: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_ContractCallDecodingOutput {
  public var decodedJson: Swift.String
  public var tokens: [WalletCore.TW_EthereumAbi_Proto_Token]
  public var error: WalletCore.TW_EthereumAbi_Proto_AbiError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_AbiParams {
  public var params: [WalletCore.TW_EthereumAbi_Proto_Param]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_ParamsDecodingInput {
  public var encoded: Foundation.Data
  public var abi: WalletCore.TW_EthereumAbi_Proto_ParamsDecodingInput.OneOf_Abi?
  public var abiJson: Swift.String {
    get
    set
  }
  public var abiParams: WalletCore.TW_EthereumAbi_Proto_AbiParams {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Abi : Swift.Equatable {
    case abiJson(Swift.String)
    case abiParams(WalletCore.TW_EthereumAbi_Proto_AbiParams)
    public static func == (a: WalletCore.TW_EthereumAbi_Proto_ParamsDecodingInput.OneOf_Abi, b: WalletCore.TW_EthereumAbi_Proto_ParamsDecodingInput.OneOf_Abi) -> Swift.Bool
  }
  public init()
}
public struct TW_EthereumAbi_Proto_ParamsDecodingOutput {
  public var tokens: [WalletCore.TW_EthereumAbi_Proto_Token]
  public var error: WalletCore.TW_EthereumAbi_Proto_AbiError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_ValueDecodingInput {
  public var encoded: Foundation.Data
  public var paramType: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_ValueDecodingOutput {
  public var token: WalletCore.TW_EthereumAbi_Proto_Token {
    get
    set
  }
  public var hasToken: Swift.Bool {
    get
  }
  public mutating func clearToken()
  public var paramStr: Swift.String
  public var error: WalletCore.TW_EthereumAbi_Proto_AbiError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_FunctionEncodingInput {
  public var functionName: Swift.String
  public var tokens: [WalletCore.TW_EthereumAbi_Proto_Token]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_FunctionEncodingOutput {
  public var functionType: Swift.String
  public var encoded: Foundation.Data
  public var error: WalletCore.TW_EthereumAbi_Proto_AbiError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumAbi_Proto_FunctionGetTypeInput {
  public var functionName: Swift.String
  public var inputs: [WalletCore.TW_EthereumAbi_Proto_Param]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_EthereumAbi_Proto_AbiError : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_EthereumAbi_Proto_BoolType : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_BoolType, rhs: WalletCore.TW_EthereumAbi_Proto_BoolType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_NumberNType : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_NumberNType, rhs: WalletCore.TW_EthereumAbi_Proto_NumberNType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_StringType : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_StringType, rhs: WalletCore.TW_EthereumAbi_Proto_StringType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_AddressType : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_AddressType, rhs: WalletCore.TW_EthereumAbi_Proto_AddressType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_ArrayType : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_ArrayType, rhs: WalletCore.TW_EthereumAbi_Proto_ArrayType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_FixedArrayType : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_FixedArrayType, rhs: WalletCore.TW_EthereumAbi_Proto_FixedArrayType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_ByteArrayType : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_ByteArrayType, rhs: WalletCore.TW_EthereumAbi_Proto_ByteArrayType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_ByteArrayFixType : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_ByteArrayFixType, rhs: WalletCore.TW_EthereumAbi_Proto_ByteArrayFixType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_TupleType : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_TupleType, rhs: WalletCore.TW_EthereumAbi_Proto_TupleType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_Param : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_Param, rhs: WalletCore.TW_EthereumAbi_Proto_Param) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_ParamType : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_ParamType, rhs: WalletCore.TW_EthereumAbi_Proto_ParamType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_NumberNParam : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_NumberNParam, rhs: WalletCore.TW_EthereumAbi_Proto_NumberNParam) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_ArrayParam : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_ArrayParam, rhs: WalletCore.TW_EthereumAbi_Proto_ArrayParam) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_TupleParam : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_TupleParam, rhs: WalletCore.TW_EthereumAbi_Proto_TupleParam) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_Token : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_Token, rhs: WalletCore.TW_EthereumAbi_Proto_Token) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_ContractCallDecodingInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_ContractCallDecodingInput, rhs: WalletCore.TW_EthereumAbi_Proto_ContractCallDecodingInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_ContractCallDecodingOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_ContractCallDecodingOutput, rhs: WalletCore.TW_EthereumAbi_Proto_ContractCallDecodingOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_AbiParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_AbiParams, rhs: WalletCore.TW_EthereumAbi_Proto_AbiParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_ParamsDecodingInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_ParamsDecodingInput, rhs: WalletCore.TW_EthereumAbi_Proto_ParamsDecodingInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_ParamsDecodingOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_ParamsDecodingOutput, rhs: WalletCore.TW_EthereumAbi_Proto_ParamsDecodingOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_ValueDecodingInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_ValueDecodingInput, rhs: WalletCore.TW_EthereumAbi_Proto_ValueDecodingInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_ValueDecodingOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_ValueDecodingOutput, rhs: WalletCore.TW_EthereumAbi_Proto_ValueDecodingOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_FunctionEncodingInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_FunctionEncodingInput, rhs: WalletCore.TW_EthereumAbi_Proto_FunctionEncodingInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_FunctionEncodingOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_FunctionEncodingOutput, rhs: WalletCore.TW_EthereumAbi_Proto_FunctionEncodingOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumAbi_Proto_FunctionGetTypeInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumAbi_Proto_FunctionGetTypeInput, rhs: WalletCore.TW_EthereumAbi_Proto_FunctionGetTypeInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct EthereumAbi {
  public static func decodeContractCall(coin: WalletCore.CoinType, input: Foundation.Data) -> Foundation.Data
  public static func decodeParams(coin: WalletCore.CoinType, input: Foundation.Data) -> Foundation.Data
  public static func decodeValue(coin: WalletCore.CoinType, input: Foundation.Data) -> Foundation.Data
  public static func encodeFunction(coin: WalletCore.CoinType, input: Foundation.Data) -> Foundation.Data
  public static func encode(fn: WalletCore.EthereumAbiFunction) -> Foundation.Data
  public static func decodeOutput(fn: WalletCore.EthereumAbiFunction, encoded: Foundation.Data) -> Swift.Bool
  public static func decodeCall(data: Foundation.Data, abi: Swift.String) -> Swift.String?
  public static func encodeTyped(messageJson: Swift.String) -> Foundation.Data
}
@_hasMissingDesignatedInitializers final public class EthereumAbiFunction {
  public init(name: Swift.String)
  @objc deinit
  final public func getType() -> Swift.String
  @discardableResult
  final public func addParamUInt8(val: Swift.UInt8, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamUInt16(val: Swift.UInt16, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamUInt32(val: Swift.UInt32, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamUInt64(val: Swift.UInt64, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamUInt256(val: Foundation.Data, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamUIntN(bits: Swift.Int32, val: Foundation.Data, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamInt8(val: Swift.Int8, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamInt16(val: Swift.Int16, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamInt32(val: Swift.Int32, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamInt64(val: Swift.Int64, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamInt256(val: Foundation.Data, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamIntN(bits: Swift.Int32, val: Foundation.Data, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamBool(val: Swift.Bool, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamString(val: Swift.String, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamAddress(val: Foundation.Data, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamBytes(val: Foundation.Data, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamBytesFix(size: Swift.Int, val: Foundation.Data, isOutput: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addParamArray(isOutput: Swift.Bool) -> Swift.Int32
  final public func getParamUInt8(idx: Swift.Int32, isOutput: Swift.Bool) -> Swift.UInt8
  final public func getParamUInt64(idx: Swift.Int32, isOutput: Swift.Bool) -> Swift.UInt64
  final public func getParamUInt256(idx: Swift.Int32, isOutput: Swift.Bool) -> Foundation.Data
  final public func getParamBool(idx: Swift.Int32, isOutput: Swift.Bool) -> Swift.Bool
  final public func getParamString(idx: Swift.Int32, isOutput: Swift.Bool) -> Swift.String
  final public func getParamAddress(idx: Swift.Int32, isOutput: Swift.Bool) -> Foundation.Data
  @discardableResult
  final public func addInArrayParamUInt8(arrayIdx: Swift.Int32, val: Swift.UInt8) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamUInt16(arrayIdx: Swift.Int32, val: Swift.UInt16) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamUInt32(arrayIdx: Swift.Int32, val: Swift.UInt32) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamUInt64(arrayIdx: Swift.Int32, val: Swift.UInt64) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamUInt256(arrayIdx: Swift.Int32, val: Foundation.Data) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamUIntN(arrayIdx: Swift.Int32, bits: Swift.Int32, val: Foundation.Data) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamInt8(arrayIdx: Swift.Int32, val: Swift.Int8) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamInt16(arrayIdx: Swift.Int32, val: Swift.Int16) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamInt32(arrayIdx: Swift.Int32, val: Swift.Int32) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamInt64(arrayIdx: Swift.Int32, val: Swift.Int64) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamInt256(arrayIdx: Swift.Int32, val: Foundation.Data) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamIntN(arrayIdx: Swift.Int32, bits: Swift.Int32, val: Foundation.Data) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamBool(arrayIdx: Swift.Int32, val: Swift.Bool) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamString(arrayIdx: Swift.Int32, val: Swift.String) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamAddress(arrayIdx: Swift.Int32, val: Foundation.Data) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamBytes(arrayIdx: Swift.Int32, val: Foundation.Data) -> Swift.Int32
  @discardableResult
  final public func addInArrayParamBytesFix(arrayIdx: Swift.Int32, size: Swift.Int, val: Foundation.Data) -> Swift.Int32
}
public struct EthereumAbiValue {
  public static func encodeBool(value: Swift.Bool) -> Foundation.Data
  public static func encodeInt32(value: Swift.Int32) -> Foundation.Data
  public static func encodeUInt32(value: Swift.UInt32) -> Foundation.Data
  public static func encodeInt256(value: Foundation.Data) -> Foundation.Data
  public static func encodeUInt256(value: Foundation.Data) -> Foundation.Data
  public static func encodeAddress(value: Foundation.Data) -> Foundation.Data
  public static func encodeString(value: Swift.String) -> Foundation.Data
  public static func encodeBytes(value: Foundation.Data) -> Foundation.Data
  public static func encodeBytesDyn(value: Foundation.Data) -> Foundation.Data
  public static func decodeUInt256(input: Foundation.Data) -> Swift.String
  public static func decodeValue(input: Foundation.Data, type: Swift.String) -> Swift.String
  public static func decodeArray(input: Foundation.Data, type: Swift.String) -> Swift.String
}
public enum EthereumChainID : Swift.UInt32, Swift.CaseIterable {
  case ethereum
  case classic
  case rootstock
  case manta
  case poa
  case opbnb
  case tfuelevm
  case vechain
  case callisto
  case viction
  case polygon
  case okc
  case thundertoken
  case cfxevm
  case merlin
  case mantle
  case gochain
  case zeneon
  case base
  case meter
  case celo
  case linea
  case scroll
  case wanchain
  case cronos
  case optimism
  case xdai
  case smartbch
  case fantom
  case boba
  case kcc
  case zksync
  case heco
  case acalaevm
  case metis
  case polygonzkevm
  case moonbeam
  case moonriver
  case ronin
  case kavaevm
  case iotexevm
  case klaytn
  case avalanchec
  case evmos
  case arbitrumnova
  case arbitrum
  case smartchain
  case zetaevm
  case neon
  case aurora
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.EthereumChainID]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.EthereumChainID] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public struct EthereumMessageSigner {
  public static func signTypedMessage(privateKey: WalletCore.PrivateKey, messageJson: Swift.String) -> Swift.String
  public static func signTypedMessageEip155(privateKey: WalletCore.PrivateKey, messageJson: Swift.String, chainId: Swift.Int32) -> Swift.String
  public static func signMessage(privateKey: WalletCore.PrivateKey, message: Swift.String) -> Swift.String
  public static func signMessageImmutableX(privateKey: WalletCore.PrivateKey, message: Swift.String) -> Swift.String
  public static func signMessageEip155(privateKey: WalletCore.PrivateKey, message: Swift.String, chainId: Swift.Int32) -> Swift.String
  public static func verifyMessage(pubKey: WalletCore.PublicKey, message: Swift.String, signature: Swift.String) -> Swift.Bool
}
public typealias EthereumRlpRlpList = WalletCore.TW_EthereumRlp_Proto_RlpList
public typealias EthereumRlpRlpItem = WalletCore.TW_EthereumRlp_Proto_RlpItem
public typealias EthereumRlpEncodingInput = WalletCore.TW_EthereumRlp_Proto_EncodingInput
public typealias EthereumRlpEncodingOutput = WalletCore.TW_EthereumRlp_Proto_EncodingOutput
public struct TW_EthereumRlp_Proto_RlpList {
  public var items: [WalletCore.TW_EthereumRlp_Proto_RlpItem]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumRlp_Proto_RlpItem {
  public var item: WalletCore.TW_EthereumRlp_Proto_RlpItem.OneOf_Item?
  public var stringItem: Swift.String {
    get
    set
  }
  public var numberU64: Swift.UInt64 {
    get
    set
  }
  public var numberU256: Foundation.Data {
    get
    set
  }
  public var address: Swift.String {
    get
    set
  }
  public var data: Foundation.Data {
    get
    set
  }
  public var list: WalletCore.TW_EthereumRlp_Proto_RlpList {
    get
    set
  }
  public var rawEncoded: Foundation.Data {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Item : Swift.Equatable {
    case stringItem(Swift.String)
    case numberU64(Swift.UInt64)
    case numberU256(Foundation.Data)
    case address(Swift.String)
    case data(Foundation.Data)
    case list(WalletCore.TW_EthereumRlp_Proto_RlpList)
    case rawEncoded(Foundation.Data)
    public static func == (a: WalletCore.TW_EthereumRlp_Proto_RlpItem.OneOf_Item, b: WalletCore.TW_EthereumRlp_Proto_RlpItem.OneOf_Item) -> Swift.Bool
  }
  public init()
}
public struct TW_EthereumRlp_Proto_EncodingInput {
  public var item: WalletCore.TW_EthereumRlp_Proto_RlpItem {
    get
    set
  }
  public var hasItem: Swift.Bool {
    get
  }
  public mutating func clearItem()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_EthereumRlp_Proto_EncodingOutput {
  public var encoded: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_EthereumRlp_Proto_RlpList : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumRlp_Proto_RlpList, rhs: WalletCore.TW_EthereumRlp_Proto_RlpList) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumRlp_Proto_RlpItem : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumRlp_Proto_RlpItem, rhs: WalletCore.TW_EthereumRlp_Proto_RlpItem) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumRlp_Proto_EncodingInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumRlp_Proto_EncodingInput, rhs: WalletCore.TW_EthereumRlp_Proto_EncodingInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_EthereumRlp_Proto_EncodingOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_EthereumRlp_Proto_EncodingOutput, rhs: WalletCore.TW_EthereumRlp_Proto_EncodingOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct EthereumRlp {
  public static func encode(coin: WalletCore.CoinType, input: Foundation.Data) -> Foundation.Data
}
public typealias EverscaleTransfer = WalletCore.TW_Everscale_Proto_Transfer
public typealias EverscaleSigningInput = WalletCore.TW_Everscale_Proto_SigningInput
public typealias EverscaleSigningOutput = WalletCore.TW_Everscale_Proto_SigningOutput
public typealias EverscaleMessageBehavior = WalletCore.TW_Everscale_Proto_MessageBehavior
public enum TW_Everscale_Proto_MessageBehavior : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case simpleTransfer
  case sendAllBalance
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Everscale_Proto_MessageBehavior : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Everscale_Proto_MessageBehavior]
  public typealias AllCases = [WalletCore.TW_Everscale_Proto_MessageBehavior]
}
public struct TW_Everscale_Proto_Transfer {
  public var bounce: Swift.Bool
  public var behavior: WalletCore.TW_Everscale_Proto_MessageBehavior
  public var amount: Swift.UInt64
  public var expiredAt: Swift.UInt32
  public var to: Swift.String
  public var accountStateOneof: WalletCore.TW_Everscale_Proto_Transfer.OneOf_AccountStateOneof?
  public var encodedContractData: Swift.String {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_AccountStateOneof : Swift.Equatable {
    case encodedContractData(Swift.String)
    public static func == (a: WalletCore.TW_Everscale_Proto_Transfer.OneOf_AccountStateOneof, b: WalletCore.TW_Everscale_Proto_Transfer.OneOf_AccountStateOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Everscale_Proto_SigningInput {
  public var actionOneof: WalletCore.TW_Everscale_Proto_SigningInput.OneOf_ActionOneof?
  public var transfer: WalletCore.TW_Everscale_Proto_Transfer {
    get
    set
  }
  public var privateKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_ActionOneof : Swift.Equatable {
    case transfer(WalletCore.TW_Everscale_Proto_Transfer)
    public static func == (a: WalletCore.TW_Everscale_Proto_SigningInput.OneOf_ActionOneof, b: WalletCore.TW_Everscale_Proto_SigningInput.OneOf_ActionOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Everscale_Proto_SigningOutput {
  public var encoded: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Everscale_Proto_MessageBehavior : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Everscale_Proto_Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Everscale_Proto_Transfer, rhs: WalletCore.TW_Everscale_Proto_Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Everscale_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Everscale_Proto_SigningInput, rhs: WalletCore.TW_Everscale_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Everscale_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Everscale_Proto_SigningOutput, rhs: WalletCore.TW_Everscale_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias FIOPublicAddress = WalletCore.TW_FIO_Proto_PublicAddress
public typealias FIONewFundsContent = WalletCore.TW_FIO_Proto_NewFundsContent
public typealias FIOAction = WalletCore.TW_FIO_Proto_Action
public typealias FIOChainParams = WalletCore.TW_FIO_Proto_ChainParams
public typealias FIOSigningInput = WalletCore.TW_FIO_Proto_SigningInput
public typealias FIOSigningOutput = WalletCore.TW_FIO_Proto_SigningOutput
public struct TW_FIO_Proto_PublicAddress {
  public var coinSymbol: Swift.String
  public var address: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_FIO_Proto_NewFundsContent {
  public var payeePublicAddress: Swift.String
  public var amount: Swift.String
  public var coinSymbol: Swift.String
  public var memo: Swift.String
  public var hash: Swift.String
  public var offlineURL: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_FIO_Proto_Action {
  public var messageOneof: WalletCore.TW_FIO_Proto_Action.OneOf_MessageOneof?
  public var registerFioAddressMessage: WalletCore.TW_FIO_Proto_Action.RegisterFioAddress {
    get
    set
  }
  public var addPubAddressMessage: WalletCore.TW_FIO_Proto_Action.AddPubAddress {
    get
    set
  }
  public var transferMessage: WalletCore.TW_FIO_Proto_Action.Transfer {
    get
    set
  }
  public var renewFioAddressMessage: WalletCore.TW_FIO_Proto_Action.RenewFioAddress {
    get
    set
  }
  public var newFundsRequestMessage: WalletCore.TW_FIO_Proto_Action.NewFundsRequest {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case registerFioAddressMessage(WalletCore.TW_FIO_Proto_Action.RegisterFioAddress)
    case addPubAddressMessage(WalletCore.TW_FIO_Proto_Action.AddPubAddress)
    case transferMessage(WalletCore.TW_FIO_Proto_Action.Transfer)
    case renewFioAddressMessage(WalletCore.TW_FIO_Proto_Action.RenewFioAddress)
    case newFundsRequestMessage(WalletCore.TW_FIO_Proto_Action.NewFundsRequest)
    public static func == (a: WalletCore.TW_FIO_Proto_Action.OneOf_MessageOneof, b: WalletCore.TW_FIO_Proto_Action.OneOf_MessageOneof) -> Swift.Bool
  }
  public struct RegisterFioAddress {
    public var fioAddress: Swift.String
    public var ownerFioPublicKey: Swift.String
    public var fee: Swift.UInt64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct AddPubAddress {
    public var fioAddress: Swift.String
    public var publicAddresses: [WalletCore.TW_FIO_Proto_PublicAddress]
    public var fee: Swift.UInt64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Transfer {
    public var payeePublicKey: Swift.String
    public var amount: Swift.UInt64
    public var fee: Swift.UInt64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct RenewFioAddress {
    public var fioAddress: Swift.String
    public var ownerFioPublicKey: Swift.String
    public var fee: Swift.UInt64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct NewFundsRequest {
    public var payerFioName: Swift.String
    public var payerFioAddress: Swift.String
    public var payeeFioName: Swift.String
    public var content: WalletCore.TW_FIO_Proto_NewFundsContent {
      get
      set
    }
    public var hasContent: Swift.Bool {
      get
    }
    public mutating func clearContent()
    public var fee: Swift.UInt64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_FIO_Proto_ChainParams {
  public var chainID: Foundation.Data
  public var headBlockNumber: Swift.UInt64
  public var refBlockPrefix: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_FIO_Proto_SigningInput {
  public var expiry: Swift.UInt32 {
    get
    set
  }
  public var chainParams: WalletCore.TW_FIO_Proto_ChainParams {
    get
    set
  }
  public var hasChainParams: Swift.Bool {
    get
  }
  public mutating func clearChainParams()
  public var privateKey: Foundation.Data {
    get
    set
  }
  public var tpid: Swift.String {
    get
    set
  }
  public var action: WalletCore.TW_FIO_Proto_Action {
    get
    set
  }
  public var hasAction: Swift.Bool {
    get
  }
  public mutating func clearAction()
  public var ownerPublicKey: Swift.String {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_FIO_Proto_SigningOutput {
  public var json: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_FIO_Proto_PublicAddress : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_PublicAddress, rhs: WalletCore.TW_FIO_Proto_PublicAddress) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_NewFundsContent : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_NewFundsContent, rhs: WalletCore.TW_FIO_Proto_NewFundsContent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_Action : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_Action, rhs: WalletCore.TW_FIO_Proto_Action) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_Action.RegisterFioAddress : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_Action.RegisterFioAddress, rhs: WalletCore.TW_FIO_Proto_Action.RegisterFioAddress) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_Action.AddPubAddress : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_Action.AddPubAddress, rhs: WalletCore.TW_FIO_Proto_Action.AddPubAddress) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_Action.Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_Action.Transfer, rhs: WalletCore.TW_FIO_Proto_Action.Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_Action.RenewFioAddress : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_Action.RenewFioAddress, rhs: WalletCore.TW_FIO_Proto_Action.RenewFioAddress) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_Action.NewFundsRequest : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_Action.NewFundsRequest, rhs: WalletCore.TW_FIO_Proto_Action.NewFundsRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_ChainParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_ChainParams, rhs: WalletCore.TW_FIO_Proto_ChainParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_SigningInput, rhs: WalletCore.TW_FIO_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_FIO_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_FIO_Proto_SigningOutput, rhs: WalletCore.TW_FIO_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class FIOAccount {
  final public var description: Swift.String {
    get
  }
  public init?(string: Swift.String)
  @objc deinit
}
public typealias FilecoinSigningInput = WalletCore.TW_Filecoin_Proto_SigningInput
public typealias FilecoinSigningOutput = WalletCore.TW_Filecoin_Proto_SigningOutput
public typealias FilecoinDerivationType = WalletCore.TW_Filecoin_Proto_DerivationType
public enum TW_Filecoin_Proto_DerivationType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case secp256K1
  case delegated
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Filecoin_Proto_DerivationType : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Filecoin_Proto_DerivationType]
  public typealias AllCases = [WalletCore.TW_Filecoin_Proto_DerivationType]
}
public struct TW_Filecoin_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var to: Swift.String
  public var nonce: Swift.UInt64
  public var value: Foundation.Data
  public var gasLimit: Swift.Int64
  public var gasFeeCap: Foundation.Data
  public var gasPremium: Foundation.Data
  public var params: Foundation.Data
  public var derivation: WalletCore.TW_Filecoin_Proto_DerivationType
  public var publicKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Filecoin_Proto_SigningOutput {
  public var json: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Filecoin_Proto_DerivationType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Filecoin_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Filecoin_Proto_SigningInput, rhs: WalletCore.TW_Filecoin_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Filecoin_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Filecoin_Proto_SigningOutput, rhs: WalletCore.TW_Filecoin_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct FilecoinAddressConverter {
  public static func convertToEthereum(filecoinAddress: Swift.String) -> Swift.String
  public static func convertFromEthereum(ethAddress: Swift.String) -> Swift.String
}
public enum FilecoinAddressType : Swift.UInt32, Swift.CaseIterable {
  case `default`
  case delegated
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.FilecoinAddressType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.FilecoinAddressType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum FiroAddressType : Swift.UInt32, Swift.CaseIterable {
  case `default`
  case exchange
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.FiroAddressType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.FiroAddressType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public typealias GreenfieldAmount = WalletCore.TW_Greenfield_Proto_Amount
public typealias GreenfieldFee = WalletCore.TW_Greenfield_Proto_Fee
public typealias GreenfieldMessage = WalletCore.TW_Greenfield_Proto_Message
public typealias GreenfieldSigningInput = WalletCore.TW_Greenfield_Proto_SigningInput
public typealias GreenfieldSigningOutput = WalletCore.TW_Greenfield_Proto_SigningOutput
public typealias GreenfieldBroadcastMode = WalletCore.TW_Greenfield_Proto_BroadcastMode
public typealias GreenfieldEncodingMode = WalletCore.TW_Greenfield_Proto_EncodingMode
public typealias GreenfieldSigningMode = WalletCore.TW_Greenfield_Proto_SigningMode
public enum TW_Greenfield_Proto_BroadcastMode : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case sync
  case async
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Greenfield_Proto_BroadcastMode : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Greenfield_Proto_BroadcastMode]
  public typealias AllCases = [WalletCore.TW_Greenfield_Proto_BroadcastMode]
}
public enum TW_Greenfield_Proto_EncodingMode : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case protobuf
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Greenfield_Proto_EncodingMode : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Greenfield_Proto_EncodingMode]
  public typealias AllCases = [WalletCore.TW_Greenfield_Proto_EncodingMode]
}
public enum TW_Greenfield_Proto_SigningMode : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case eip712
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Greenfield_Proto_SigningMode : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Greenfield_Proto_SigningMode]
  public typealias AllCases = [WalletCore.TW_Greenfield_Proto_SigningMode]
}
public struct TW_Greenfield_Proto_Amount {
  public var denom: Swift.String
  public var amount: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Greenfield_Proto_Fee {
  public var amounts: [WalletCore.TW_Greenfield_Proto_Amount]
  public var gas: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Greenfield_Proto_Message {
  public var messageOneof: WalletCore.TW_Greenfield_Proto_Message.OneOf_MessageOneof?
  public var sendCoinsMessage: WalletCore.TW_Greenfield_Proto_Message.Send {
    get
    set
  }
  public var bridgeTransferOut: WalletCore.TW_Greenfield_Proto_Message.BridgeTransferOut {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case sendCoinsMessage(WalletCore.TW_Greenfield_Proto_Message.Send)
    case bridgeTransferOut(WalletCore.TW_Greenfield_Proto_Message.BridgeTransferOut)
    public static func == (a: WalletCore.TW_Greenfield_Proto_Message.OneOf_MessageOneof, b: WalletCore.TW_Greenfield_Proto_Message.OneOf_MessageOneof) -> Swift.Bool
  }
  public struct Send {
    public var fromAddress: Swift.String
    public var toAddress: Swift.String
    public var amounts: [WalletCore.TW_Greenfield_Proto_Amount]
    public var typePrefix: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct BridgeTransferOut {
    public var fromAddress: Swift.String
    public var toAddress: Swift.String
    public var amount: WalletCore.TW_Greenfield_Proto_Amount {
      get
      set
    }
    public var hasAmount: Swift.Bool {
      get
    }
    public mutating func clearAmount()
    public var typePrefix: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_Greenfield_Proto_SigningInput {
  public var encodingMode: WalletCore.TW_Greenfield_Proto_EncodingMode
  public var signingMode: WalletCore.TW_Greenfield_Proto_SigningMode
  public var accountNumber: Swift.UInt64
  public var ethChainID: Swift.String
  public var cosmosChainID: Swift.String
  public var fee: WalletCore.TW_Greenfield_Proto_Fee {
    get
    set
  }
  public var hasFee: Swift.Bool {
    get
  }
  public mutating func clearFee()
  public var memo: Swift.String
  public var sequence: Swift.UInt64
  public var privateKey: Foundation.Data
  public var messages: [WalletCore.TW_Greenfield_Proto_Message]
  public var mode: WalletCore.TW_Greenfield_Proto_BroadcastMode
  public var publicKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Greenfield_Proto_SigningOutput {
  public var signature: Foundation.Data
  public var serialized: Swift.String
  public var signatureJson: Swift.String
  public var errorMessage: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Greenfield_Proto_BroadcastMode : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Greenfield_Proto_EncodingMode : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Greenfield_Proto_SigningMode : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Greenfield_Proto_Amount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Greenfield_Proto_Amount, rhs: WalletCore.TW_Greenfield_Proto_Amount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Greenfield_Proto_Fee : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Greenfield_Proto_Fee, rhs: WalletCore.TW_Greenfield_Proto_Fee) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Greenfield_Proto_Message : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Greenfield_Proto_Message, rhs: WalletCore.TW_Greenfield_Proto_Message) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Greenfield_Proto_Message.Send : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Greenfield_Proto_Message.Send, rhs: WalletCore.TW_Greenfield_Proto_Message.Send) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Greenfield_Proto_Message.BridgeTransferOut : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Greenfield_Proto_Message.BridgeTransferOut, rhs: WalletCore.TW_Greenfield_Proto_Message.BridgeTransferOut) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Greenfield_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Greenfield_Proto_SigningInput, rhs: WalletCore.TW_Greenfield_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Greenfield_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Greenfield_Proto_SigningOutput, rhs: WalletCore.TW_Greenfield_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class GroestlcoinAddress : WalletCore.Address {
  public static func == (lhs: WalletCore.GroestlcoinAddress, rhs: WalletCore.GroestlcoinAddress) -> Swift.Bool
  public static func isValidString(string: Swift.String) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  public init?(string: Swift.String)
  public init(publicKey: WalletCore.PublicKey, prefix: Swift.UInt8)
  @objc deinit
}
extension WalletCore.HDVersion {
  public var isPublic: Swift.Bool {
    get
  }
  public var isPrivate: Swift.Bool {
    get
  }
}
public enum HDVersion : Swift.UInt32, Swift.CaseIterable {
  case none
  case xpub
  case xprv
  case ypub
  case yprv
  case zpub
  case zprv
  case vpub
  case vprv
  case tpub
  case tprv
  case ltub
  case ltpv
  case mtub
  case mtpv
  case ttub
  case ttpv
  case dpub
  case dprv
  case dgub
  case dgpv
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.HDVersion]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.HDVersion] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
@_hasMissingDesignatedInitializers final public class HDWallet {
  public static func getPublicKeyFromExtended(extended: Swift.String, coin: WalletCore.CoinType, derivationPath: Swift.String) -> WalletCore.PublicKey?
  final public var seed: Foundation.Data {
    get
  }
  final public var mnemonic: Swift.String {
    get
  }
  final public var entropy: Foundation.Data {
    get
  }
  public init?(strength: Swift.Int32, passphrase: Swift.String)
  public init?(mnemonic: Swift.String, passphrase: Swift.String)
  public init?(mnemonic: Swift.String, passphrase: Swift.String, check: Swift.Bool)
  public init?(entropy: Foundation.Data, passphrase: Swift.String)
  @objc deinit
  final public func getMasterKey(curve: WalletCore.Curve) -> WalletCore.PrivateKey
  final public func getKeyForCoin(coin: WalletCore.CoinType) -> WalletCore.PrivateKey
  final public func getAddressForCoin(coin: WalletCore.CoinType) -> Swift.String
  final public func getAddressDerivation(coin: WalletCore.CoinType, derivation: WalletCore.Derivation) -> Swift.String
  final public func getKey(coin: WalletCore.CoinType, derivationPath: Swift.String) -> WalletCore.PrivateKey
  final public func getKeyDerivation(coin: WalletCore.CoinType, derivation: WalletCore.Derivation) -> WalletCore.PrivateKey
  final public func getKeyByCurve(curve: WalletCore.Curve, derivationPath: Swift.String) -> WalletCore.PrivateKey
  final public func getDerivedKey(coin: WalletCore.CoinType, account: Swift.UInt32, change: Swift.UInt32, address: Swift.UInt32) -> WalletCore.PrivateKey
  final public func getExtendedPrivateKey(purpose: WalletCore.Purpose, coin: WalletCore.CoinType, version: WalletCore.HDVersion) -> Swift.String
  final public func getExtendedPublicKey(purpose: WalletCore.Purpose, coin: WalletCore.CoinType, version: WalletCore.HDVersion) -> Swift.String
  final public func getExtendedPrivateKeyAccount(purpose: WalletCore.Purpose, coin: WalletCore.CoinType, derivation: WalletCore.Derivation, version: WalletCore.HDVersion, account: Swift.UInt32) -> Swift.String
  final public func getExtendedPublicKeyAccount(purpose: WalletCore.Purpose, coin: WalletCore.CoinType, derivation: WalletCore.Derivation, version: WalletCore.HDVersion, account: Swift.UInt32) -> Swift.String
  final public func getExtendedPrivateKeyDerivation(purpose: WalletCore.Purpose, coin: WalletCore.CoinType, derivation: WalletCore.Derivation, version: WalletCore.HDVersion) -> Swift.String
  final public func getExtendedPublicKeyDerivation(purpose: WalletCore.Purpose, coin: WalletCore.CoinType, derivation: WalletCore.Derivation, version: WalletCore.HDVersion) -> Swift.String
}
public enum HRP : Swift.UInt32, Swift.CaseIterable, Swift.CustomStringConvertible {
  case unknown
  case bitcoin
  case litecoin
  case viacoin
  case groestlcoin
  case digiByte
  case monacoin
  case syscoin
  case verge
  case cosmos
  case bitcoinCash
  case bitcoinGold
  case ioTeX
  case nervos
  case zilliqa
  case terra
  case cryptoOrg
  case kava
  case oasis
  case bluzelle
  case bandChain
  case multiversX
  case secret
  case agoric
  case binance
  case ecash
  case thorchain
  case bitcoinDiamond
  case harmony
  case cardano
  case qtum
  case stratis
  case nativeInjective
  case osmosis
  case terraV2
  case coreum
  case nativeZetaChain
  case nativeCanto
  case sommelier
  case fetchAI
  case mars
  case umee
  case quasar
  case persistence
  case akash
  case noble
  case sei
  case stargaze
  case nativeEvmos
  case tia
  case dydx
  case juno
  case tbinance
  case stride
  case axelar
  case crescent
  case kujira
  case comdex
  case neutron
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.HRP]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.HRP] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public typealias HarmonySigningInput = WalletCore.TW_Harmony_Proto_SigningInput
public typealias HarmonySigningOutput = WalletCore.TW_Harmony_Proto_SigningOutput
public typealias HarmonyTransactionMessage = WalletCore.TW_Harmony_Proto_TransactionMessage
public typealias HarmonyStakingMessage = WalletCore.TW_Harmony_Proto_StakingMessage
public typealias HarmonyDescription = WalletCore.TW_Harmony_Proto_Description
public typealias HarmonyDecimal = WalletCore.TW_Harmony_Proto_Decimal
public typealias HarmonyCommissionRate = WalletCore.TW_Harmony_Proto_CommissionRate
public typealias HarmonyDirectiveCreateValidator = WalletCore.TW_Harmony_Proto_DirectiveCreateValidator
public typealias HarmonyDirectiveEditValidator = WalletCore.TW_Harmony_Proto_DirectiveEditValidator
public typealias HarmonyDirectiveDelegate = WalletCore.TW_Harmony_Proto_DirectiveDelegate
public typealias HarmonyDirectiveUndelegate = WalletCore.TW_Harmony_Proto_DirectiveUndelegate
public typealias HarmonyDirectiveCollectRewards = WalletCore.TW_Harmony_Proto_DirectiveCollectRewards
public struct TW_Harmony_Proto_SigningInput {
  public var chainID: Foundation.Data
  public var privateKey: Foundation.Data
  public var messageOneof: WalletCore.TW_Harmony_Proto_SigningInput.OneOf_MessageOneof?
  public var transactionMessage: WalletCore.TW_Harmony_Proto_TransactionMessage {
    get
    set
  }
  public var stakingMessage: WalletCore.TW_Harmony_Proto_StakingMessage {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case transactionMessage(WalletCore.TW_Harmony_Proto_TransactionMessage)
    case stakingMessage(WalletCore.TW_Harmony_Proto_StakingMessage)
    public static func == (a: WalletCore.TW_Harmony_Proto_SigningInput.OneOf_MessageOneof, b: WalletCore.TW_Harmony_Proto_SigningInput.OneOf_MessageOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Harmony_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var v: Foundation.Data
  public var r: Foundation.Data
  public var s: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_TransactionMessage {
  public var nonce: Foundation.Data
  public var gasPrice: Foundation.Data
  public var gasLimit: Foundation.Data
  public var toAddress: Swift.String
  public var amount: Foundation.Data
  public var payload: Foundation.Data
  public var fromShardID: Foundation.Data
  public var toShardID: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_StakingMessage {
  public var stakeMsg: WalletCore.TW_Harmony_Proto_StakingMessage.OneOf_StakeMsg? {
    get
    set
  }
  public var createValidatorMessage: WalletCore.TW_Harmony_Proto_DirectiveCreateValidator {
    get
    set
  }
  public var editValidatorMessage: WalletCore.TW_Harmony_Proto_DirectiveEditValidator {
    get
    set
  }
  public var delegateMessage: WalletCore.TW_Harmony_Proto_DirectiveDelegate {
    get
    set
  }
  public var undelegateMessage: WalletCore.TW_Harmony_Proto_DirectiveUndelegate {
    get
    set
  }
  public var collectRewards: WalletCore.TW_Harmony_Proto_DirectiveCollectRewards {
    get
    set
  }
  public var nonce: Foundation.Data {
    get
    set
  }
  public var gasPrice: Foundation.Data {
    get
    set
  }
  public var gasLimit: Foundation.Data {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_StakeMsg : Swift.Equatable {
    case createValidatorMessage(WalletCore.TW_Harmony_Proto_DirectiveCreateValidator)
    case editValidatorMessage(WalletCore.TW_Harmony_Proto_DirectiveEditValidator)
    case delegateMessage(WalletCore.TW_Harmony_Proto_DirectiveDelegate)
    case undelegateMessage(WalletCore.TW_Harmony_Proto_DirectiveUndelegate)
    case collectRewards(WalletCore.TW_Harmony_Proto_DirectiveCollectRewards)
    public static func == (a: WalletCore.TW_Harmony_Proto_StakingMessage.OneOf_StakeMsg, b: WalletCore.TW_Harmony_Proto_StakingMessage.OneOf_StakeMsg) -> Swift.Bool
  }
  public init()
}
public struct TW_Harmony_Proto_Description {
  public var name: Swift.String
  public var identity: Swift.String
  public var website: Swift.String
  public var securityContact: Swift.String
  public var details: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_Decimal {
  public var value: Foundation.Data
  public var precision: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_CommissionRate {
  public var rate: WalletCore.TW_Harmony_Proto_Decimal {
    get
    set
  }
  public var hasRate: Swift.Bool {
    get
  }
  public mutating func clearRate()
  public var maxRate: WalletCore.TW_Harmony_Proto_Decimal {
    get
    set
  }
  public var hasMaxRate: Swift.Bool {
    get
  }
  public mutating func clearMaxRate()
  public var maxChangeRate: WalletCore.TW_Harmony_Proto_Decimal {
    get
    set
  }
  public var hasMaxChangeRate: Swift.Bool {
    get
  }
  public mutating func clearMaxChangeRate()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_DirectiveCreateValidator {
  public var validatorAddress: Swift.String {
    get
    set
  }
  public var description_p: WalletCore.TW_Harmony_Proto_Description {
    get
    set
  }
  public var hasDescription_p: Swift.Bool {
    get
  }
  public mutating func clearDescription_p()
  public var commissionRates: WalletCore.TW_Harmony_Proto_CommissionRate {
    get
    set
  }
  public var hasCommissionRates: Swift.Bool {
    get
  }
  public mutating func clearCommissionRates()
  public var minSelfDelegation: Foundation.Data {
    get
    set
  }
  public var maxTotalDelegation: Foundation.Data {
    get
    set
  }
  public var slotPubKeys: [Foundation.Data] {
    get
    set
  }
  public var slotKeySigs: [Foundation.Data] {
    get
    set
  }
  public var amount: Foundation.Data {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_DirectiveEditValidator {
  public var validatorAddress: Swift.String
  public var description_p: WalletCore.TW_Harmony_Proto_Description {
    get
    set
  }
  public var hasDescription_p: Swift.Bool {
    get
  }
  public mutating func clearDescription_p()
  public var commissionRate: WalletCore.TW_Harmony_Proto_Decimal {
    get
    set
  }
  public var hasCommissionRate: Swift.Bool {
    get
  }
  public mutating func clearCommissionRate()
  public var minSelfDelegation: Foundation.Data
  public var maxTotalDelegation: Foundation.Data
  public var slotKeyToRemove: Foundation.Data
  public var slotKeyToAdd: Foundation.Data
  public var slotKeyToAddSig: Foundation.Data
  public var active: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_DirectiveDelegate {
  public var delegatorAddress: Swift.String
  public var validatorAddress: Swift.String
  public var amount: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_DirectiveUndelegate {
  public var delegatorAddress: Swift.String
  public var validatorAddress: Swift.String
  public var amount: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Harmony_Proto_DirectiveCollectRewards {
  public var delegatorAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Harmony_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_SigningInput, rhs: WalletCore.TW_Harmony_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_SigningOutput, rhs: WalletCore.TW_Harmony_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_TransactionMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_TransactionMessage, rhs: WalletCore.TW_Harmony_Proto_TransactionMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_StakingMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_StakingMessage, rhs: WalletCore.TW_Harmony_Proto_StakingMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_Description : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_Description, rhs: WalletCore.TW_Harmony_Proto_Description) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_Decimal : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_Decimal, rhs: WalletCore.TW_Harmony_Proto_Decimal) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_CommissionRate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_CommissionRate, rhs: WalletCore.TW_Harmony_Proto_CommissionRate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_DirectiveCreateValidator : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_DirectiveCreateValidator, rhs: WalletCore.TW_Harmony_Proto_DirectiveCreateValidator) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_DirectiveEditValidator : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_DirectiveEditValidator, rhs: WalletCore.TW_Harmony_Proto_DirectiveEditValidator) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_DirectiveDelegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_DirectiveDelegate, rhs: WalletCore.TW_Harmony_Proto_DirectiveDelegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_DirectiveUndelegate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_DirectiveUndelegate, rhs: WalletCore.TW_Harmony_Proto_DirectiveUndelegate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Harmony_Proto_DirectiveCollectRewards : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Harmony_Proto_DirectiveCollectRewards, rhs: WalletCore.TW_Harmony_Proto_DirectiveCollectRewards) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Hash {
  public static func sha1(data: Foundation.Data) -> Foundation.Data
  public static func sha256(data: Foundation.Data) -> Foundation.Data
  public static func sha512(data: Foundation.Data) -> Foundation.Data
  public static func sha512_256(data: Foundation.Data) -> Foundation.Data
  public static func keccak256(data: Foundation.Data) -> Foundation.Data
  public static func keccak512(data: Foundation.Data) -> Foundation.Data
  public static func sha3_256(data: Foundation.Data) -> Foundation.Data
  public static func sha3_512(data: Foundation.Data) -> Foundation.Data
  public static func ripemd(data: Foundation.Data) -> Foundation.Data
  public static func blake256(data: Foundation.Data) -> Foundation.Data
  public static func blake2b(data: Foundation.Data, size: Swift.Int) -> Foundation.Data
  public static func blake2bPersonal(data: Foundation.Data, personal: Foundation.Data, outlen: Swift.Int) -> Foundation.Data
  public static func groestl512(data: Foundation.Data) -> Foundation.Data
  public static func sha256SHA256(data: Foundation.Data) -> Foundation.Data
  public static func sha256RIPEMD(data: Foundation.Data) -> Foundation.Data
  public static func sha3_256RIPEMD(data: Foundation.Data) -> Foundation.Data
  public static func blake256Blake256(data: Foundation.Data) -> Foundation.Data
  public static func blake256RIPEMD(data: Foundation.Data) -> Foundation.Data
  public static func groestl512Groestl512(data: Foundation.Data) -> Foundation.Data
}
public typealias HederaTimestamp = WalletCore.TW_Hedera_Proto_Timestamp
public typealias HederaTransactionID = WalletCore.TW_Hedera_Proto_TransactionID
public typealias HederaTransferMessage = WalletCore.TW_Hedera_Proto_TransferMessage
public typealias HederaTransactionBody = WalletCore.TW_Hedera_Proto_TransactionBody
public typealias HederaSigningInput = WalletCore.TW_Hedera_Proto_SigningInput
public typealias HederaSigningOutput = WalletCore.TW_Hedera_Proto_SigningOutput
public struct TW_Hedera_Proto_Timestamp {
  public var seconds: Swift.Int64
  public var nanos: Swift.Int32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Hedera_Proto_TransactionID {
  public var transactionValidStart: WalletCore.TW_Hedera_Proto_Timestamp {
    get
    set
  }
  public var hasTransactionValidStart: Swift.Bool {
    get
  }
  public mutating func clearTransactionValidStart()
  public var accountID: Swift.String
  public var scheduled: Swift.Bool
  public var nonce: Swift.Int32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Hedera_Proto_TransferMessage {
  public var from: Swift.String
  public var to: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Hedera_Proto_TransactionBody {
  public var transactionID: WalletCore.TW_Hedera_Proto_TransactionID {
    get
    set
  }
  public var hasTransactionID: Swift.Bool {
    get
  }
  public mutating func clearTransactionID()
  public var nodeAccountID: Swift.String
  public var transactionFee: Swift.UInt64
  public var transactionValidDuration: Swift.Int64
  public var memo: Swift.String
  public var data: WalletCore.TW_Hedera_Proto_TransactionBody.OneOf_Data?
  public var transfer: WalletCore.TW_Hedera_Proto_TransferMessage {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Data : Swift.Equatable {
    case transfer(WalletCore.TW_Hedera_Proto_TransferMessage)
    public static func == (a: WalletCore.TW_Hedera_Proto_TransactionBody.OneOf_Data, b: WalletCore.TW_Hedera_Proto_TransactionBody.OneOf_Data) -> Swift.Bool
  }
  public init()
}
public struct TW_Hedera_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var body: WalletCore.TW_Hedera_Proto_TransactionBody {
    get
    set
  }
  public var hasBody: Swift.Bool {
    get
  }
  public mutating func clearBody()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Hedera_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Hedera_Proto_Timestamp : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Hedera_Proto_Timestamp, rhs: WalletCore.TW_Hedera_Proto_Timestamp) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Hedera_Proto_TransactionID : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Hedera_Proto_TransactionID, rhs: WalletCore.TW_Hedera_Proto_TransactionID) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Hedera_Proto_TransferMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Hedera_Proto_TransferMessage, rhs: WalletCore.TW_Hedera_Proto_TransferMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Hedera_Proto_TransactionBody : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Hedera_Proto_TransactionBody, rhs: WalletCore.TW_Hedera_Proto_TransactionBody) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Hedera_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Hedera_Proto_SigningInput, rhs: WalletCore.TW_Hedera_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Hedera_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Hedera_Proto_SigningOutput, rhs: WalletCore.TW_Hedera_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias IOSTAction = WalletCore.TW_IOST_Proto_Action
public typealias IOSTAmountLimit = WalletCore.TW_IOST_Proto_AmountLimit
public typealias IOSTSignature = WalletCore.TW_IOST_Proto_Signature
public typealias IOSTTransaction = WalletCore.TW_IOST_Proto_Transaction
public typealias IOSTAccountInfo = WalletCore.TW_IOST_Proto_AccountInfo
public typealias IOSTSigningInput = WalletCore.TW_IOST_Proto_SigningInput
public typealias IOSTSigningOutput = WalletCore.TW_IOST_Proto_SigningOutput
public typealias IOSTAlgorithm = WalletCore.TW_IOST_Proto_Algorithm
public enum TW_IOST_Proto_Algorithm : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case unknown
  case secp256K1
  case ed25519
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IOST_Proto_Algorithm : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_IOST_Proto_Algorithm]
  public typealias AllCases = [WalletCore.TW_IOST_Proto_Algorithm]
}
public struct TW_IOST_Proto_Action {
  public var contract: Swift.String
  public var actionName: Swift.String
  public var data: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_IOST_Proto_AmountLimit {
  public var token: Swift.String
  public var value: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_IOST_Proto_Signature {
  public var algorithm: WalletCore.TW_IOST_Proto_Algorithm
  public var signature: Foundation.Data
  public var publicKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_IOST_Proto_Transaction {
  public var time: Swift.Int64
  public var expiration: Swift.Int64
  public var gasRatio: Swift.Double
  public var gasLimit: Swift.Double
  public var delay: Swift.Int64
  public var chainID: Swift.UInt32
  public var actions: [WalletCore.TW_IOST_Proto_Action]
  public var amountLimit: [WalletCore.TW_IOST_Proto_AmountLimit]
  public var signers: [Swift.String]
  public var signatures: [WalletCore.TW_IOST_Proto_Signature]
  public var publisher: Swift.String
  public var publisherSigs: [WalletCore.TW_IOST_Proto_Signature]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_IOST_Proto_AccountInfo {
  public var name: Swift.String
  public var activeKey: Foundation.Data
  public var ownerKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_IOST_Proto_SigningInput {
  public var account: WalletCore.TW_IOST_Proto_AccountInfo {
    get
    set
  }
  public var hasAccount: Swift.Bool {
    get
  }
  public mutating func clearAccount()
  public var transactionTemplate: WalletCore.TW_IOST_Proto_Transaction {
    get
    set
  }
  public var hasTransactionTemplate: Swift.Bool {
    get
  }
  public mutating func clearTransactionTemplate()
  public var transferDestination: Swift.String {
    get
    set
  }
  public var transferAmount: Swift.String {
    get
    set
  }
  public var transferMemo: Swift.String {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_IOST_Proto_SigningOutput {
  public var transaction: WalletCore.TW_IOST_Proto_Transaction {
    get
    set
  }
  public var hasTransaction: Swift.Bool {
    get
  }
  public mutating func clearTransaction()
  public var encoded: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_IOST_Proto_Algorithm : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_IOST_Proto_Action : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IOST_Proto_Action, rhs: WalletCore.TW_IOST_Proto_Action) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IOST_Proto_AmountLimit : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IOST_Proto_AmountLimit, rhs: WalletCore.TW_IOST_Proto_AmountLimit) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IOST_Proto_Signature : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IOST_Proto_Signature, rhs: WalletCore.TW_IOST_Proto_Signature) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IOST_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IOST_Proto_Transaction, rhs: WalletCore.TW_IOST_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IOST_Proto_AccountInfo : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IOST_Proto_AccountInfo, rhs: WalletCore.TW_IOST_Proto_AccountInfo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IOST_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IOST_Proto_SigningInput, rhs: WalletCore.TW_IOST_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IOST_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IOST_Proto_SigningOutput, rhs: WalletCore.TW_IOST_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias IconSigningInput = WalletCore.TW_Icon_Proto_SigningInput
public typealias IconSigningOutput = WalletCore.TW_Icon_Proto_SigningOutput
public struct TW_Icon_Proto_SigningInput {
  public var fromAddress: Swift.String
  public var toAddress: Swift.String
  public var value: Foundation.Data
  public var stepLimit: Foundation.Data
  public var timestamp: Swift.Int64
  public var nonce: Foundation.Data
  public var networkID: Foundation.Data
  public var privateKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Icon_Proto_SigningOutput {
  public var encoded: Swift.String
  public var signature: Foundation.Data
  public var errorMessage: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Icon_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Icon_Proto_SigningInput, rhs: WalletCore.TW_Icon_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Icon_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Icon_Proto_SigningOutput, rhs: WalletCore.TW_Icon_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias InternetComputerTransaction = WalletCore.TW_InternetComputer_Proto_Transaction
public typealias InternetComputerSigningInput = WalletCore.TW_InternetComputer_Proto_SigningInput
public typealias InternetComputerSigningOutput = WalletCore.TW_InternetComputer_Proto_SigningOutput
public struct TW_InternetComputer_Proto_Transaction {
  public var transactionOneof: WalletCore.TW_InternetComputer_Proto_Transaction.OneOf_TransactionOneof?
  public var transfer: WalletCore.TW_InternetComputer_Proto_Transaction.Transfer {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_TransactionOneof : Swift.Equatable {
    case transfer(WalletCore.TW_InternetComputer_Proto_Transaction.Transfer)
    public static func == (a: WalletCore.TW_InternetComputer_Proto_Transaction.OneOf_TransactionOneof, b: WalletCore.TW_InternetComputer_Proto_Transaction.OneOf_TransactionOneof) -> Swift.Bool
  }
  public struct Transfer {
    public var toAccountIdentifier: Swift.String
    public var amount: Swift.UInt64
    public var memo: Swift.UInt64
    public var currentTimestampNanos: Swift.UInt64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_InternetComputer_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var transaction: WalletCore.TW_InternetComputer_Proto_Transaction {
    get
    set
  }
  public var hasTransaction: Swift.Bool {
    get
  }
  public mutating func clearTransaction()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_InternetComputer_Proto_SigningOutput {
  public var signedTransaction: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_InternetComputer_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_InternetComputer_Proto_Transaction, rhs: WalletCore.TW_InternetComputer_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_InternetComputer_Proto_Transaction.Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_InternetComputer_Proto_Transaction.Transfer, rhs: WalletCore.TW_InternetComputer_Proto_Transaction.Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_InternetComputer_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_InternetComputer_Proto_SigningInput, rhs: WalletCore.TW_InternetComputer_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_InternetComputer_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_InternetComputer_Proto_SigningOutput, rhs: WalletCore.TW_InternetComputer_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias IoTeXTransfer = WalletCore.TW_IoTeX_Proto_Transfer
public typealias IoTeXStaking = WalletCore.TW_IoTeX_Proto_Staking
public typealias IoTeXContractCall = WalletCore.TW_IoTeX_Proto_ContractCall
public typealias IoTeXSigningInput = WalletCore.TW_IoTeX_Proto_SigningInput
public typealias IoTeXSigningOutput = WalletCore.TW_IoTeX_Proto_SigningOutput
public typealias IoTeXActionCore = WalletCore.TW_IoTeX_Proto_ActionCore
public typealias IoTeXAction = WalletCore.TW_IoTeX_Proto_Action
public struct TW_IoTeX_Proto_Transfer {
  public var amount: Swift.String
  public var recipient: Swift.String
  public var payload: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_IoTeX_Proto_Staking {
  public var message: WalletCore.TW_IoTeX_Proto_Staking.OneOf_Message?
  public var stakeCreate: WalletCore.TW_IoTeX_Proto_Staking.Create {
    get
    set
  }
  public var stakeUnstake: WalletCore.TW_IoTeX_Proto_Staking.Reclaim {
    get
    set
  }
  public var stakeWithdraw: WalletCore.TW_IoTeX_Proto_Staking.Reclaim {
    get
    set
  }
  public var stakeAddDeposit: WalletCore.TW_IoTeX_Proto_Staking.AddDeposit {
    get
    set
  }
  public var stakeRestake: WalletCore.TW_IoTeX_Proto_Staking.Restake {
    get
    set
  }
  public var stakeChangeCandidate: WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate {
    get
    set
  }
  public var stakeTransferOwnership: WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership {
    get
    set
  }
  public var candidateRegister: WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister {
    get
    set
  }
  public var candidateUpdate: WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Message : Swift.Equatable {
    case stakeCreate(WalletCore.TW_IoTeX_Proto_Staking.Create)
    case stakeUnstake(WalletCore.TW_IoTeX_Proto_Staking.Reclaim)
    case stakeWithdraw(WalletCore.TW_IoTeX_Proto_Staking.Reclaim)
    case stakeAddDeposit(WalletCore.TW_IoTeX_Proto_Staking.AddDeposit)
    case stakeRestake(WalletCore.TW_IoTeX_Proto_Staking.Restake)
    case stakeChangeCandidate(WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate)
    case stakeTransferOwnership(WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership)
    case candidateRegister(WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister)
    case candidateUpdate(WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo)
    public static func == (a: WalletCore.TW_IoTeX_Proto_Staking.OneOf_Message, b: WalletCore.TW_IoTeX_Proto_Staking.OneOf_Message) -> Swift.Bool
  }
  public struct Create {
    public var candidateName: Swift.String
    public var stakedAmount: Swift.String
    public var stakedDuration: Swift.UInt32
    public var autoStake: Swift.Bool
    public var payload: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Reclaim {
    public var bucketIndex: Swift.UInt64
    public var payload: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct AddDeposit {
    public var bucketIndex: Swift.UInt64
    public var amount: Swift.String
    public var payload: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Restake {
    public var bucketIndex: Swift.UInt64
    public var stakedDuration: Swift.UInt32
    public var autoStake: Swift.Bool
    public var payload: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct ChangeCandidate {
    public var bucketIndex: Swift.UInt64
    public var candidateName: Swift.String
    public var payload: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct TransferOwnership {
    public var bucketIndex: Swift.UInt64
    public var voterAddress: Swift.String
    public var payload: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct CandidateBasicInfo {
    public var name: Swift.String
    public var operatorAddress: Swift.String
    public var rewardAddress: Swift.String
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct CandidateRegister {
    public var candidate: WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo {
      get
      set
    }
    public var hasCandidate: Swift.Bool {
      get
    }
    public mutating func clearCandidate()
    public var stakedAmount: Swift.String
    public var stakedDuration: Swift.UInt32
    public var autoStake: Swift.Bool
    public var ownerAddress: Swift.String
    public var payload: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_IoTeX_Proto_ContractCall {
  public var amount: Swift.String
  public var contract: Swift.String
  public var data: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_IoTeX_Proto_SigningInput {
  public var version: Swift.UInt32
  public var nonce: Swift.UInt64
  public var gasLimit: Swift.UInt64
  public var gasPrice: Swift.String
  public var chainID: Swift.UInt32
  public var privateKey: Foundation.Data
  public var action: WalletCore.TW_IoTeX_Proto_SigningInput.OneOf_Action?
  public var transfer: WalletCore.TW_IoTeX_Proto_Transfer {
    get
    set
  }
  public var call: WalletCore.TW_IoTeX_Proto_ContractCall {
    get
    set
  }
  public var stakeCreate: WalletCore.TW_IoTeX_Proto_Staking.Create {
    get
    set
  }
  public var stakeUnstake: WalletCore.TW_IoTeX_Proto_Staking.Reclaim {
    get
    set
  }
  public var stakeWithdraw: WalletCore.TW_IoTeX_Proto_Staking.Reclaim {
    get
    set
  }
  public var stakeAddDeposit: WalletCore.TW_IoTeX_Proto_Staking.AddDeposit {
    get
    set
  }
  public var stakeRestake: WalletCore.TW_IoTeX_Proto_Staking.Restake {
    get
    set
  }
  public var stakeChangeCandidate: WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate {
    get
    set
  }
  public var stakeTransferOwnership: WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership {
    get
    set
  }
  public var candidateRegister: WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister {
    get
    set
  }
  public var candidateUpdate: WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Action : Swift.Equatable {
    case transfer(WalletCore.TW_IoTeX_Proto_Transfer)
    case call(WalletCore.TW_IoTeX_Proto_ContractCall)
    case stakeCreate(WalletCore.TW_IoTeX_Proto_Staking.Create)
    case stakeUnstake(WalletCore.TW_IoTeX_Proto_Staking.Reclaim)
    case stakeWithdraw(WalletCore.TW_IoTeX_Proto_Staking.Reclaim)
    case stakeAddDeposit(WalletCore.TW_IoTeX_Proto_Staking.AddDeposit)
    case stakeRestake(WalletCore.TW_IoTeX_Proto_Staking.Restake)
    case stakeChangeCandidate(WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate)
    case stakeTransferOwnership(WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership)
    case candidateRegister(WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister)
    case candidateUpdate(WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo)
    public static func == (a: WalletCore.TW_IoTeX_Proto_SigningInput.OneOf_Action, b: WalletCore.TW_IoTeX_Proto_SigningInput.OneOf_Action) -> Swift.Bool
  }
  public init()
}
public struct TW_IoTeX_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var hash: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_IoTeX_Proto_ActionCore {
  public var version: Swift.UInt32
  public var nonce: Swift.UInt64
  public var gasLimit: Swift.UInt64
  public var gasPrice: Swift.String
  public var chainID: Swift.UInt32
  public var action: WalletCore.TW_IoTeX_Proto_ActionCore.OneOf_Action?
  public var transfer: WalletCore.TW_IoTeX_Proto_Transfer {
    get
    set
  }
  public var execution: WalletCore.TW_IoTeX_Proto_ContractCall {
    get
    set
  }
  public var stakeCreate: WalletCore.TW_IoTeX_Proto_Staking.Create {
    get
    set
  }
  public var stakeUnstake: WalletCore.TW_IoTeX_Proto_Staking.Reclaim {
    get
    set
  }
  public var stakeWithdraw: WalletCore.TW_IoTeX_Proto_Staking.Reclaim {
    get
    set
  }
  public var stakeAddDeposit: WalletCore.TW_IoTeX_Proto_Staking.AddDeposit {
    get
    set
  }
  public var stakeRestake: WalletCore.TW_IoTeX_Proto_Staking.Restake {
    get
    set
  }
  public var stakeChangeCandidate: WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate {
    get
    set
  }
  public var stakeTransferOwnership: WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership {
    get
    set
  }
  public var candidateRegister: WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister {
    get
    set
  }
  public var candidateUpdate: WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Action : Swift.Equatable {
    case transfer(WalletCore.TW_IoTeX_Proto_Transfer)
    case execution(WalletCore.TW_IoTeX_Proto_ContractCall)
    case stakeCreate(WalletCore.TW_IoTeX_Proto_Staking.Create)
    case stakeUnstake(WalletCore.TW_IoTeX_Proto_Staking.Reclaim)
    case stakeWithdraw(WalletCore.TW_IoTeX_Proto_Staking.Reclaim)
    case stakeAddDeposit(WalletCore.TW_IoTeX_Proto_Staking.AddDeposit)
    case stakeRestake(WalletCore.TW_IoTeX_Proto_Staking.Restake)
    case stakeChangeCandidate(WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate)
    case stakeTransferOwnership(WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership)
    case candidateRegister(WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister)
    case candidateUpdate(WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo)
    public static func == (a: WalletCore.TW_IoTeX_Proto_ActionCore.OneOf_Action, b: WalletCore.TW_IoTeX_Proto_ActionCore.OneOf_Action) -> Swift.Bool
  }
  public init()
}
public struct TW_IoTeX_Proto_Action {
  public var core: WalletCore.TW_IoTeX_Proto_ActionCore {
    get
    set
  }
  public var hasCore: Swift.Bool {
    get
  }
  public mutating func clearCore()
  public var senderPubKey: Foundation.Data
  public var signature: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_IoTeX_Proto_Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Transfer, rhs: WalletCore.TW_IoTeX_Proto_Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking, rhs: WalletCore.TW_IoTeX_Proto_Staking) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking.Create : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking.Create, rhs: WalletCore.TW_IoTeX_Proto_Staking.Create) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking.Reclaim : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking.Reclaim, rhs: WalletCore.TW_IoTeX_Proto_Staking.Reclaim) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking.AddDeposit : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking.AddDeposit, rhs: WalletCore.TW_IoTeX_Proto_Staking.AddDeposit) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking.Restake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking.Restake, rhs: WalletCore.TW_IoTeX_Proto_Staking.Restake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate, rhs: WalletCore.TW_IoTeX_Proto_Staking.ChangeCandidate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership, rhs: WalletCore.TW_IoTeX_Proto_Staking.TransferOwnership) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo, rhs: WalletCore.TW_IoTeX_Proto_Staking.CandidateBasicInfo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister, rhs: WalletCore.TW_IoTeX_Proto_Staking.CandidateRegister) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_ContractCall : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_ContractCall, rhs: WalletCore.TW_IoTeX_Proto_ContractCall) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_SigningInput, rhs: WalletCore.TW_IoTeX_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_SigningOutput, rhs: WalletCore.TW_IoTeX_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_ActionCore : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_ActionCore, rhs: WalletCore.TW_IoTeX_Proto_ActionCore) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_IoTeX_Proto_Action : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_IoTeX_Proto_Action, rhs: WalletCore.TW_IoTeX_Proto_Action) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.KeyStore {
  public enum Error : Swift.Error, Foundation.LocalizedError {
    case accountNotFound
    case invalidMnemonic
    case invalidJSON
    case invalidKey
    case invalidPassword
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: WalletCore.KeyStore.Error, b: WalletCore.KeyStore.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
final public class KeyStore {
  final public let keyDirectory: Foundation.URL
  final public let watchesFile: Foundation.URL
  final public var wallets: [WalletCore.Wallet] {
    get
  }
  final public var watches: [WalletCore.Watch]
  public init(keyDirectory: Foundation.URL) throws
  final public func watch(_ watches: [WalletCore.Watch]) throws
  final public func removeWatch(_ watch: WalletCore.Watch) throws
  final public func createWallet(name: Swift.String, password: Swift.String, coins: [WalletCore.CoinType], encryption: WalletCore.StoredKeyEncryption = .aes128Ctr) throws -> WalletCore.Wallet
  final public func addAccounts(wallet: WalletCore.Wallet, coins: [WalletCore.CoinType], password: Swift.String) throws -> [WalletCore.Account]
  final public func removeAccounts(wallet: WalletCore.Wallet, coins: [WalletCore.CoinType], password: Swift.String) throws -> WalletCore.Wallet
  final public func `import`(json: Foundation.Data, name: Swift.String, password: Swift.String, newPassword: Swift.String, coins: [WalletCore.CoinType]) throws -> WalletCore.Wallet
  final public func `import`(privateKey: WalletCore.PrivateKey, name: Swift.String, password: Swift.String, coin: WalletCore.CoinType, encryption: WalletCore.StoredKeyEncryption = .aes128Ctr) throws -> WalletCore.Wallet
  final public func `import`(mnemonic: Swift.String, name: Swift.String, encryptPassword: Swift.String, coins: [WalletCore.CoinType], encryption: WalletCore.StoredKeyEncryption = .aes128Ctr) throws -> WalletCore.Wallet
  final public func export(wallet: WalletCore.Wallet, password: Swift.String, newPassword: Swift.String, encryption: WalletCore.StoredKeyEncryption = .aes128Ctr) throws -> Foundation.Data
  final public func exportPrivateKey(wallet: WalletCore.Wallet, password: Swift.String) throws -> Foundation.Data
  final public func exportMnemonic(wallet: WalletCore.Wallet, password: Swift.String) throws -> Swift.String
  final public func update(wallet: WalletCore.Wallet, password: Swift.String, newPassword: Swift.String) throws
  final public func update(wallet: WalletCore.Wallet, password: Swift.String, newName: Swift.String, encryption: WalletCore.StoredKeyEncryption = .aes128Ctr) throws
  final public func delete(wallet: WalletCore.Wallet, password: Swift.String) throws
  final public func destroy() throws
  @objc deinit
}
public typealias LiquidStakingStatus = WalletCore.TW_LiquidStaking_Proto_Status
public typealias LiquidStakingAsset = WalletCore.TW_LiquidStaking_Proto_Asset
public typealias LiquidStakingStake = WalletCore.TW_LiquidStaking_Proto_Stake
public typealias LiquidStakingUnstake = WalletCore.TW_LiquidStaking_Proto_Unstake
public typealias LiquidStakingWithdraw = WalletCore.TW_LiquidStaking_Proto_Withdraw
public typealias LiquidStakingInput = WalletCore.TW_LiquidStaking_Proto_Input
public typealias LiquidStakingOutput = WalletCore.TW_LiquidStaking_Proto_Output
public typealias LiquidStakingCoin = WalletCore.TW_LiquidStaking_Proto_Coin
public typealias LiquidStakingBlockchain = WalletCore.TW_LiquidStaking_Proto_Blockchain
public typealias LiquidStakingProtocol = WalletCore.TW_LiquidStaking_Proto_Protocol
public typealias LiquidStakingStatusCode = WalletCore.TW_LiquidStaking_Proto_StatusCode
public enum TW_LiquidStaking_Proto_Coin : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case matic
  case atom
  case bnb
  case apt
  case eth
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_LiquidStaking_Proto_Coin : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_LiquidStaking_Proto_Coin]
  public typealias AllCases = [WalletCore.TW_LiquidStaking_Proto_Coin]
}
public enum TW_LiquidStaking_Proto_Blockchain : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case ethereum
  case polygon
  case stride
  case bnbBsc
  case aptos
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_LiquidStaking_Proto_Blockchain : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_LiquidStaking_Proto_Blockchain]
  public typealias AllCases = [WalletCore.TW_LiquidStaking_Proto_Blockchain]
}
public enum TW_LiquidStaking_Proto_Protocol : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case strader
  case stride
  case tortuga
  case lido
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_LiquidStaking_Proto_Protocol : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_LiquidStaking_Proto_Protocol]
  public typealias AllCases = [WalletCore.TW_LiquidStaking_Proto_Protocol]
}
public enum TW_LiquidStaking_Proto_StatusCode : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case ok
  case errorActionNotSet
  case errorTargetedBlockchainNotSupportedByProtocol
  case errorSmartContractAddressNotSet
  case errorInputProtoDeserialization
  case errorOperationNotSupportedByProtocol
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_LiquidStaking_Proto_StatusCode : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_LiquidStaking_Proto_StatusCode]
  public typealias AllCases = [WalletCore.TW_LiquidStaking_Proto_StatusCode]
}
public struct TW_LiquidStaking_Proto_Status {
  public var code: WalletCore.TW_LiquidStaking_Proto_StatusCode
  public var message: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_LiquidStaking_Proto_Asset {
  public var stakingToken: WalletCore.TW_LiquidStaking_Proto_Coin
  public var liquidToken: Swift.String
  public var denom: Swift.String
  public var fromAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_LiquidStaking_Proto_Stake {
  public var asset: WalletCore.TW_LiquidStaking_Proto_Asset {
    get
    set
  }
  public var hasAsset: Swift.Bool {
    get
  }
  public mutating func clearAsset()
  public var amount: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_LiquidStaking_Proto_Unstake {
  public var asset: WalletCore.TW_LiquidStaking_Proto_Asset {
    get
    set
  }
  public var hasAsset: Swift.Bool {
    get
  }
  public mutating func clearAsset()
  public var amount: Swift.String
  public var receiverAddress: Swift.String
  public var receiverChainID: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_LiquidStaking_Proto_Withdraw {
  public var asset: WalletCore.TW_LiquidStaking_Proto_Asset {
    get
    set
  }
  public var hasAsset: Swift.Bool {
    get
  }
  public mutating func clearAsset()
  public var amount: Swift.String
  public var idx: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_LiquidStaking_Proto_Input {
  public var action: WalletCore.TW_LiquidStaking_Proto_Input.OneOf_Action?
  public var stake: WalletCore.TW_LiquidStaking_Proto_Stake {
    get
    set
  }
  public var unstake: WalletCore.TW_LiquidStaking_Proto_Unstake {
    get
    set
  }
  public var withdraw: WalletCore.TW_LiquidStaking_Proto_Withdraw {
    get
    set
  }
  public var smartContractAddress: Swift.String
  public var `protocol`: WalletCore.TW_LiquidStaking_Proto_Protocol
  public var blockchain: WalletCore.TW_LiquidStaking_Proto_Blockchain
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Action : Swift.Equatable {
    case stake(WalletCore.TW_LiquidStaking_Proto_Stake)
    case unstake(WalletCore.TW_LiquidStaking_Proto_Unstake)
    case withdraw(WalletCore.TW_LiquidStaking_Proto_Withdraw)
    public static func == (a: WalletCore.TW_LiquidStaking_Proto_Input.OneOf_Action, b: WalletCore.TW_LiquidStaking_Proto_Input.OneOf_Action) -> Swift.Bool
  }
  public init()
}
public struct TW_LiquidStaking_Proto_Output {
  public var status: WalletCore.TW_LiquidStaking_Proto_Status {
    get
    set
  }
  public var hasStatus: Swift.Bool {
    get
  }
  public mutating func clearStatus()
  public var signingInputOneof: WalletCore.TW_LiquidStaking_Proto_Output.OneOf_SigningInputOneof? {
    get
    set
  }
  public var ethereum: WalletCore.TW_Ethereum_Proto_SigningInput {
    get
    set
  }
  public var cosmos: WalletCore.TW_Cosmos_Proto_SigningInput {
    get
    set
  }
  public var aptos: WalletCore.TW_Aptos_Proto_SigningInput {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_SigningInputOneof : Swift.Equatable {
    case ethereum(WalletCore.TW_Ethereum_Proto_SigningInput)
    case cosmos(WalletCore.TW_Cosmos_Proto_SigningInput)
    case aptos(WalletCore.TW_Aptos_Proto_SigningInput)
    public static func == (a: WalletCore.TW_LiquidStaking_Proto_Output.OneOf_SigningInputOneof, b: WalletCore.TW_LiquidStaking_Proto_Output.OneOf_SigningInputOneof) -> Swift.Bool
  }
  public init()
}
extension WalletCore.TW_LiquidStaking_Proto_Coin : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_LiquidStaking_Proto_Blockchain : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_LiquidStaking_Proto_Protocol : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_LiquidStaking_Proto_StatusCode : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_LiquidStaking_Proto_Status : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_LiquidStaking_Proto_Status, rhs: WalletCore.TW_LiquidStaking_Proto_Status) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_LiquidStaking_Proto_Asset : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_LiquidStaking_Proto_Asset, rhs: WalletCore.TW_LiquidStaking_Proto_Asset) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_LiquidStaking_Proto_Stake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_LiquidStaking_Proto_Stake, rhs: WalletCore.TW_LiquidStaking_Proto_Stake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_LiquidStaking_Proto_Unstake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_LiquidStaking_Proto_Unstake, rhs: WalletCore.TW_LiquidStaking_Proto_Unstake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_LiquidStaking_Proto_Withdraw : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_LiquidStaking_Proto_Withdraw, rhs: WalletCore.TW_LiquidStaking_Proto_Withdraw) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_LiquidStaking_Proto_Input : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_LiquidStaking_Proto_Input, rhs: WalletCore.TW_LiquidStaking_Proto_Input) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_LiquidStaking_Proto_Output : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_LiquidStaking_Proto_Output, rhs: WalletCore.TW_LiquidStaking_Proto_Output) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct LiquidStaking {
  public static func buildRequest(input: Foundation.Data) -> Foundation.Data
}
extension WalletCore.Mnemonic {
  public typealias ValidationResult = (word: Swift.String, index: Swift.Int)
  public static func validate(mnemonic: [Swift.String]) -> [WalletCore.Mnemonic.ValidationResult]
  public static func search(prefix: Swift.String) -> [Swift.String]
}
public struct Mnemonic {
  public static func isValid(mnemonic: Swift.String) -> Swift.Bool
  public static func isValidWord(word: Swift.String) -> Swift.Bool
  public static func suggest(prefix: Swift.String) -> Swift.String
}
public typealias MultiversXGenericAction = WalletCore.TW_MultiversX_Proto_GenericAction
public typealias MultiversXEGLDTransfer = WalletCore.TW_MultiversX_Proto_EGLDTransfer
public typealias MultiversXESDTTransfer = WalletCore.TW_MultiversX_Proto_ESDTTransfer
public typealias MultiversXESDTNFTTransfer = WalletCore.TW_MultiversX_Proto_ESDTNFTTransfer
public typealias MultiversXAccounts = WalletCore.TW_MultiversX_Proto_Accounts
public typealias MultiversXSigningInput = WalletCore.TW_MultiversX_Proto_SigningInput
public typealias MultiversXSigningOutput = WalletCore.TW_MultiversX_Proto_SigningOutput
public struct TW_MultiversX_Proto_GenericAction {
  public var accounts: WalletCore.TW_MultiversX_Proto_Accounts {
    get
    set
  }
  public var hasAccounts: Swift.Bool {
    get
  }
  public mutating func clearAccounts()
  public var value: Swift.String
  public var data: Swift.String
  public var version: Swift.UInt32
  public var options: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_MultiversX_Proto_EGLDTransfer {
  public var accounts: WalletCore.TW_MultiversX_Proto_Accounts {
    get
    set
  }
  public var hasAccounts: Swift.Bool {
    get
  }
  public mutating func clearAccounts()
  public var amount: Swift.String
  public var data: Swift.String
  public var version: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_MultiversX_Proto_ESDTTransfer {
  public var accounts: WalletCore.TW_MultiversX_Proto_Accounts {
    get
    set
  }
  public var hasAccounts: Swift.Bool {
    get
  }
  public mutating func clearAccounts()
  public var tokenIdentifier: Swift.String
  public var amount: Swift.String
  public var version: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_MultiversX_Proto_ESDTNFTTransfer {
  public var accounts: WalletCore.TW_MultiversX_Proto_Accounts {
    get
    set
  }
  public var hasAccounts: Swift.Bool {
    get
  }
  public mutating func clearAccounts()
  public var tokenCollection: Swift.String
  public var tokenNonce: Swift.UInt64
  public var amount: Swift.String
  public var version: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_MultiversX_Proto_Accounts {
  public var senderNonce: Swift.UInt64
  public var sender: Swift.String
  public var senderUsername: Swift.String
  public var receiver: Swift.String
  public var receiverUsername: Swift.String
  public var guardian: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_MultiversX_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var chainID: Swift.String
  public var gasPrice: Swift.UInt64
  public var gasLimit: Swift.UInt64
  public var messageOneof: WalletCore.TW_MultiversX_Proto_SigningInput.OneOf_MessageOneof?
  public var genericAction: WalletCore.TW_MultiversX_Proto_GenericAction {
    get
    set
  }
  public var egldTransfer: WalletCore.TW_MultiversX_Proto_EGLDTransfer {
    get
    set
  }
  public var esdtTransfer: WalletCore.TW_MultiversX_Proto_ESDTTransfer {
    get
    set
  }
  public var esdtnftTransfer: WalletCore.TW_MultiversX_Proto_ESDTNFTTransfer {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case genericAction(WalletCore.TW_MultiversX_Proto_GenericAction)
    case egldTransfer(WalletCore.TW_MultiversX_Proto_EGLDTransfer)
    case esdtTransfer(WalletCore.TW_MultiversX_Proto_ESDTTransfer)
    case esdtnftTransfer(WalletCore.TW_MultiversX_Proto_ESDTNFTTransfer)
    public static func == (a: WalletCore.TW_MultiversX_Proto_SigningInput.OneOf_MessageOneof, b: WalletCore.TW_MultiversX_Proto_SigningInput.OneOf_MessageOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_MultiversX_Proto_SigningOutput {
  public var encoded: Swift.String
  public var signature: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_MultiversX_Proto_GenericAction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_MultiversX_Proto_GenericAction, rhs: WalletCore.TW_MultiversX_Proto_GenericAction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_MultiversX_Proto_EGLDTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_MultiversX_Proto_EGLDTransfer, rhs: WalletCore.TW_MultiversX_Proto_EGLDTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_MultiversX_Proto_ESDTTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_MultiversX_Proto_ESDTTransfer, rhs: WalletCore.TW_MultiversX_Proto_ESDTTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_MultiversX_Proto_ESDTNFTTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_MultiversX_Proto_ESDTNFTTransfer, rhs: WalletCore.TW_MultiversX_Proto_ESDTNFTTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_MultiversX_Proto_Accounts : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_MultiversX_Proto_Accounts, rhs: WalletCore.TW_MultiversX_Proto_Accounts) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_MultiversX_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_MultiversX_Proto_SigningInput, rhs: WalletCore.TW_MultiversX_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_MultiversX_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_MultiversX_Proto_SigningOutput, rhs: WalletCore.TW_MultiversX_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias NEARPublicKey = WalletCore.TW_NEAR_Proto_PublicKey
public typealias NEARFunctionCallPermission = WalletCore.TW_NEAR_Proto_FunctionCallPermission
public typealias NEARFullAccessPermission = WalletCore.TW_NEAR_Proto_FullAccessPermission
public typealias NEARAccessKey = WalletCore.TW_NEAR_Proto_AccessKey
public typealias NEARCreateAccount = WalletCore.TW_NEAR_Proto_CreateAccount
public typealias NEARDeployContract = WalletCore.TW_NEAR_Proto_DeployContract
public typealias NEARFunctionCall = WalletCore.TW_NEAR_Proto_FunctionCall
public typealias NEARTransfer = WalletCore.TW_NEAR_Proto_Transfer
public typealias NEARStake = WalletCore.TW_NEAR_Proto_Stake
public typealias NEARAddKey = WalletCore.TW_NEAR_Proto_AddKey
public typealias NEARDeleteKey = WalletCore.TW_NEAR_Proto_DeleteKey
public typealias NEARDeleteAccount = WalletCore.TW_NEAR_Proto_DeleteAccount
public typealias NEARTokenTransfer = WalletCore.TW_NEAR_Proto_TokenTransfer
public typealias NEARAction = WalletCore.TW_NEAR_Proto_Action
public typealias NEARSigningInput = WalletCore.TW_NEAR_Proto_SigningInput
public typealias NEARSigningOutput = WalletCore.TW_NEAR_Proto_SigningOutput
public struct TW_NEAR_Proto_PublicKey {
  public var keyType: Swift.UInt32
  public var data: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_FunctionCallPermission {
  public var allowance: Foundation.Data
  public var receiverID: Swift.String
  public var methodNames: [Swift.String]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_FullAccessPermission {
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_AccessKey {
  public var nonce: Swift.UInt64
  public var permission: WalletCore.TW_NEAR_Proto_AccessKey.OneOf_Permission?
  public var functionCall: WalletCore.TW_NEAR_Proto_FunctionCallPermission {
    get
    set
  }
  public var fullAccess: WalletCore.TW_NEAR_Proto_FullAccessPermission {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Permission : Swift.Equatable {
    case functionCall(WalletCore.TW_NEAR_Proto_FunctionCallPermission)
    case fullAccess(WalletCore.TW_NEAR_Proto_FullAccessPermission)
    public static func == (a: WalletCore.TW_NEAR_Proto_AccessKey.OneOf_Permission, b: WalletCore.TW_NEAR_Proto_AccessKey.OneOf_Permission) -> Swift.Bool
  }
  public init()
}
public struct TW_NEAR_Proto_CreateAccount {
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_DeployContract {
  public var code: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_FunctionCall {
  public var methodName: Swift.String
  public var args: Foundation.Data
  public var gas: Swift.UInt64
  public var deposit: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_Transfer {
  public var deposit: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_Stake {
  public var stake: Foundation.Data
  public var publicKey: WalletCore.TW_NEAR_Proto_PublicKey {
    get
    set
  }
  public var hasPublicKey: Swift.Bool {
    get
  }
  public mutating func clearPublicKey()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_AddKey {
  public var publicKey: WalletCore.TW_NEAR_Proto_PublicKey {
    get
    set
  }
  public var hasPublicKey: Swift.Bool {
    get
  }
  public mutating func clearPublicKey()
  public var accessKey: WalletCore.TW_NEAR_Proto_AccessKey {
    get
    set
  }
  public var hasAccessKey: Swift.Bool {
    get
  }
  public mutating func clearAccessKey()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_DeleteKey {
  public var publicKey: WalletCore.TW_NEAR_Proto_PublicKey {
    get
    set
  }
  public var hasPublicKey: Swift.Bool {
    get
  }
  public mutating func clearPublicKey()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_DeleteAccount {
  public var beneficiaryID: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_TokenTransfer {
  public var tokenAmount: Swift.String
  public var receiverID: Swift.String
  public var gas: Swift.UInt64
  public var deposit: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_Action {
  public var payload: WalletCore.TW_NEAR_Proto_Action.OneOf_Payload?
  public var createAccount: WalletCore.TW_NEAR_Proto_CreateAccount {
    get
    set
  }
  public var deployContract: WalletCore.TW_NEAR_Proto_DeployContract {
    get
    set
  }
  public var functionCall: WalletCore.TW_NEAR_Proto_FunctionCall {
    get
    set
  }
  public var transfer: WalletCore.TW_NEAR_Proto_Transfer {
    get
    set
  }
  public var stake: WalletCore.TW_NEAR_Proto_Stake {
    get
    set
  }
  public var addKey: WalletCore.TW_NEAR_Proto_AddKey {
    get
    set
  }
  public var deleteKey: WalletCore.TW_NEAR_Proto_DeleteKey {
    get
    set
  }
  public var deleteAccount: WalletCore.TW_NEAR_Proto_DeleteAccount {
    get
    set
  }
  public var tokenTransfer: WalletCore.TW_NEAR_Proto_TokenTransfer {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Payload : Swift.Equatable {
    case createAccount(WalletCore.TW_NEAR_Proto_CreateAccount)
    case deployContract(WalletCore.TW_NEAR_Proto_DeployContract)
    case functionCall(WalletCore.TW_NEAR_Proto_FunctionCall)
    case transfer(WalletCore.TW_NEAR_Proto_Transfer)
    case stake(WalletCore.TW_NEAR_Proto_Stake)
    case addKey(WalletCore.TW_NEAR_Proto_AddKey)
    case deleteKey(WalletCore.TW_NEAR_Proto_DeleteKey)
    case deleteAccount(WalletCore.TW_NEAR_Proto_DeleteAccount)
    case tokenTransfer(WalletCore.TW_NEAR_Proto_TokenTransfer)
    public static func == (a: WalletCore.TW_NEAR_Proto_Action.OneOf_Payload, b: WalletCore.TW_NEAR_Proto_Action.OneOf_Payload) -> Swift.Bool
  }
  public init()
}
public struct TW_NEAR_Proto_SigningInput {
  public var signerID: Swift.String
  public var nonce: Swift.UInt64
  public var receiverID: Swift.String
  public var blockHash: Foundation.Data
  public var actions: [WalletCore.TW_NEAR_Proto_Action]
  public var privateKey: Foundation.Data
  public var publicKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEAR_Proto_SigningOutput {
  public var signedTransaction: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var hash: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_NEAR_Proto_PublicKey : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_PublicKey, rhs: WalletCore.TW_NEAR_Proto_PublicKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_FunctionCallPermission : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_FunctionCallPermission, rhs: WalletCore.TW_NEAR_Proto_FunctionCallPermission) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_FullAccessPermission : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_FullAccessPermission, rhs: WalletCore.TW_NEAR_Proto_FullAccessPermission) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_AccessKey : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_AccessKey, rhs: WalletCore.TW_NEAR_Proto_AccessKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_CreateAccount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_CreateAccount, rhs: WalletCore.TW_NEAR_Proto_CreateAccount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_DeployContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_DeployContract, rhs: WalletCore.TW_NEAR_Proto_DeployContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_FunctionCall : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_FunctionCall, rhs: WalletCore.TW_NEAR_Proto_FunctionCall) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_Transfer, rhs: WalletCore.TW_NEAR_Proto_Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_Stake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_Stake, rhs: WalletCore.TW_NEAR_Proto_Stake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_AddKey : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_AddKey, rhs: WalletCore.TW_NEAR_Proto_AddKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_DeleteKey : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_DeleteKey, rhs: WalletCore.TW_NEAR_Proto_DeleteKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_DeleteAccount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_DeleteAccount, rhs: WalletCore.TW_NEAR_Proto_DeleteAccount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_TokenTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_TokenTransfer, rhs: WalletCore.TW_NEAR_Proto_TokenTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_Action : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_Action, rhs: WalletCore.TW_NEAR_Proto_Action) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_SigningInput, rhs: WalletCore.TW_NEAR_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEAR_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEAR_Proto_SigningOutput, rhs: WalletCore.TW_NEAR_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class NEARAccount {
  final public var description: Swift.String {
    get
  }
  public init?(string: Swift.String)
  @objc deinit
}
public typealias NEOTransactionInput = WalletCore.TW_NEO_Proto_TransactionInput
public typealias NEOOutputAddress = WalletCore.TW_NEO_Proto_OutputAddress
public typealias NEOTransactionOutput = WalletCore.TW_NEO_Proto_TransactionOutput
public typealias NEOTransaction = WalletCore.TW_NEO_Proto_Transaction
public typealias NEOSigningInput = WalletCore.TW_NEO_Proto_SigningInput
public typealias NEOSigningOutput = WalletCore.TW_NEO_Proto_SigningOutput
public typealias NEOTransactionOutputPlan = WalletCore.TW_NEO_Proto_TransactionOutputPlan
public typealias NEOTransactionAttributePlan = WalletCore.TW_NEO_Proto_TransactionAttributePlan
public typealias NEOTransactionPlan = WalletCore.TW_NEO_Proto_TransactionPlan
public struct TW_NEO_Proto_TransactionInput {
  public var prevHash: Foundation.Data
  public var prevIndex: Swift.UInt32
  public var value: Swift.Int64
  public var assetID: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEO_Proto_OutputAddress {
  public var amount: Swift.Int64
  public var toAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEO_Proto_TransactionOutput {
  public var assetID: Swift.String
  public var amount: Swift.Int64
  public var toAddress: Swift.String
  public var changeAddress: Swift.String
  public var extraOutputs: [WalletCore.TW_NEO_Proto_OutputAddress]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEO_Proto_Transaction {
  public var transactionOneof: WalletCore.TW_NEO_Proto_Transaction.OneOf_TransactionOneof?
  public var nep5Transfer: WalletCore.TW_NEO_Proto_Transaction.Nep5Transfer {
    get
    set
  }
  public var invocationGeneric: WalletCore.TW_NEO_Proto_Transaction.InvocationGeneric {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_TransactionOneof : Swift.Equatable {
    case nep5Transfer(WalletCore.TW_NEO_Proto_Transaction.Nep5Transfer)
    case invocationGeneric(WalletCore.TW_NEO_Proto_Transaction.InvocationGeneric)
    public static func == (a: WalletCore.TW_NEO_Proto_Transaction.OneOf_TransactionOneof, b: WalletCore.TW_NEO_Proto_Transaction.OneOf_TransactionOneof) -> Swift.Bool
  }
  public struct Nep5Transfer {
    public var assetID: Swift.String
    public var from: Swift.String
    public var to: Swift.String
    public var amount: Foundation.Data
    public var scriptWithRet: Swift.Bool
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct InvocationGeneric {
    public var gas: Swift.UInt64
    public var script: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_NEO_Proto_SigningInput {
  public var inputs: [WalletCore.TW_NEO_Proto_TransactionInput]
  public var outputs: [WalletCore.TW_NEO_Proto_TransactionOutput]
  public var privateKey: Foundation.Data
  public var fee: Swift.Int64
  public var gasAssetID: Swift.String
  public var gasChangeAddress: Swift.String
  public var plan: WalletCore.TW_NEO_Proto_TransactionPlan {
    get
    set
  }
  public var hasPlan: Swift.Bool {
    get
  }
  public mutating func clearPlan()
  public var transaction: WalletCore.TW_NEO_Proto_Transaction {
    get
    set
  }
  public var hasTransaction: Swift.Bool {
    get
  }
  public mutating func clearTransaction()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEO_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEO_Proto_TransactionOutputPlan {
  public var amount: Swift.Int64
  public var availableAmount: Swift.Int64
  public var change: Swift.Int64
  public var assetID: Swift.String
  public var toAddress: Swift.String
  public var changeAddress: Swift.String
  public var extraOutputs: [WalletCore.TW_NEO_Proto_OutputAddress]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEO_Proto_TransactionAttributePlan {
  public var usage: Swift.Int32
  public var data: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NEO_Proto_TransactionPlan {
  public var outputs: [WalletCore.TW_NEO_Proto_TransactionOutputPlan]
  public var inputs: [WalletCore.TW_NEO_Proto_TransactionInput]
  public var fee: Swift.Int64
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var attributes: [WalletCore.TW_NEO_Proto_TransactionAttributePlan]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_NEO_Proto_TransactionInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_TransactionInput, rhs: WalletCore.TW_NEO_Proto_TransactionInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEO_Proto_OutputAddress : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_OutputAddress, rhs: WalletCore.TW_NEO_Proto_OutputAddress) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEO_Proto_TransactionOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_TransactionOutput, rhs: WalletCore.TW_NEO_Proto_TransactionOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEO_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_Transaction, rhs: WalletCore.TW_NEO_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEO_Proto_Transaction.Nep5Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_Transaction.Nep5Transfer, rhs: WalletCore.TW_NEO_Proto_Transaction.Nep5Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEO_Proto_Transaction.InvocationGeneric : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_Transaction.InvocationGeneric, rhs: WalletCore.TW_NEO_Proto_Transaction.InvocationGeneric) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEO_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_SigningInput, rhs: WalletCore.TW_NEO_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEO_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_SigningOutput, rhs: WalletCore.TW_NEO_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEO_Proto_TransactionOutputPlan : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_TransactionOutputPlan, rhs: WalletCore.TW_NEO_Proto_TransactionOutputPlan) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEO_Proto_TransactionAttributePlan : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_TransactionAttributePlan, rhs: WalletCore.TW_NEO_Proto_TransactionAttributePlan) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NEO_Proto_TransactionPlan : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NEO_Proto_TransactionPlan, rhs: WalletCore.TW_NEO_Proto_TransactionPlan) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias NULSTransactionCoinFrom = WalletCore.TW_NULS_Proto_TransactionCoinFrom
public typealias NULSTransactionCoinTo = WalletCore.TW_NULS_Proto_TransactionCoinTo
public typealias NULSSignature = WalletCore.TW_NULS_Proto_Signature
public typealias NULSTransaction = WalletCore.TW_NULS_Proto_Transaction
public typealias NULSSigningInput = WalletCore.TW_NULS_Proto_SigningInput
public typealias NULSSigningOutput = WalletCore.TW_NULS_Proto_SigningOutput
public struct TW_NULS_Proto_TransactionCoinFrom {
  public var fromAddress: Swift.String
  public var assetsChainid: Swift.UInt32
  public var assetsID: Swift.UInt32
  public var idAmount: Foundation.Data
  public var nonce: Foundation.Data
  public var locked: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NULS_Proto_TransactionCoinTo {
  public var toAddress: Swift.String
  public var assetsChainid: Swift.UInt32
  public var assetsID: Swift.UInt32
  public var idAmount: Foundation.Data
  public var lockTime: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NULS_Proto_Signature {
  public var pkeyLen: Swift.UInt32
  public var publicKey: Foundation.Data
  public var sigLen: Swift.UInt32
  public var signature: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NULS_Proto_Transaction {
  public var type: Swift.UInt32
  public var timestamp: Swift.UInt32
  public var remark: Swift.String
  public var txData: Foundation.Data
  public var input: [WalletCore.TW_NULS_Proto_TransactionCoinFrom]
  public var output: [WalletCore.TW_NULS_Proto_TransactionCoinTo]
  public var txSigs: WalletCore.TW_NULS_Proto_Signature {
    get
    set
  }
  public var hasTxSigs: Swift.Bool {
    get
  }
  public mutating func clearTxSigs()
  public var hash: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NULS_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var from: Swift.String
  public var to: Swift.String
  public var amount: Foundation.Data
  public var chainID: Swift.UInt32
  public var idassetsID: Swift.UInt32
  public var nonce: Foundation.Data
  public var remark: Swift.String
  public var balance: Foundation.Data
  public var timestamp: Swift.UInt32
  public var feePayer: Swift.String
  public var feePayerNonce: Foundation.Data
  public var feePayerPrivateKey: Foundation.Data
  public var feePayerBalance: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_NULS_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_NULS_Proto_TransactionCoinFrom : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NULS_Proto_TransactionCoinFrom, rhs: WalletCore.TW_NULS_Proto_TransactionCoinFrom) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NULS_Proto_TransactionCoinTo : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NULS_Proto_TransactionCoinTo, rhs: WalletCore.TW_NULS_Proto_TransactionCoinTo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NULS_Proto_Signature : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NULS_Proto_Signature, rhs: WalletCore.TW_NULS_Proto_Signature) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NULS_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NULS_Proto_Transaction, rhs: WalletCore.TW_NULS_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NULS_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NULS_Proto_SigningInput, rhs: WalletCore.TW_NULS_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_NULS_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_NULS_Proto_SigningOutput, rhs: WalletCore.TW_NULS_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias NanoSigningInput = WalletCore.TW_Nano_Proto_SigningInput
public typealias NanoSigningOutput = WalletCore.TW_Nano_Proto_SigningOutput
public struct TW_Nano_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var parentBlock: Foundation.Data
  public var linkOneof: WalletCore.TW_Nano_Proto_SigningInput.OneOf_LinkOneof?
  public var linkBlock: Foundation.Data {
    get
    set
  }
  public var linkRecipient: Swift.String {
    get
    set
  }
  public var representative: Swift.String
  public var balance: Swift.String
  public var work: Swift.String
  public var publicKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_LinkOneof : Swift.Equatable {
    case linkBlock(Foundation.Data)
    case linkRecipient(Swift.String)
    public static func == (a: WalletCore.TW_Nano_Proto_SigningInput.OneOf_LinkOneof, b: WalletCore.TW_Nano_Proto_SigningInput.OneOf_LinkOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Nano_Proto_SigningOutput {
  public var signature: Foundation.Data
  public var blockHash: Foundation.Data
  public var json: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Nano_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nano_Proto_SigningInput, rhs: WalletCore.TW_Nano_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nano_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nano_Proto_SigningOutput, rhs: WalletCore.TW_Nano_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias NebulasSigningInput = WalletCore.TW_Nebulas_Proto_SigningInput
public typealias NebulasSigningOutput = WalletCore.TW_Nebulas_Proto_SigningOutput
public typealias NebulasData = WalletCore.TW_Nebulas_Proto_Data
public typealias NebulasRawTransaction = WalletCore.TW_Nebulas_Proto_RawTransaction
public struct TW_Nebulas_Proto_SigningInput {
  public var fromAddress: Swift.String
  public var chainID: Foundation.Data
  public var nonce: Foundation.Data
  public var gasPrice: Foundation.Data
  public var gasLimit: Foundation.Data
  public var toAddress: Swift.String
  public var amount: Foundation.Data
  public var timestamp: Foundation.Data
  public var payload: Swift.String
  public var privateKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nebulas_Proto_SigningOutput {
  public var algorithm: Swift.UInt32
  public var signature: Foundation.Data
  public var raw: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nebulas_Proto_Data {
  public var type: Swift.String
  public var payload: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nebulas_Proto_RawTransaction {
  public var hash: Foundation.Data
  public var from: Foundation.Data
  public var to: Foundation.Data
  public var value: Foundation.Data
  public var nonce: Swift.UInt64
  public var timestamp: Swift.Int64
  public var data: WalletCore.TW_Nebulas_Proto_Data {
    get
    set
  }
  public var hasData: Swift.Bool {
    get
  }
  public mutating func clearData()
  public var chainID: Swift.UInt32
  public var gasPrice: Foundation.Data
  public var gasLimit: Foundation.Data
  public var alg: Swift.UInt32
  public var sign: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Nebulas_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nebulas_Proto_SigningInput, rhs: WalletCore.TW_Nebulas_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nebulas_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nebulas_Proto_SigningOutput, rhs: WalletCore.TW_Nebulas_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nebulas_Proto_Data : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nebulas_Proto_Data, rhs: WalletCore.TW_Nebulas_Proto_Data) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nebulas_Proto_RawTransaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nebulas_Proto_RawTransaction, rhs: WalletCore.TW_Nebulas_Proto_RawTransaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias NervosTransactionPlan = WalletCore.TW_Nervos_Proto_TransactionPlan
public typealias NervosCellDep = WalletCore.TW_Nervos_Proto_CellDep
public typealias NervosOutPoint = WalletCore.TW_Nervos_Proto_OutPoint
public typealias NervosCellOutput = WalletCore.TW_Nervos_Proto_CellOutput
public typealias NervosScript = WalletCore.TW_Nervos_Proto_Script
public typealias NervosNativeTransfer = WalletCore.TW_Nervos_Proto_NativeTransfer
public typealias NervosSudtTransfer = WalletCore.TW_Nervos_Proto_SudtTransfer
public typealias NervosDaoDeposit = WalletCore.TW_Nervos_Proto_DaoDeposit
public typealias NervosDaoWithdrawPhase1 = WalletCore.TW_Nervos_Proto_DaoWithdrawPhase1
public typealias NervosDaoWithdrawPhase2 = WalletCore.TW_Nervos_Proto_DaoWithdrawPhase2
public typealias NervosSigningInput = WalletCore.TW_Nervos_Proto_SigningInput
public typealias NervosCell = WalletCore.TW_Nervos_Proto_Cell
public typealias NervosSigningOutput = WalletCore.TW_Nervos_Proto_SigningOutput
public struct TW_Nervos_Proto_TransactionPlan {
  public var cellDeps: [WalletCore.TW_Nervos_Proto_CellDep]
  public var headerDeps: [Foundation.Data]
  public var selectedCells: [WalletCore.TW_Nervos_Proto_Cell]
  public var outputs: [WalletCore.TW_Nervos_Proto_CellOutput]
  public var outputsData: [Foundation.Data]
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nervos_Proto_CellDep {
  public var depType: Swift.String
  public var outPoint: WalletCore.TW_Nervos_Proto_OutPoint {
    get
    set
  }
  public var hasOutPoint: Swift.Bool {
    get
  }
  public mutating func clearOutPoint()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nervos_Proto_OutPoint {
  public var txHash: Foundation.Data
  public var index: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nervos_Proto_CellOutput {
  public var capacity: Swift.UInt64
  public var lock: WalletCore.TW_Nervos_Proto_Script {
    get
    set
  }
  public var hasLock: Swift.Bool {
    get
  }
  public mutating func clearLock()
  public var type: WalletCore.TW_Nervos_Proto_Script {
    get
    set
  }
  public var hasType: Swift.Bool {
    get
  }
  public mutating func clearType()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nervos_Proto_Script {
  public var codeHash: Foundation.Data
  public var hashType: Swift.String
  public var args: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nervos_Proto_NativeTransfer {
  public var toAddress: Swift.String
  public var changeAddress: Swift.String
  public var amount: Swift.UInt64
  public var useMaxAmount: Swift.Bool
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nervos_Proto_SudtTransfer {
  public var toAddress: Swift.String
  public var changeAddress: Swift.String
  public var sudtAddress: Foundation.Data
  public var amount: Swift.String
  public var useMaxAmount: Swift.Bool
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nervos_Proto_DaoDeposit {
  public var toAddress: Swift.String
  public var changeAddress: Swift.String
  public var amount: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nervos_Proto_DaoWithdrawPhase1 {
  public var depositCell: WalletCore.TW_Nervos_Proto_Cell {
    get
    set
  }
  public var hasDepositCell: Swift.Bool {
    get
  }
  public mutating func clearDepositCell()
  public var changeAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nervos_Proto_DaoWithdrawPhase2 {
  public var depositCell: WalletCore.TW_Nervos_Proto_Cell {
    get
    set
  }
  public var hasDepositCell: Swift.Bool {
    get
  }
  public mutating func clearDepositCell()
  public var withdrawingCell: WalletCore.TW_Nervos_Proto_Cell {
    get
    set
  }
  public var hasWithdrawingCell: Swift.Bool {
    get
  }
  public mutating func clearWithdrawingCell()
  public var amount: Swift.UInt64 {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nervos_Proto_SigningInput {
  public var byteFee: Swift.UInt64 {
    get
    set
  }
  public var privateKey: [Foundation.Data] {
    get
    set
  }
  public var cell: [WalletCore.TW_Nervos_Proto_Cell] {
    get
    set
  }
  public var plan: WalletCore.TW_Nervos_Proto_TransactionPlan {
    get
    set
  }
  public var hasPlan: Swift.Bool {
    get
  }
  public mutating func clearPlan()
  public var operationOneof: WalletCore.TW_Nervos_Proto_SigningInput.OneOf_OperationOneof? {
    get
    set
  }
  public var nativeTransfer: WalletCore.TW_Nervos_Proto_NativeTransfer {
    get
    set
  }
  public var sudtTransfer: WalletCore.TW_Nervos_Proto_SudtTransfer {
    get
    set
  }
  public var daoDeposit: WalletCore.TW_Nervos_Proto_DaoDeposit {
    get
    set
  }
  public var daoWithdrawPhase1: WalletCore.TW_Nervos_Proto_DaoWithdrawPhase1 {
    get
    set
  }
  public var daoWithdrawPhase2: WalletCore.TW_Nervos_Proto_DaoWithdrawPhase2 {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_OperationOneof : Swift.Equatable {
    case nativeTransfer(WalletCore.TW_Nervos_Proto_NativeTransfer)
    case sudtTransfer(WalletCore.TW_Nervos_Proto_SudtTransfer)
    case daoDeposit(WalletCore.TW_Nervos_Proto_DaoDeposit)
    case daoWithdrawPhase1(WalletCore.TW_Nervos_Proto_DaoWithdrawPhase1)
    case daoWithdrawPhase2(WalletCore.TW_Nervos_Proto_DaoWithdrawPhase2)
    public static func == (a: WalletCore.TW_Nervos_Proto_SigningInput.OneOf_OperationOneof, b: WalletCore.TW_Nervos_Proto_SigningInput.OneOf_OperationOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Nervos_Proto_Cell {
  public var outPoint: WalletCore.TW_Nervos_Proto_OutPoint {
    get
    set
  }
  public var hasOutPoint: Swift.Bool {
    get
  }
  public mutating func clearOutPoint()
  public var capacity: Swift.UInt64
  public var lock: WalletCore.TW_Nervos_Proto_Script {
    get
    set
  }
  public var hasLock: Swift.Bool {
    get
  }
  public mutating func clearLock()
  public var type: WalletCore.TW_Nervos_Proto_Script {
    get
    set
  }
  public var hasType: Swift.Bool {
    get
  }
  public mutating func clearType()
  public var data: Foundation.Data
  public var blockNumber: Swift.UInt64
  public var blockHash: Foundation.Data
  public var since: Swift.UInt64
  public var inputType: Foundation.Data
  public var outputType: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nervos_Proto_SigningOutput {
  public var transactionJson: Swift.String
  public var transactionID: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Nervos_Proto_TransactionPlan : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nervos_Proto_TransactionPlan, rhs: WalletCore.TW_Nervos_Proto_TransactionPlan) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nervos_Proto_CellDep : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nervos_Proto_CellDep, rhs: WalletCore.TW_Nervos_Proto_CellDep) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nervos_Proto_OutPoint : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nervos_Proto_OutPoint, rhs: WalletCore.TW_Nervos_Proto_OutPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nervos_Proto_CellOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nervos_Proto_CellOutput, rhs: WalletCore.TW_Nervos_Proto_CellOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nervos_Proto_Script : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nervos_Proto_Script, rhs: WalletCore.TW_Nervos_Proto_Script) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nervos_Proto_NativeTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nervos_Proto_NativeTransfer, rhs: WalletCore.TW_Nervos_Proto_NativeTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nervos_Proto_SudtTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nervos_Proto_SudtTransfer, rhs: WalletCore.TW_Nervos_Proto_SudtTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nervos_Proto_DaoDeposit : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nervos_Proto_DaoDeposit, rhs: WalletCore.TW_Nervos_Proto_DaoDeposit) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nervos_Proto_DaoWithdrawPhase1 : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nervos_Proto_DaoWithdrawPhase1, rhs: WalletCore.TW_Nervos_Proto_DaoWithdrawPhase1) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nervos_Proto_DaoWithdrawPhase2 : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nervos_Proto_DaoWithdrawPhase2, rhs: WalletCore.TW_Nervos_Proto_DaoWithdrawPhase2) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nervos_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nervos_Proto_SigningInput, rhs: WalletCore.TW_Nervos_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nervos_Proto_Cell : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nervos_Proto_Cell, rhs: WalletCore.TW_Nervos_Proto_Cell) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nervos_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nervos_Proto_SigningOutput, rhs: WalletCore.TW_Nervos_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class NervosAddress : WalletCore.Address {
  public static func == (lhs: WalletCore.NervosAddress, rhs: WalletCore.NervosAddress) -> Swift.Bool
  public static func isValidString(string: Swift.String) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  final public var codeHash: Foundation.Data {
    get
  }
  final public var hashType: Swift.String {
    get
  }
  final public var args: Foundation.Data {
    get
  }
  public init?(string: Swift.String)
  @objc deinit
}
public typealias NimiqSigningInput = WalletCore.TW_Nimiq_Proto_SigningInput
public typealias NimiqSigningOutput = WalletCore.TW_Nimiq_Proto_SigningOutput
public struct TW_Nimiq_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var destination: Swift.String
  public var value: Swift.UInt64
  public var fee: Swift.UInt64
  public var validityStartHeight: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Nimiq_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Nimiq_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nimiq_Proto_SigningInput, rhs: WalletCore.TW_Nimiq_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Nimiq_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Nimiq_Proto_SigningOutput, rhs: WalletCore.TW_Nimiq_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias OasisTransferMessage = WalletCore.TW_Oasis_Proto_TransferMessage
public typealias OasisEscrowMessage = WalletCore.TW_Oasis_Proto_EscrowMessage
public typealias OasisReclaimEscrowMessage = WalletCore.TW_Oasis_Proto_ReclaimEscrowMessage
public typealias OasisSigningInput = WalletCore.TW_Oasis_Proto_SigningInput
public typealias OasisSigningOutput = WalletCore.TW_Oasis_Proto_SigningOutput
public struct TW_Oasis_Proto_TransferMessage {
  public var to: Swift.String
  public var gasPrice: Swift.UInt64
  public var gasAmount: Swift.String
  public var amount: Swift.String
  public var nonce: Swift.UInt64
  public var context: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Oasis_Proto_EscrowMessage {
  public var gasPrice: Swift.UInt64
  public var gasAmount: Swift.String
  public var nonce: Swift.UInt64
  public var account: Swift.String
  public var amount: Swift.String
  public var context: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Oasis_Proto_ReclaimEscrowMessage {
  public var gasPrice: Swift.UInt64
  public var gasAmount: Swift.String
  public var nonce: Swift.UInt64
  public var account: Swift.String
  public var shares: Swift.String
  public var context: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Oasis_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var message: WalletCore.TW_Oasis_Proto_SigningInput.OneOf_Message?
  public var transfer: WalletCore.TW_Oasis_Proto_TransferMessage {
    get
    set
  }
  public var escrow: WalletCore.TW_Oasis_Proto_EscrowMessage {
    get
    set
  }
  public var reclaimEscrow: WalletCore.TW_Oasis_Proto_ReclaimEscrowMessage {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Message : Swift.Equatable {
    case transfer(WalletCore.TW_Oasis_Proto_TransferMessage)
    case escrow(WalletCore.TW_Oasis_Proto_EscrowMessage)
    case reclaimEscrow(WalletCore.TW_Oasis_Proto_ReclaimEscrowMessage)
    public static func == (a: WalletCore.TW_Oasis_Proto_SigningInput.OneOf_Message, b: WalletCore.TW_Oasis_Proto_SigningInput.OneOf_Message) -> Swift.Bool
  }
  public init()
}
public struct TW_Oasis_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Oasis_Proto_TransferMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Oasis_Proto_TransferMessage, rhs: WalletCore.TW_Oasis_Proto_TransferMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Oasis_Proto_EscrowMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Oasis_Proto_EscrowMessage, rhs: WalletCore.TW_Oasis_Proto_EscrowMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Oasis_Proto_ReclaimEscrowMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Oasis_Proto_ReclaimEscrowMessage, rhs: WalletCore.TW_Oasis_Proto_ReclaimEscrowMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Oasis_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Oasis_Proto_SigningInput, rhs: WalletCore.TW_Oasis_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Oasis_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Oasis_Proto_SigningOutput, rhs: WalletCore.TW_Oasis_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias OntologySigningInput = WalletCore.TW_Ontology_Proto_SigningInput
public typealias OntologySigningOutput = WalletCore.TW_Ontology_Proto_SigningOutput
public struct TW_Ontology_Proto_SigningInput {
  public var contract: Swift.String
  public var method: Swift.String
  public var ownerPrivateKey: Foundation.Data
  public var toAddress: Swift.String
  public var amount: Swift.UInt64
  public var payerPrivateKey: Foundation.Data
  public var gasPrice: Swift.UInt64
  public var gasLimit: Swift.UInt64
  public var queryAddress: Swift.String
  public var nonce: Swift.UInt32
  public var ownerAddress: Swift.String
  public var payerAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ontology_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Ontology_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ontology_Proto_SigningInput, rhs: WalletCore.TW_Ontology_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ontology_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ontology_Proto_SigningOutput, rhs: WalletCore.TW_Ontology_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct PBKDF2 {
  public static func hmacSha256(password: Foundation.Data, salt: Foundation.Data, iterations: Swift.UInt32, dkLen: Swift.UInt32) -> Foundation.Data?
  public static func hmacSha512(password: Foundation.Data, salt: Foundation.Data, iterations: Swift.UInt32, dkLen: Swift.UInt32) -> Foundation.Data?
}
public typealias PolkadotEra = WalletCore.TW_Polkadot_Proto_Era
public typealias PolkadotCustomCallIndices = WalletCore.TW_Polkadot_Proto_CustomCallIndices
public typealias PolkadotCallIndices = WalletCore.TW_Polkadot_Proto_CallIndices
public typealias PolkadotBalance = WalletCore.TW_Polkadot_Proto_Balance
public typealias PolkadotStaking = WalletCore.TW_Polkadot_Proto_Staking
public typealias PolkadotIdentity = WalletCore.TW_Polkadot_Proto_Identity
public typealias PolkadotPolymeshCall = WalletCore.TW_Polkadot_Proto_PolymeshCall
public typealias PolkadotSigningInput = WalletCore.TW_Polkadot_Proto_SigningInput
public typealias PolkadotSigningOutput = WalletCore.TW_Polkadot_Proto_SigningOutput
public typealias PolkadotRewardDestination = WalletCore.TW_Polkadot_Proto_RewardDestination
public enum TW_Polkadot_Proto_RewardDestination : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case staked
  case stash
  case controller
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_RewardDestination : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Polkadot_Proto_RewardDestination]
  public typealias AllCases = [WalletCore.TW_Polkadot_Proto_RewardDestination]
}
public struct TW_Polkadot_Proto_Era {
  public var blockNumber: Swift.UInt64
  public var period: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Polkadot_Proto_CustomCallIndices {
  public var moduleIndex: Swift.Int32
  public var methodIndex: Swift.Int32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Polkadot_Proto_CallIndices {
  public var variant: WalletCore.TW_Polkadot_Proto_CallIndices.OneOf_Variant?
  public var custom: WalletCore.TW_Polkadot_Proto_CustomCallIndices {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Variant : Swift.Equatable {
    case custom(WalletCore.TW_Polkadot_Proto_CustomCallIndices)
    public static func == (a: WalletCore.TW_Polkadot_Proto_CallIndices.OneOf_Variant, b: WalletCore.TW_Polkadot_Proto_CallIndices.OneOf_Variant) -> Swift.Bool
  }
  public init()
}
public struct TW_Polkadot_Proto_Balance {
  public var messageOneof: WalletCore.TW_Polkadot_Proto_Balance.OneOf_MessageOneof?
  public var transfer: WalletCore.TW_Polkadot_Proto_Balance.Transfer {
    get
    set
  }
  public var batchTransfer: WalletCore.TW_Polkadot_Proto_Balance.BatchTransfer {
    get
    set
  }
  public var assetTransfer: WalletCore.TW_Polkadot_Proto_Balance.AssetTransfer {
    get
    set
  }
  public var batchAssetTransfer: WalletCore.TW_Polkadot_Proto_Balance.BatchAssetTransfer {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case transfer(WalletCore.TW_Polkadot_Proto_Balance.Transfer)
    case batchTransfer(WalletCore.TW_Polkadot_Proto_Balance.BatchTransfer)
    case assetTransfer(WalletCore.TW_Polkadot_Proto_Balance.AssetTransfer)
    case batchAssetTransfer(WalletCore.TW_Polkadot_Proto_Balance.BatchAssetTransfer)
    public static func == (a: WalletCore.TW_Polkadot_Proto_Balance.OneOf_MessageOneof, b: WalletCore.TW_Polkadot_Proto_Balance.OneOf_MessageOneof) -> Swift.Bool
  }
  public struct Transfer {
    public var toAddress: Swift.String
    public var value: Foundation.Data
    public var memo: Swift.String
    public var callIndices: WalletCore.TW_Polkadot_Proto_CallIndices {
      get
      set
    }
    public var hasCallIndices: Swift.Bool {
      get
    }
    public mutating func clearCallIndices()
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct BatchTransfer {
    public var callIndices: WalletCore.TW_Polkadot_Proto_CallIndices {
      get
      set
    }
    public var hasCallIndices: Swift.Bool {
      get
    }
    public mutating func clearCallIndices()
    public var transfers: [WalletCore.TW_Polkadot_Proto_Balance.Transfer]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct AssetTransfer {
    public var callIndices: WalletCore.TW_Polkadot_Proto_CallIndices {
      get
      set
    }
    public var hasCallIndices: Swift.Bool {
      get
    }
    public mutating func clearCallIndices()
    public var toAddress: Swift.String
    public var value: Foundation.Data
    public var assetID: Swift.UInt32
    public var feeAssetID: Swift.UInt32
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct BatchAssetTransfer {
    public var callIndices: WalletCore.TW_Polkadot_Proto_CallIndices {
      get
      set
    }
    public var hasCallIndices: Swift.Bool {
      get
    }
    public mutating func clearCallIndices()
    public var feeAssetID: Swift.UInt32
    public var transfers: [WalletCore.TW_Polkadot_Proto_Balance.AssetTransfer]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_Polkadot_Proto_Staking {
  public var messageOneof: WalletCore.TW_Polkadot_Proto_Staking.OneOf_MessageOneof?
  public var bond: WalletCore.TW_Polkadot_Proto_Staking.Bond {
    get
    set
  }
  public var bondAndNominate: WalletCore.TW_Polkadot_Proto_Staking.BondAndNominate {
    get
    set
  }
  public var bondExtra: WalletCore.TW_Polkadot_Proto_Staking.BondExtra {
    get
    set
  }
  public var unbond: WalletCore.TW_Polkadot_Proto_Staking.Unbond {
    get
    set
  }
  public var withdrawUnbonded: WalletCore.TW_Polkadot_Proto_Staking.WithdrawUnbonded {
    get
    set
  }
  public var nominate: WalletCore.TW_Polkadot_Proto_Staking.Nominate {
    get
    set
  }
  public var chill: WalletCore.TW_Polkadot_Proto_Staking.Chill {
    get
    set
  }
  public var chillAndUnbond: WalletCore.TW_Polkadot_Proto_Staking.ChillAndUnbond {
    get
    set
  }
  public var rebond: WalletCore.TW_Polkadot_Proto_Staking.Rebond {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case bond(WalletCore.TW_Polkadot_Proto_Staking.Bond)
    case bondAndNominate(WalletCore.TW_Polkadot_Proto_Staking.BondAndNominate)
    case bondExtra(WalletCore.TW_Polkadot_Proto_Staking.BondExtra)
    case unbond(WalletCore.TW_Polkadot_Proto_Staking.Unbond)
    case withdrawUnbonded(WalletCore.TW_Polkadot_Proto_Staking.WithdrawUnbonded)
    case nominate(WalletCore.TW_Polkadot_Proto_Staking.Nominate)
    case chill(WalletCore.TW_Polkadot_Proto_Staking.Chill)
    case chillAndUnbond(WalletCore.TW_Polkadot_Proto_Staking.ChillAndUnbond)
    case rebond(WalletCore.TW_Polkadot_Proto_Staking.Rebond)
    public static func == (a: WalletCore.TW_Polkadot_Proto_Staking.OneOf_MessageOneof, b: WalletCore.TW_Polkadot_Proto_Staking.OneOf_MessageOneof) -> Swift.Bool
  }
  public struct Bond {
    public var controller: Swift.String
    public var value: Foundation.Data
    public var rewardDestination: WalletCore.TW_Polkadot_Proto_RewardDestination
    public var callIndices: WalletCore.TW_Polkadot_Proto_CallIndices {
      get
      set
    }
    public var hasCallIndices: Swift.Bool {
      get
    }
    public mutating func clearCallIndices()
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct BondAndNominate {
    public var controller: Swift.String
    public var value: Foundation.Data
    public var rewardDestination: WalletCore.TW_Polkadot_Proto_RewardDestination
    public var nominators: [Swift.String]
    public var callIndices: WalletCore.TW_Polkadot_Proto_CallIndices {
      get
      set
    }
    public var hasCallIndices: Swift.Bool {
      get
    }
    public mutating func clearCallIndices()
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct BondExtra {
    public var value: Foundation.Data
    public var callIndices: WalletCore.TW_Polkadot_Proto_CallIndices {
      get
      set
    }
    public var hasCallIndices: Swift.Bool {
      get
    }
    public mutating func clearCallIndices()
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Unbond {
    public var value: Foundation.Data
    public var callIndices: WalletCore.TW_Polkadot_Proto_CallIndices {
      get
      set
    }
    public var hasCallIndices: Swift.Bool {
      get
    }
    public mutating func clearCallIndices()
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Rebond {
    public var value: Foundation.Data
    public var callIndices: WalletCore.TW_Polkadot_Proto_CallIndices {
      get
      set
    }
    public var hasCallIndices: Swift.Bool {
      get
    }
    public mutating func clearCallIndices()
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct WithdrawUnbonded {
    public var slashingSpans: Swift.Int32
    public var callIndices: WalletCore.TW_Polkadot_Proto_CallIndices {
      get
      set
    }
    public var hasCallIndices: Swift.Bool {
      get
    }
    public mutating func clearCallIndices()
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Nominate {
    public var nominators: [Swift.String]
    public var callIndices: WalletCore.TW_Polkadot_Proto_CallIndices {
      get
      set
    }
    public var hasCallIndices: Swift.Bool {
      get
    }
    public mutating func clearCallIndices()
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct ChillAndUnbond {
    public var value: Foundation.Data
    public var callIndices: WalletCore.TW_Polkadot_Proto_CallIndices {
      get
      set
    }
    public var hasCallIndices: Swift.Bool {
      get
    }
    public mutating func clearCallIndices()
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Chill {
    public var callIndices: WalletCore.TW_Polkadot_Proto_CallIndices {
      get
      set
    }
    public var hasCallIndices: Swift.Bool {
      get
    }
    public mutating func clearCallIndices()
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_Polkadot_Proto_Identity {
  public var messageOneof: WalletCore.TW_Polkadot_Proto_Identity.OneOf_MessageOneof?
  public var joinIdentityAsKey: WalletCore.TW_Polkadot_Proto_Identity.JoinIdentityAsKey {
    get
    set
  }
  public var addAuthorization: WalletCore.TW_Polkadot_Proto_Identity.AddAuthorization {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case joinIdentityAsKey(WalletCore.TW_Polkadot_Proto_Identity.JoinIdentityAsKey)
    case addAuthorization(WalletCore.TW_Polkadot_Proto_Identity.AddAuthorization)
    public static func == (a: WalletCore.TW_Polkadot_Proto_Identity.OneOf_MessageOneof, b: WalletCore.TW_Polkadot_Proto_Identity.OneOf_MessageOneof) -> Swift.Bool
  }
  public struct JoinIdentityAsKey {
    public var callIndices: WalletCore.TW_Polkadot_Proto_CallIndices {
      get
      set
    }
    public var hasCallIndices: Swift.Bool {
      get
    }
    public mutating func clearCallIndices()
    public var authID: Swift.UInt64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct AddAuthorization {
    public var callIndices: WalletCore.TW_Polkadot_Proto_CallIndices {
      get
      set
    }
    public var hasCallIndices: Swift.Bool {
      get
    }
    public mutating func clearCallIndices()
    public var target: Swift.String
    public var data: WalletCore.TW_Polkadot_Proto_Identity.AddAuthorization.AuthData {
      get
      set
    }
    public var hasData: Swift.Bool {
      get
    }
    public mutating func clearData()
    public var expiry: Swift.UInt64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public struct DataMessage {
      public var data: Foundation.Data
      public var unknownFields: SwiftProtobuf.UnknownStorage
      public init()
    }
    public struct AuthData {
      public var asset: WalletCore.TW_Polkadot_Proto_Identity.AddAuthorization.DataMessage {
        get
        set
      }
      public var hasAsset: Swift.Bool {
        get
      }
      public mutating func clearAsset()
      public var extrinsic: WalletCore.TW_Polkadot_Proto_Identity.AddAuthorization.DataMessage {
        get
        set
      }
      public var hasExtrinsic: Swift.Bool {
        get
      }
      public mutating func clearExtrinsic()
      public var portfolio: WalletCore.TW_Polkadot_Proto_Identity.AddAuthorization.DataMessage {
        get
        set
      }
      public var hasPortfolio: Swift.Bool {
        get
      }
      public mutating func clearPortfolio()
      public var unknownFields: SwiftProtobuf.UnknownStorage
      public init()
    }
    public init()
  }
  public init()
}
public struct TW_Polkadot_Proto_PolymeshCall {
  public var messageOneof: WalletCore.TW_Polkadot_Proto_PolymeshCall.OneOf_MessageOneof?
  public var identityCall: WalletCore.TW_Polkadot_Proto_Identity {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case identityCall(WalletCore.TW_Polkadot_Proto_Identity)
    public static func == (a: WalletCore.TW_Polkadot_Proto_PolymeshCall.OneOf_MessageOneof, b: WalletCore.TW_Polkadot_Proto_PolymeshCall.OneOf_MessageOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Polkadot_Proto_SigningInput {
  public var blockHash: Foundation.Data {
    get
    set
  }
  public var genesisHash: Foundation.Data {
    get
    set
  }
  public var nonce: Swift.UInt64 {
    get
    set
  }
  public var specVersion: Swift.UInt32 {
    get
    set
  }
  public var transactionVersion: Swift.UInt32 {
    get
    set
  }
  public var tip: Foundation.Data {
    get
    set
  }
  public var era: WalletCore.TW_Polkadot_Proto_Era {
    get
    set
  }
  public var hasEra: Swift.Bool {
    get
  }
  public mutating func clearEra()
  public var privateKey: Foundation.Data {
    get
    set
  }
  public var network: Swift.UInt32 {
    get
    set
  }
  public var multiAddress: Swift.Bool {
    get
    set
  }
  public var messageOneof: WalletCore.TW_Polkadot_Proto_SigningInput.OneOf_MessageOneof? {
    get
    set
  }
  public var balanceCall: WalletCore.TW_Polkadot_Proto_Balance {
    get
    set
  }
  public var stakingCall: WalletCore.TW_Polkadot_Proto_Staking {
    get
    set
  }
  public var polymeshCall: WalletCore.TW_Polkadot_Proto_PolymeshCall {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case balanceCall(WalletCore.TW_Polkadot_Proto_Balance)
    case stakingCall(WalletCore.TW_Polkadot_Proto_Staking)
    case polymeshCall(WalletCore.TW_Polkadot_Proto_PolymeshCall)
    public static func == (a: WalletCore.TW_Polkadot_Proto_SigningInput.OneOf_MessageOneof, b: WalletCore.TW_Polkadot_Proto_SigningInput.OneOf_MessageOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Polkadot_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Polkadot_Proto_RewardDestination : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Polkadot_Proto_Era : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Era, rhs: WalletCore.TW_Polkadot_Proto_Era) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_CustomCallIndices : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_CustomCallIndices, rhs: WalletCore.TW_Polkadot_Proto_CustomCallIndices) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_CallIndices : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_CallIndices, rhs: WalletCore.TW_Polkadot_Proto_CallIndices) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Balance : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Balance, rhs: WalletCore.TW_Polkadot_Proto_Balance) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Balance.Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Balance.Transfer, rhs: WalletCore.TW_Polkadot_Proto_Balance.Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Balance.BatchTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Balance.BatchTransfer, rhs: WalletCore.TW_Polkadot_Proto_Balance.BatchTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Balance.AssetTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Balance.AssetTransfer, rhs: WalletCore.TW_Polkadot_Proto_Balance.AssetTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Balance.BatchAssetTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Balance.BatchAssetTransfer, rhs: WalletCore.TW_Polkadot_Proto_Balance.BatchAssetTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking, rhs: WalletCore.TW_Polkadot_Proto_Staking) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking.Bond : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking.Bond, rhs: WalletCore.TW_Polkadot_Proto_Staking.Bond) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking.BondAndNominate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking.BondAndNominate, rhs: WalletCore.TW_Polkadot_Proto_Staking.BondAndNominate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking.BondExtra : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking.BondExtra, rhs: WalletCore.TW_Polkadot_Proto_Staking.BondExtra) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking.Unbond : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking.Unbond, rhs: WalletCore.TW_Polkadot_Proto_Staking.Unbond) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking.Rebond : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking.Rebond, rhs: WalletCore.TW_Polkadot_Proto_Staking.Rebond) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking.WithdrawUnbonded : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking.WithdrawUnbonded, rhs: WalletCore.TW_Polkadot_Proto_Staking.WithdrawUnbonded) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking.Nominate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking.Nominate, rhs: WalletCore.TW_Polkadot_Proto_Staking.Nominate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking.ChillAndUnbond : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking.ChillAndUnbond, rhs: WalletCore.TW_Polkadot_Proto_Staking.ChillAndUnbond) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Staking.Chill : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Staking.Chill, rhs: WalletCore.TW_Polkadot_Proto_Staking.Chill) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Identity : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Identity, rhs: WalletCore.TW_Polkadot_Proto_Identity) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Identity.JoinIdentityAsKey : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Identity.JoinIdentityAsKey, rhs: WalletCore.TW_Polkadot_Proto_Identity.JoinIdentityAsKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Identity.AddAuthorization : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Identity.AddAuthorization, rhs: WalletCore.TW_Polkadot_Proto_Identity.AddAuthorization) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Identity.AddAuthorization.DataMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Identity.AddAuthorization.DataMessage, rhs: WalletCore.TW_Polkadot_Proto_Identity.AddAuthorization.DataMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_Identity.AddAuthorization.AuthData : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_Identity.AddAuthorization.AuthData, rhs: WalletCore.TW_Polkadot_Proto_Identity.AddAuthorization.AuthData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_PolymeshCall : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_PolymeshCall, rhs: WalletCore.TW_Polkadot_Proto_PolymeshCall) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_SigningInput, rhs: WalletCore.TW_Polkadot_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Polkadot_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Polkadot_Proto_SigningOutput, rhs: WalletCore.TW_Polkadot_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class PrivateKey {
  public static func isValid(data: Foundation.Data, curve: WalletCore.Curve) -> Swift.Bool
  final public var data: Foundation.Data {
    get
  }
  public init()
  public init?(data: Foundation.Data)
  public init?(key: WalletCore.PrivateKey)
  @objc deinit
  final public func getPublicKey(coinType: WalletCore.CoinType) -> WalletCore.PublicKey
  final public func getPublicKeyByType(pubkeyType: WalletCore.PublicKeyType) -> WalletCore.PublicKey
  final public func getPublicKeySecp256k1(compressed: Swift.Bool) -> WalletCore.PublicKey
  final public func getPublicKeyNist256p1() -> WalletCore.PublicKey
  final public func getPublicKeyEd25519() -> WalletCore.PublicKey
  final public func getPublicKeyEd25519Blake2b() -> WalletCore.PublicKey
  final public func getPublicKeyEd25519Cardano() -> WalletCore.PublicKey
  final public func getPublicKeyCurve25519() -> WalletCore.PublicKey
  final public func sign(digest: Foundation.Data, curve: WalletCore.Curve) -> Foundation.Data?
  final public func signAsDER(digest: Foundation.Data) -> Foundation.Data?
  final public func signZilliqaSchnorr(message: Foundation.Data) -> Foundation.Data?
}
public enum PrivateKeyType : Swift.UInt32, Swift.CaseIterable {
  case `default`
  case cardano
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.PrivateKeyType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.PrivateKeyType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
extension WalletCore.PublicKey {
  final public var bitcoinKeyHash: Foundation.Data {
    get
  }
}
@_hasMissingDesignatedInitializers final public class PublicKey {
  public static func isValid(data: Foundation.Data, type: WalletCore.PublicKeyType) -> Swift.Bool
  public static func recover(signature: Foundation.Data, message: Foundation.Data) -> WalletCore.PublicKey?
  final public var isCompressed: Swift.Bool {
    get
  }
  final public var compressed: WalletCore.PublicKey {
    get
  }
  final public var uncompressed: WalletCore.PublicKey {
    get
  }
  final public var data: Foundation.Data {
    get
  }
  final public var keyType: WalletCore.PublicKeyType {
    get
  }
  final public var description: Swift.String {
    get
  }
  public init?(data: Foundation.Data, type: WalletCore.PublicKeyType)
  @objc deinit
  final public func verify(signature: Foundation.Data, message: Foundation.Data) -> Swift.Bool
  final public func verifyAsDER(signature: Foundation.Data, message: Foundation.Data) -> Swift.Bool
  final public func verifyZilliqaSchnorr(signature: Foundation.Data, message: Foundation.Data) -> Swift.Bool
}
public enum PublicKeyType : Swift.UInt32, Swift.CaseIterable {
  case secp256k1
  case secp256k1Extended
  case nist256p1
  case nist256p1Extended
  case ed25519
  case ed25519Blake2b
  case curve25519
  case ed25519Cardano
  case starkex
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.PublicKeyType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.PublicKeyType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum Purpose : Swift.UInt32, Swift.CaseIterable {
  case bip44
  case bip49
  case bip84
  case bip1852
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.Purpose]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.Purpose] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public typealias RippleCurrencyAmount = WalletCore.TW_Ripple_Proto_CurrencyAmount
public typealias RippleOperationTrustSet = WalletCore.TW_Ripple_Proto_OperationTrustSet
public typealias RippleOperationPayment = WalletCore.TW_Ripple_Proto_OperationPayment
public typealias RippleOperationEscrowCreate = WalletCore.TW_Ripple_Proto_OperationEscrowCreate
public typealias RippleOperationEscrowCancel = WalletCore.TW_Ripple_Proto_OperationEscrowCancel
public typealias RippleOperationEscrowFinish = WalletCore.TW_Ripple_Proto_OperationEscrowFinish
public typealias RippleOperationNFTokenBurn = WalletCore.TW_Ripple_Proto_OperationNFTokenBurn
public typealias RippleOperationNFTokenCreateOffer = WalletCore.TW_Ripple_Proto_OperationNFTokenCreateOffer
public typealias RippleOperationNFTokenAcceptOffer = WalletCore.TW_Ripple_Proto_OperationNFTokenAcceptOffer
public typealias RippleOperationNFTokenCancelOffer = WalletCore.TW_Ripple_Proto_OperationNFTokenCancelOffer
public typealias RippleSigningInput = WalletCore.TW_Ripple_Proto_SigningInput
public typealias RippleSigningOutput = WalletCore.TW_Ripple_Proto_SigningOutput
public struct TW_Ripple_Proto_CurrencyAmount {
  public var currency: Swift.String
  public var value: Swift.String
  public var issuer: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ripple_Proto_OperationTrustSet {
  public var limitAmount: WalletCore.TW_Ripple_Proto_CurrencyAmount {
    get
    set
  }
  public var hasLimitAmount: Swift.Bool {
    get
  }
  public mutating func clearLimitAmount()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ripple_Proto_OperationPayment {
  public var amountOneof: WalletCore.TW_Ripple_Proto_OperationPayment.OneOf_AmountOneof?
  public var amount: Swift.Int64 {
    get
    set
  }
  public var currencyAmount: WalletCore.TW_Ripple_Proto_CurrencyAmount {
    get
    set
  }
  public var destination: Swift.String
  public var destinationTag: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_AmountOneof : Swift.Equatable {
    case amount(Swift.Int64)
    case currencyAmount(WalletCore.TW_Ripple_Proto_CurrencyAmount)
    public static func == (a: WalletCore.TW_Ripple_Proto_OperationPayment.OneOf_AmountOneof, b: WalletCore.TW_Ripple_Proto_OperationPayment.OneOf_AmountOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Ripple_Proto_OperationEscrowCreate {
  public var amount: Swift.Int64
  public var destination: Swift.String
  public var destinationTag: Swift.Int64
  public var cancelAfter: Swift.Int64
  public var finishAfter: Swift.Int64
  public var condition: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ripple_Proto_OperationEscrowCancel {
  public var owner: Swift.String
  public var offerSequence: Swift.Int32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ripple_Proto_OperationEscrowFinish {
  public var owner: Swift.String
  public var offerSequence: Swift.Int32
  public var condition: Swift.String
  public var fulfillment: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ripple_Proto_OperationNFTokenBurn {
  public var nftokenID: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ripple_Proto_OperationNFTokenCreateOffer {
  public var nftokenID: Foundation.Data
  public var destination: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ripple_Proto_OperationNFTokenAcceptOffer {
  public var sellOffer: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ripple_Proto_OperationNFTokenCancelOffer {
  public var tokenOffers: [Foundation.Data]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Ripple_Proto_SigningInput {
  public var fee: Swift.Int64
  public var sequence: Swift.Int32
  public var lastLedgerSequence: Swift.Int32
  public var account: Swift.String
  public var flags: Swift.Int64
  public var privateKey: Foundation.Data
  public var operationOneof: WalletCore.TW_Ripple_Proto_SigningInput.OneOf_OperationOneof?
  public var opTrustSet: WalletCore.TW_Ripple_Proto_OperationTrustSet {
    get
    set
  }
  public var opPayment: WalletCore.TW_Ripple_Proto_OperationPayment {
    get
    set
  }
  public var opNftokenBurn: WalletCore.TW_Ripple_Proto_OperationNFTokenBurn {
    get
    set
  }
  public var opNftokenCreateOffer: WalletCore.TW_Ripple_Proto_OperationNFTokenCreateOffer {
    get
    set
  }
  public var opNftokenAcceptOffer: WalletCore.TW_Ripple_Proto_OperationNFTokenAcceptOffer {
    get
    set
  }
  public var opNftokenCancelOffer: WalletCore.TW_Ripple_Proto_OperationNFTokenCancelOffer {
    get
    set
  }
  public var opEscrowCreate: WalletCore.TW_Ripple_Proto_OperationEscrowCreate {
    get
    set
  }
  public var opEscrowCancel: WalletCore.TW_Ripple_Proto_OperationEscrowCancel {
    get
    set
  }
  public var opEscrowFinish: WalletCore.TW_Ripple_Proto_OperationEscrowFinish {
    get
    set
  }
  public var publicKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_OperationOneof : Swift.Equatable {
    case opTrustSet(WalletCore.TW_Ripple_Proto_OperationTrustSet)
    case opPayment(WalletCore.TW_Ripple_Proto_OperationPayment)
    case opNftokenBurn(WalletCore.TW_Ripple_Proto_OperationNFTokenBurn)
    case opNftokenCreateOffer(WalletCore.TW_Ripple_Proto_OperationNFTokenCreateOffer)
    case opNftokenAcceptOffer(WalletCore.TW_Ripple_Proto_OperationNFTokenAcceptOffer)
    case opNftokenCancelOffer(WalletCore.TW_Ripple_Proto_OperationNFTokenCancelOffer)
    case opEscrowCreate(WalletCore.TW_Ripple_Proto_OperationEscrowCreate)
    case opEscrowCancel(WalletCore.TW_Ripple_Proto_OperationEscrowCancel)
    case opEscrowFinish(WalletCore.TW_Ripple_Proto_OperationEscrowFinish)
    public static func == (a: WalletCore.TW_Ripple_Proto_SigningInput.OneOf_OperationOneof, b: WalletCore.TW_Ripple_Proto_SigningInput.OneOf_OperationOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Ripple_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Ripple_Proto_CurrencyAmount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ripple_Proto_CurrencyAmount, rhs: WalletCore.TW_Ripple_Proto_CurrencyAmount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ripple_Proto_OperationTrustSet : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ripple_Proto_OperationTrustSet, rhs: WalletCore.TW_Ripple_Proto_OperationTrustSet) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ripple_Proto_OperationPayment : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ripple_Proto_OperationPayment, rhs: WalletCore.TW_Ripple_Proto_OperationPayment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ripple_Proto_OperationEscrowCreate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ripple_Proto_OperationEscrowCreate, rhs: WalletCore.TW_Ripple_Proto_OperationEscrowCreate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ripple_Proto_OperationEscrowCancel : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ripple_Proto_OperationEscrowCancel, rhs: WalletCore.TW_Ripple_Proto_OperationEscrowCancel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ripple_Proto_OperationEscrowFinish : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ripple_Proto_OperationEscrowFinish, rhs: WalletCore.TW_Ripple_Proto_OperationEscrowFinish) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ripple_Proto_OperationNFTokenBurn : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ripple_Proto_OperationNFTokenBurn, rhs: WalletCore.TW_Ripple_Proto_OperationNFTokenBurn) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ripple_Proto_OperationNFTokenCreateOffer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ripple_Proto_OperationNFTokenCreateOffer, rhs: WalletCore.TW_Ripple_Proto_OperationNFTokenCreateOffer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ripple_Proto_OperationNFTokenAcceptOffer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ripple_Proto_OperationNFTokenAcceptOffer, rhs: WalletCore.TW_Ripple_Proto_OperationNFTokenAcceptOffer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ripple_Proto_OperationNFTokenCancelOffer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ripple_Proto_OperationNFTokenCancelOffer, rhs: WalletCore.TW_Ripple_Proto_OperationNFTokenCancelOffer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ripple_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ripple_Proto_SigningInput, rhs: WalletCore.TW_Ripple_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Ripple_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Ripple_Proto_SigningOutput, rhs: WalletCore.TW_Ripple_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class RippleXAddress : WalletCore.Address {
  public static func == (lhs: WalletCore.RippleXAddress, rhs: WalletCore.RippleXAddress) -> Swift.Bool
  public static func isValidString(string: Swift.String) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  final public var tag: Swift.UInt32 {
    get
  }
  public init?(string: Swift.String)
  public init(publicKey: WalletCore.PublicKey, tag: Swift.UInt32)
  @objc deinit
}
public enum SS58AddressType : Swift.UInt8, Swift.CaseIterable {
  case polkadot
  case kusama
  public init?(rawValue: Swift.UInt8)
  public typealias AllCases = [WalletCore.SS58AddressType]
  public typealias RawValue = Swift.UInt8
  public static var allCases: [WalletCore.SS58AddressType] {
    get
  }
  public var rawValue: Swift.UInt8 {
    get
  }
}
@_hasMissingDesignatedInitializers final public class SegwitAddress : WalletCore.Address {
  public static func == (lhs: WalletCore.SegwitAddress, rhs: WalletCore.SegwitAddress) -> Swift.Bool
  public static func isValidString(string: Swift.String) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  final public var hrp: WalletCore.HRP {
    get
  }
  final public var witnessVersion: Swift.Int32 {
    get
  }
  final public var witnessProgram: Foundation.Data {
    get
  }
  public init?(string: Swift.String)
  public init(hrp: WalletCore.HRP, publicKey: WalletCore.PublicKey)
  @objc deinit
}
public typealias SolanaTransfer = WalletCore.TW_Solana_Proto_Transfer
public typealias SolanaDelegateStake = WalletCore.TW_Solana_Proto_DelegateStake
public typealias SolanaDeactivateStake = WalletCore.TW_Solana_Proto_DeactivateStake
public typealias SolanaDeactivateAllStake = WalletCore.TW_Solana_Proto_DeactivateAllStake
public typealias SolanaWithdrawStake = WalletCore.TW_Solana_Proto_WithdrawStake
public typealias SolanaStakeAccountValue = WalletCore.TW_Solana_Proto_StakeAccountValue
public typealias SolanaWithdrawAllStake = WalletCore.TW_Solana_Proto_WithdrawAllStake
public typealias SolanaCreateTokenAccount = WalletCore.TW_Solana_Proto_CreateTokenAccount
public typealias SolanaTokenTransfer = WalletCore.TW_Solana_Proto_TokenTransfer
public typealias SolanaCreateAndTransferToken = WalletCore.TW_Solana_Proto_CreateAndTransferToken
public typealias SolanaCreateNonceAccount = WalletCore.TW_Solana_Proto_CreateNonceAccount
public typealias SolanaWithdrawNonceAccount = WalletCore.TW_Solana_Proto_WithdrawNonceAccount
public typealias SolanaAdvanceNonceAccount = WalletCore.TW_Solana_Proto_AdvanceNonceAccount
public typealias SolanaPubkeySignature = WalletCore.TW_Solana_Proto_PubkeySignature
public typealias SolanaRawMessage = WalletCore.TW_Solana_Proto_RawMessage
public typealias SolanaDecodingTransactionOutput = WalletCore.TW_Solana_Proto_DecodingTransactionOutput
public typealias SolanaPriorityFeePrice = WalletCore.TW_Solana_Proto_PriorityFeePrice
public typealias SolanaPriorityFeeLimit = WalletCore.TW_Solana_Proto_PriorityFeeLimit
public typealias SolanaSigningInput = WalletCore.TW_Solana_Proto_SigningInput
public typealias SolanaSigningOutput = WalletCore.TW_Solana_Proto_SigningOutput
public typealias SolanaPreSigningOutput = WalletCore.TW_Solana_Proto_PreSigningOutput
public typealias SolanaEncoding = WalletCore.TW_Solana_Proto_Encoding
public enum TW_Solana_Proto_Encoding : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case base58
  case base64
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_Encoding : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Solana_Proto_Encoding]
  public typealias AllCases = [WalletCore.TW_Solana_Proto_Encoding]
}
public struct TW_Solana_Proto_Transfer {
  public var recipient: Swift.String
  public var value: Swift.UInt64
  public var memo: Swift.String
  public var references: [Swift.String]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_DelegateStake {
  public var validatorPubkey: Swift.String
  public var value: Swift.UInt64
  public var stakeAccount: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_DeactivateStake {
  public var stakeAccount: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_DeactivateAllStake {
  public var stakeAccounts: [Swift.String]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_WithdrawStake {
  public var stakeAccount: Swift.String
  public var value: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_StakeAccountValue {
  public var stakeAccount: Swift.String
  public var value: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_WithdrawAllStake {
  public var stakeAccounts: [WalletCore.TW_Solana_Proto_StakeAccountValue]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_CreateTokenAccount {
  public var mainAddress: Swift.String
  public var tokenMintAddress: Swift.String
  public var tokenAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_TokenTransfer {
  public var tokenMintAddress: Swift.String
  public var senderTokenAddress: Swift.String
  public var recipientTokenAddress: Swift.String
  public var amount: Swift.UInt64
  public var decimals: Swift.UInt32
  public var memo: Swift.String
  public var references: [Swift.String]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_CreateAndTransferToken {
  public var recipientMainAddress: Swift.String
  public var tokenMintAddress: Swift.String
  public var recipientTokenAddress: Swift.String
  public var senderTokenAddress: Swift.String
  public var amount: Swift.UInt64
  public var decimals: Swift.UInt32
  public var memo: Swift.String
  public var references: [Swift.String]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_CreateNonceAccount {
  public var nonceAccount: Swift.String
  public var rent: Swift.UInt64
  public var nonceAccountPrivateKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_WithdrawNonceAccount {
  public var nonceAccount: Swift.String
  public var recipient: Swift.String
  public var value: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_AdvanceNonceAccount {
  public var nonceAccount: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_PubkeySignature {
  public var pubkey: Swift.String
  public var signature: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_RawMessage {
  public var signatures: [WalletCore.TW_Solana_Proto_PubkeySignature]
  public var message: WalletCore.TW_Solana_Proto_RawMessage.OneOf_Message?
  public var legacy: WalletCore.TW_Solana_Proto_RawMessage.MessageLegacy {
    get
    set
  }
  public var v0: WalletCore.TW_Solana_Proto_RawMessage.MessageV0 {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Message : Swift.Equatable {
    case legacy(WalletCore.TW_Solana_Proto_RawMessage.MessageLegacy)
    case v0(WalletCore.TW_Solana_Proto_RawMessage.MessageV0)
    public static func == (a: WalletCore.TW_Solana_Proto_RawMessage.OneOf_Message, b: WalletCore.TW_Solana_Proto_RawMessage.OneOf_Message) -> Swift.Bool
  }
  public struct MessageHeader {
    public var numRequiredSignatures: Swift.UInt32
    public var numReadonlySignedAccounts: Swift.UInt32
    public var numReadonlyUnsignedAccounts: Swift.UInt32
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Instruction {
    public var programID: Swift.UInt32
    public var accounts: [Swift.UInt32]
    public var programData: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct MessageAddressTableLookup {
    public var accountKey: Swift.String
    public var writableIndexes: [Swift.UInt32]
    public var readonlyIndexes: [Swift.UInt32]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct MessageLegacy {
    public var header: WalletCore.TW_Solana_Proto_RawMessage.MessageHeader {
      get
      set
    }
    public var hasHeader: Swift.Bool {
      get
    }
    public mutating func clearHeader()
    public var accountKeys: [Swift.String]
    public var recentBlockhash: Swift.String
    public var instructions: [WalletCore.TW_Solana_Proto_RawMessage.Instruction]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct MessageV0 {
    public var header: WalletCore.TW_Solana_Proto_RawMessage.MessageHeader {
      get
      set
    }
    public var hasHeader: Swift.Bool {
      get
    }
    public mutating func clearHeader()
    public var accountKeys: [Swift.String]
    public var recentBlockhash: Swift.String
    public var instructions: [WalletCore.TW_Solana_Proto_RawMessage.Instruction]
    public var addressTableLookups: [WalletCore.TW_Solana_Proto_RawMessage.MessageAddressTableLookup]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_Solana_Proto_DecodingTransactionOutput {
  public var transaction: WalletCore.TW_Solana_Proto_RawMessage {
    get
    set
  }
  public var hasTransaction: Swift.Bool {
    get
  }
  public mutating func clearTransaction()
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_PriorityFeePrice {
  public var price: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_PriorityFeeLimit {
  public var limit: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_SigningInput {
  public var privateKey: Foundation.Data {
    get
    set
  }
  public var recentBlockhash: Swift.String {
    get
    set
  }
  public var v0Msg: Swift.Bool {
    get
    set
  }
  public var transactionType: WalletCore.TW_Solana_Proto_SigningInput.OneOf_TransactionType? {
    get
    set
  }
  public var transferTransaction: WalletCore.TW_Solana_Proto_Transfer {
    get
    set
  }
  public var delegateStakeTransaction: WalletCore.TW_Solana_Proto_DelegateStake {
    get
    set
  }
  public var deactivateStakeTransaction: WalletCore.TW_Solana_Proto_DeactivateStake {
    get
    set
  }
  public var deactivateAllStakeTransaction: WalletCore.TW_Solana_Proto_DeactivateAllStake {
    get
    set
  }
  public var withdrawTransaction: WalletCore.TW_Solana_Proto_WithdrawStake {
    get
    set
  }
  public var withdrawAllTransaction: WalletCore.TW_Solana_Proto_WithdrawAllStake {
    get
    set
  }
  public var createTokenAccountTransaction: WalletCore.TW_Solana_Proto_CreateTokenAccount {
    get
    set
  }
  public var tokenTransferTransaction: WalletCore.TW_Solana_Proto_TokenTransfer {
    get
    set
  }
  public var createAndTransferTokenTransaction: WalletCore.TW_Solana_Proto_CreateAndTransferToken {
    get
    set
  }
  public var createNonceAccount: WalletCore.TW_Solana_Proto_CreateNonceAccount {
    get
    set
  }
  public var withdrawNonceAccount: WalletCore.TW_Solana_Proto_WithdrawNonceAccount {
    get
    set
  }
  public var advanceNonceAccount: WalletCore.TW_Solana_Proto_AdvanceNonceAccount {
    get
    set
  }
  public var sender: Swift.String {
    get
    set
  }
  public var nonceAccount: Swift.String {
    get
    set
  }
  public var feePayerPrivateKey: Foundation.Data {
    get
    set
  }
  public var feePayer: Swift.String {
    get
    set
  }
  public var rawMessage: WalletCore.TW_Solana_Proto_RawMessage {
    get
    set
  }
  public var hasRawMessage: Swift.Bool {
    get
  }
  public mutating func clearRawMessage()
  public var txEncoding: WalletCore.TW_Solana_Proto_Encoding {
    get
    set
  }
  public var priorityFeePrice: WalletCore.TW_Solana_Proto_PriorityFeePrice {
    get
    set
  }
  public var hasPriorityFeePrice: Swift.Bool {
    get
  }
  public mutating func clearPriorityFeePrice()
  public var priorityFeeLimit: WalletCore.TW_Solana_Proto_PriorityFeeLimit {
    get
    set
  }
  public var hasPriorityFeeLimit: Swift.Bool {
    get
  }
  public mutating func clearPriorityFeeLimit()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_TransactionType : Swift.Equatable {
    case transferTransaction(WalletCore.TW_Solana_Proto_Transfer)
    case delegateStakeTransaction(WalletCore.TW_Solana_Proto_DelegateStake)
    case deactivateStakeTransaction(WalletCore.TW_Solana_Proto_DeactivateStake)
    case deactivateAllStakeTransaction(WalletCore.TW_Solana_Proto_DeactivateAllStake)
    case withdrawTransaction(WalletCore.TW_Solana_Proto_WithdrawStake)
    case withdrawAllTransaction(WalletCore.TW_Solana_Proto_WithdrawAllStake)
    case createTokenAccountTransaction(WalletCore.TW_Solana_Proto_CreateTokenAccount)
    case tokenTransferTransaction(WalletCore.TW_Solana_Proto_TokenTransfer)
    case createAndTransferTokenTransaction(WalletCore.TW_Solana_Proto_CreateAndTransferToken)
    case createNonceAccount(WalletCore.TW_Solana_Proto_CreateNonceAccount)
    case withdrawNonceAccount(WalletCore.TW_Solana_Proto_WithdrawNonceAccount)
    case advanceNonceAccount(WalletCore.TW_Solana_Proto_AdvanceNonceAccount)
    public static func == (a: WalletCore.TW_Solana_Proto_SigningInput.OneOf_TransactionType, b: WalletCore.TW_Solana_Proto_SigningInput.OneOf_TransactionType) -> Swift.Bool
  }
  public init()
}
public struct TW_Solana_Proto_SigningOutput {
  public var encoded: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unsignedTx: Swift.String
  public var signatures: [WalletCore.TW_Solana_Proto_PubkeySignature]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Solana_Proto_PreSigningOutput {
  public var signers: [Foundation.Data]
  public var data: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Solana_Proto_Encoding : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Solana_Proto_Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_Transfer, rhs: WalletCore.TW_Solana_Proto_Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_DelegateStake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_DelegateStake, rhs: WalletCore.TW_Solana_Proto_DelegateStake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_DeactivateStake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_DeactivateStake, rhs: WalletCore.TW_Solana_Proto_DeactivateStake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_DeactivateAllStake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_DeactivateAllStake, rhs: WalletCore.TW_Solana_Proto_DeactivateAllStake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_WithdrawStake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_WithdrawStake, rhs: WalletCore.TW_Solana_Proto_WithdrawStake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_StakeAccountValue : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_StakeAccountValue, rhs: WalletCore.TW_Solana_Proto_StakeAccountValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_WithdrawAllStake : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_WithdrawAllStake, rhs: WalletCore.TW_Solana_Proto_WithdrawAllStake) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_CreateTokenAccount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_CreateTokenAccount, rhs: WalletCore.TW_Solana_Proto_CreateTokenAccount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_TokenTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_TokenTransfer, rhs: WalletCore.TW_Solana_Proto_TokenTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_CreateAndTransferToken : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_CreateAndTransferToken, rhs: WalletCore.TW_Solana_Proto_CreateAndTransferToken) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_CreateNonceAccount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_CreateNonceAccount, rhs: WalletCore.TW_Solana_Proto_CreateNonceAccount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_WithdrawNonceAccount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_WithdrawNonceAccount, rhs: WalletCore.TW_Solana_Proto_WithdrawNonceAccount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_AdvanceNonceAccount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_AdvanceNonceAccount, rhs: WalletCore.TW_Solana_Proto_AdvanceNonceAccount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_PubkeySignature : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_PubkeySignature, rhs: WalletCore.TW_Solana_Proto_PubkeySignature) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_RawMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_RawMessage, rhs: WalletCore.TW_Solana_Proto_RawMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_RawMessage.MessageHeader : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_RawMessage.MessageHeader, rhs: WalletCore.TW_Solana_Proto_RawMessage.MessageHeader) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_RawMessage.Instruction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_RawMessage.Instruction, rhs: WalletCore.TW_Solana_Proto_RawMessage.Instruction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_RawMessage.MessageAddressTableLookup : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_RawMessage.MessageAddressTableLookup, rhs: WalletCore.TW_Solana_Proto_RawMessage.MessageAddressTableLookup) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_RawMessage.MessageLegacy : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_RawMessage.MessageLegacy, rhs: WalletCore.TW_Solana_Proto_RawMessage.MessageLegacy) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_RawMessage.MessageV0 : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_RawMessage.MessageV0, rhs: WalletCore.TW_Solana_Proto_RawMessage.MessageV0) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_DecodingTransactionOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_DecodingTransactionOutput, rhs: WalletCore.TW_Solana_Proto_DecodingTransactionOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_PriorityFeePrice : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_PriorityFeePrice, rhs: WalletCore.TW_Solana_Proto_PriorityFeePrice) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_PriorityFeeLimit : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_PriorityFeeLimit, rhs: WalletCore.TW_Solana_Proto_PriorityFeeLimit) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_SigningInput, rhs: WalletCore.TW_Solana_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_SigningOutput, rhs: WalletCore.TW_Solana_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Solana_Proto_PreSigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Solana_Proto_PreSigningOutput, rhs: WalletCore.TW_Solana_Proto_PreSigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class SolanaAddress : WalletCore.Address {
  final public var description: Swift.String {
    get
  }
  public init?(string: Swift.String)
  @objc deinit
  final public func defaultTokenAddress(tokenMintAddress: Swift.String) -> Swift.String?
}
public struct SolanaTransaction {
  public static func updateBlockhashAndSign(encodedTx: Swift.String, recentBlockhash: Swift.String, privateKeys: WalletCore.DataVector) -> Foundation.Data
}
public struct StarkExMessageSigner {
  public static func signMessage(privateKey: WalletCore.PrivateKey, message: Swift.String) -> Swift.String
  public static func verifyMessage(pubKey: WalletCore.PublicKey, message: Swift.String, signature: Swift.String) -> Swift.Bool
}
public struct StarkWare {
  public static func getStarkKeyFromSignature(derivationPath: WalletCore.DerivationPath, signature: Swift.String) -> WalletCore.PrivateKey
}
public typealias StellarAsset = WalletCore.TW_Stellar_Proto_Asset
public typealias StellarOperationCreateAccount = WalletCore.TW_Stellar_Proto_OperationCreateAccount
public typealias StellarOperationPayment = WalletCore.TW_Stellar_Proto_OperationPayment
public typealias StellarOperationChangeTrust = WalletCore.TW_Stellar_Proto_OperationChangeTrust
public typealias StellarClaimant = WalletCore.TW_Stellar_Proto_Claimant
public typealias StellarOperationCreateClaimableBalance = WalletCore.TW_Stellar_Proto_OperationCreateClaimableBalance
public typealias StellarOperationClaimClaimableBalance = WalletCore.TW_Stellar_Proto_OperationClaimClaimableBalance
public typealias StellarMemoVoid = WalletCore.TW_Stellar_Proto_MemoVoid
public typealias StellarMemoText = WalletCore.TW_Stellar_Proto_MemoText
public typealias StellarMemoId = WalletCore.TW_Stellar_Proto_MemoId
public typealias StellarMemoHash = WalletCore.TW_Stellar_Proto_MemoHash
public typealias StellarSigningInput = WalletCore.TW_Stellar_Proto_SigningInput
public typealias StellarSigningOutput = WalletCore.TW_Stellar_Proto_SigningOutput
public typealias StellarClaimPredicate = WalletCore.TW_Stellar_Proto_ClaimPredicate
public enum TW_Stellar_Proto_ClaimPredicate : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case predicateUnconditional
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_ClaimPredicate : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Stellar_Proto_ClaimPredicate]
  public typealias AllCases = [WalletCore.TW_Stellar_Proto_ClaimPredicate]
}
public struct TW_Stellar_Proto_Asset {
  public var issuer: Swift.String
  public var alphanum4: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_OperationCreateAccount {
  public var destination: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_OperationPayment {
  public var destination: Swift.String
  public var asset: WalletCore.TW_Stellar_Proto_Asset {
    get
    set
  }
  public var hasAsset: Swift.Bool {
    get
  }
  public mutating func clearAsset()
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_OperationChangeTrust {
  public var asset: WalletCore.TW_Stellar_Proto_Asset {
    get
    set
  }
  public var hasAsset: Swift.Bool {
    get
  }
  public mutating func clearAsset()
  public var validBefore: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_Claimant {
  public var account: Swift.String
  public var predicate: WalletCore.TW_Stellar_Proto_ClaimPredicate
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_OperationCreateClaimableBalance {
  public var asset: WalletCore.TW_Stellar_Proto_Asset {
    get
    set
  }
  public var hasAsset: Swift.Bool {
    get
  }
  public mutating func clearAsset()
  public var amount: Swift.Int64
  public var claimants: [WalletCore.TW_Stellar_Proto_Claimant]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_OperationClaimClaimableBalance {
  public var balanceID: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_MemoVoid {
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_MemoText {
  public var text: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_MemoId {
  public var id: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_MemoHash {
  public var hash: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Stellar_Proto_SigningInput {
  public var fee: Swift.Int32
  public var sequence: Swift.Int64
  public var account: Swift.String
  public var privateKey: Foundation.Data
  public var passphrase: Swift.String
  public var operationOneof: WalletCore.TW_Stellar_Proto_SigningInput.OneOf_OperationOneof?
  public var opCreateAccount: WalletCore.TW_Stellar_Proto_OperationCreateAccount {
    get
    set
  }
  public var opPayment: WalletCore.TW_Stellar_Proto_OperationPayment {
    get
    set
  }
  public var opChangeTrust: WalletCore.TW_Stellar_Proto_OperationChangeTrust {
    get
    set
  }
  public var opCreateClaimableBalance: WalletCore.TW_Stellar_Proto_OperationCreateClaimableBalance {
    get
    set
  }
  public var opClaimClaimableBalance: WalletCore.TW_Stellar_Proto_OperationClaimClaimableBalance {
    get
    set
  }
  public var memoTypeOneof: WalletCore.TW_Stellar_Proto_SigningInput.OneOf_MemoTypeOneof?
  public var memoVoid: WalletCore.TW_Stellar_Proto_MemoVoid {
    get
    set
  }
  public var memoText: WalletCore.TW_Stellar_Proto_MemoText {
    get
    set
  }
  public var memoID: WalletCore.TW_Stellar_Proto_MemoId {
    get
    set
  }
  public var memoHash: WalletCore.TW_Stellar_Proto_MemoHash {
    get
    set
  }
  public var memoReturnHash: WalletCore.TW_Stellar_Proto_MemoHash {
    get
    set
  }
  public var timeBounds: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_OperationOneof : Swift.Equatable {
    case opCreateAccount(WalletCore.TW_Stellar_Proto_OperationCreateAccount)
    case opPayment(WalletCore.TW_Stellar_Proto_OperationPayment)
    case opChangeTrust(WalletCore.TW_Stellar_Proto_OperationChangeTrust)
    case opCreateClaimableBalance(WalletCore.TW_Stellar_Proto_OperationCreateClaimableBalance)
    case opClaimClaimableBalance(WalletCore.TW_Stellar_Proto_OperationClaimClaimableBalance)
    public static func == (a: WalletCore.TW_Stellar_Proto_SigningInput.OneOf_OperationOneof, b: WalletCore.TW_Stellar_Proto_SigningInput.OneOf_OperationOneof) -> Swift.Bool
  }
  public enum OneOf_MemoTypeOneof : Swift.Equatable {
    case memoVoid(WalletCore.TW_Stellar_Proto_MemoVoid)
    case memoText(WalletCore.TW_Stellar_Proto_MemoText)
    case memoID(WalletCore.TW_Stellar_Proto_MemoId)
    case memoHash(WalletCore.TW_Stellar_Proto_MemoHash)
    case memoReturnHash(WalletCore.TW_Stellar_Proto_MemoHash)
    public static func == (a: WalletCore.TW_Stellar_Proto_SigningInput.OneOf_MemoTypeOneof, b: WalletCore.TW_Stellar_Proto_SigningInput.OneOf_MemoTypeOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Stellar_Proto_SigningOutput {
  public var signature: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Stellar_Proto_ClaimPredicate : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Stellar_Proto_Asset : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_Asset, rhs: WalletCore.TW_Stellar_Proto_Asset) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_OperationCreateAccount : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_OperationCreateAccount, rhs: WalletCore.TW_Stellar_Proto_OperationCreateAccount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_OperationPayment : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_OperationPayment, rhs: WalletCore.TW_Stellar_Proto_OperationPayment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_OperationChangeTrust : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_OperationChangeTrust, rhs: WalletCore.TW_Stellar_Proto_OperationChangeTrust) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_Claimant : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_Claimant, rhs: WalletCore.TW_Stellar_Proto_Claimant) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_OperationCreateClaimableBalance : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_OperationCreateClaimableBalance, rhs: WalletCore.TW_Stellar_Proto_OperationCreateClaimableBalance) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_OperationClaimClaimableBalance : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_OperationClaimClaimableBalance, rhs: WalletCore.TW_Stellar_Proto_OperationClaimClaimableBalance) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_MemoVoid : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_MemoVoid, rhs: WalletCore.TW_Stellar_Proto_MemoVoid) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_MemoText : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_MemoText, rhs: WalletCore.TW_Stellar_Proto_MemoText) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_MemoId : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_MemoId, rhs: WalletCore.TW_Stellar_Proto_MemoId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_MemoHash : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_MemoHash, rhs: WalletCore.TW_Stellar_Proto_MemoHash) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_SigningInput, rhs: WalletCore.TW_Stellar_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Stellar_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Stellar_Proto_SigningOutput, rhs: WalletCore.TW_Stellar_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum StellarMemoType : Swift.UInt32, Swift.CaseIterable {
  case none
  case text
  case id
  case hash
  case `return`
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.StellarMemoType]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.StellarMemoType] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum StellarPassphrase : Swift.UInt32, Swift.CaseIterable, Swift.CustomStringConvertible {
  case stellar
  case kin
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.StellarPassphrase]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.StellarPassphrase] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum StellarVersionByte : Swift.UInt16, Swift.CaseIterable {
  case accountID
  case seed
  case preAuthTX
  case sha256Hash
  public init?(rawValue: Swift.UInt16)
  public typealias AllCases = [WalletCore.StellarVersionByte]
  public typealias RawValue = Swift.UInt16
  public static var allCases: [WalletCore.StellarVersionByte] {
    get
  }
  public var rawValue: Swift.UInt16 {
    get
  }
}
@_hasMissingDesignatedInitializers final public class StoredKey {
  public static func load(path: Swift.String) -> WalletCore.StoredKey?
  public static func importPrivateKey(privateKey: Foundation.Data, name: Swift.String, password: Foundation.Data, coin: WalletCore.CoinType) -> WalletCore.StoredKey?
  public static func importPrivateKeyWithEncryption(privateKey: Foundation.Data, name: Swift.String, password: Foundation.Data, coin: WalletCore.CoinType, encryption: WalletCore.StoredKeyEncryption) -> WalletCore.StoredKey?
  public static func importHDWallet(mnemonic: Swift.String, name: Swift.String, password: Foundation.Data, coin: WalletCore.CoinType) -> WalletCore.StoredKey?
  public static func importHDWalletWithEncryption(mnemonic: Swift.String, name: Swift.String, password: Foundation.Data, coin: WalletCore.CoinType, encryption: WalletCore.StoredKeyEncryption) -> WalletCore.StoredKey?
  public static func importJSON(json: Foundation.Data) -> WalletCore.StoredKey?
  final public var identifier: Swift.String? {
    get
  }
  final public var name: Swift.String {
    get
  }
  final public var isMnemonic: Swift.Bool {
    get
  }
  final public var accountCount: Swift.Int {
    get
  }
  final public var encryptionParameters: Swift.String? {
    get
  }
  public init(name: Swift.String, password: Foundation.Data, encryptionLevel: WalletCore.StoredKeyEncryptionLevel)
  public init(name: Swift.String, password: Foundation.Data, encryptionLevel: WalletCore.StoredKeyEncryptionLevel, encryption: WalletCore.StoredKeyEncryption)
  public init(name: Swift.String, password: Foundation.Data)
  public init(name: Swift.String, password: Foundation.Data, encryption: WalletCore.StoredKeyEncryption)
  @objc deinit
  final public func account(index: Swift.Int) -> WalletCore.Account?
  final public func accountForCoin(coin: WalletCore.CoinType, wallet: WalletCore.HDWallet?) -> WalletCore.Account?
  final public func accountForCoinDerivation(coin: WalletCore.CoinType, derivation: WalletCore.Derivation, wallet: WalletCore.HDWallet?) -> WalletCore.Account?
  final public func addAccountDerivation(address: Swift.String, coin: WalletCore.CoinType, derivation: WalletCore.Derivation, derivationPath: Swift.String, publicKey: Swift.String, extendedPublicKey: Swift.String)
  final public func addAccount(address: Swift.String, coin: WalletCore.CoinType, derivationPath: Swift.String, publicKey: Swift.String, extendedPublicKey: Swift.String)
  final public func removeAccountForCoin(coin: WalletCore.CoinType)
  final public func removeAccountForCoinDerivation(coin: WalletCore.CoinType, derivation: WalletCore.Derivation)
  final public func removeAccountForCoinDerivationPath(coin: WalletCore.CoinType, derivationPath: Swift.String)
  final public func store(path: Swift.String) -> Swift.Bool
  final public func decryptPrivateKey(password: Foundation.Data) -> Foundation.Data?
  final public func decryptMnemonic(password: Foundation.Data) -> Swift.String?
  final public func privateKey(coin: WalletCore.CoinType, password: Foundation.Data) -> WalletCore.PrivateKey?
  final public func wallet(password: Foundation.Data) -> WalletCore.HDWallet?
  final public func exportJSON() -> Foundation.Data?
  final public func fixAddresses(password: Foundation.Data) -> Swift.Bool
}
public enum StoredKeyEncryption : Swift.UInt32, Swift.CaseIterable {
  case aes128Ctr
  case aes128Cbc
  case aes192Ctr
  case aes256Ctr
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.StoredKeyEncryption]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.StoredKeyEncryption] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public enum StoredKeyEncryptionLevel : Swift.UInt32, Swift.CaseIterable {
  case `default`
  case minimal
  case weak
  case standard
  public init?(rawValue: Swift.UInt32)
  public typealias AllCases = [WalletCore.StoredKeyEncryptionLevel]
  public typealias RawValue = Swift.UInt32
  public static var allCases: [WalletCore.StoredKeyEncryptionLevel] {
    get
  }
  public var rawValue: Swift.UInt32 {
    get
  }
}
public typealias SuiSignDirect = WalletCore.TW_Sui_Proto_SignDirect
public typealias SuiSigningInput = WalletCore.TW_Sui_Proto_SigningInput
public typealias SuiSigningOutput = WalletCore.TW_Sui_Proto_SigningOutput
public struct TW_Sui_Proto_SignDirect {
  public var unsignedTxMsg: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Sui_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var transactionPayload: WalletCore.TW_Sui_Proto_SigningInput.OneOf_TransactionPayload?
  public var signDirectMessage: WalletCore.TW_Sui_Proto_SignDirect {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_TransactionPayload : Swift.Equatable {
    case signDirectMessage(WalletCore.TW_Sui_Proto_SignDirect)
    public static func == (a: WalletCore.TW_Sui_Proto_SigningInput.OneOf_TransactionPayload, b: WalletCore.TW_Sui_Proto_SigningInput.OneOf_TransactionPayload) -> Swift.Bool
  }
  public init()
}
public struct TW_Sui_Proto_SigningOutput {
  public var unsignedTx: Swift.String
  public var signature: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Sui_Proto_SignDirect : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Sui_Proto_SignDirect, rhs: WalletCore.TW_Sui_Proto_SignDirect) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Sui_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Sui_Proto_SigningInput, rhs: WalletCore.TW_Sui_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Sui_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Sui_Proto_SigningOutput, rhs: WalletCore.TW_Sui_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias THORChainSwapError = WalletCore.TW_THORChainSwap_Proto_Error
public typealias THORChainSwapAsset = WalletCore.TW_THORChainSwap_Proto_Asset
public typealias THORChainSwapStreamParams = WalletCore.TW_THORChainSwap_Proto_StreamParams
public typealias THORChainSwapSwapInput = WalletCore.TW_THORChainSwap_Proto_SwapInput
public typealias THORChainSwapSwapOutput = WalletCore.TW_THORChainSwap_Proto_SwapOutput
public typealias THORChainSwapChain = WalletCore.TW_THORChainSwap_Proto_Chain
public typealias THORChainSwapErrorCode = WalletCore.TW_THORChainSwap_Proto_ErrorCode
public enum TW_THORChainSwap_Proto_Chain : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case thor
  case btc
  case eth
  case bnb
  case doge
  case bch
  case ltc
  case atom
  case avax
  case bsc
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_THORChainSwap_Proto_Chain : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_THORChainSwap_Proto_Chain]
  public typealias AllCases = [WalletCore.TW_THORChainSwap_Proto_Chain]
}
public enum TW_THORChainSwap_Proto_ErrorCode : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case ok
  case errorGeneral
  case errorInputProtoDeserialization
  case errorUnsupportedFromChain
  case errorUnsupportedToChain
  case errorInvalidFromAddress
  case errorInvalidToAddress
  case errorInvalidVaultAddress
  case errorInvalidRouterAddress
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_THORChainSwap_Proto_ErrorCode : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_THORChainSwap_Proto_ErrorCode]
  public typealias AllCases = [WalletCore.TW_THORChainSwap_Proto_ErrorCode]
}
public struct TW_THORChainSwap_Proto_Error {
  public var code: WalletCore.TW_THORChainSwap_Proto_ErrorCode
  public var message: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_THORChainSwap_Proto_Asset {
  public var chain: WalletCore.TW_THORChainSwap_Proto_Chain
  public var symbol: Swift.String
  public var tokenID: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_THORChainSwap_Proto_StreamParams {
  public var interval: Swift.String
  public var quantity: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_THORChainSwap_Proto_SwapInput {
  public var fromAsset: WalletCore.TW_THORChainSwap_Proto_Asset {
    get
    set
  }
  public var hasFromAsset: Swift.Bool {
    get
  }
  public mutating func clearFromAsset()
  public var fromAddress: Swift.String {
    get
    set
  }
  public var toAsset: WalletCore.TW_THORChainSwap_Proto_Asset {
    get
    set
  }
  public var hasToAsset: Swift.Bool {
    get
  }
  public mutating func clearToAsset()
  public var toAddress: Swift.String {
    get
    set
  }
  public var vaultAddress: Swift.String {
    get
    set
  }
  public var routerAddress: Swift.String {
    get
    set
  }
  public var fromAmount: Swift.String {
    get
    set
  }
  public var toAmountLimit: Swift.String {
    get
    set
  }
  public var affiliateFeeAddress: Swift.String {
    get
    set
  }
  public var affiliateFeeRateBp: Swift.String {
    get
    set
  }
  public var extraMemo: Swift.String {
    get
    set
  }
  public var expirationTime: Swift.UInt64 {
    get
    set
  }
  public var streamParams: WalletCore.TW_THORChainSwap_Proto_StreamParams {
    get
    set
  }
  public var hasStreamParams: Swift.Bool {
    get
  }
  public mutating func clearStreamParams()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_THORChainSwap_Proto_SwapOutput {
  public var fromChain: WalletCore.TW_THORChainSwap_Proto_Chain {
    get
    set
  }
  public var toChain: WalletCore.TW_THORChainSwap_Proto_Chain {
    get
    set
  }
  public var error: WalletCore.TW_THORChainSwap_Proto_Error {
    get
    set
  }
  public var hasError: Swift.Bool {
    get
  }
  public mutating func clearError()
  public var signingInputOneof: WalletCore.TW_THORChainSwap_Proto_SwapOutput.OneOf_SigningInputOneof? {
    get
    set
  }
  public var bitcoin: WalletCore.TW_Bitcoin_Proto_SigningInput {
    get
    set
  }
  public var ethereum: WalletCore.TW_Ethereum_Proto_SigningInput {
    get
    set
  }
  public var binance: WalletCore.TW_Binance_Proto_SigningInput {
    get
    set
  }
  public var cosmos: WalletCore.TW_Cosmos_Proto_SigningInput {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_SigningInputOneof : Swift.Equatable {
    case bitcoin(WalletCore.TW_Bitcoin_Proto_SigningInput)
    case ethereum(WalletCore.TW_Ethereum_Proto_SigningInput)
    case binance(WalletCore.TW_Binance_Proto_SigningInput)
    case cosmos(WalletCore.TW_Cosmos_Proto_SigningInput)
    public static func == (a: WalletCore.TW_THORChainSwap_Proto_SwapOutput.OneOf_SigningInputOneof, b: WalletCore.TW_THORChainSwap_Proto_SwapOutput.OneOf_SigningInputOneof) -> Swift.Bool
  }
  public init()
}
extension WalletCore.TW_THORChainSwap_Proto_Chain : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_THORChainSwap_Proto_ErrorCode : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_THORChainSwap_Proto_Error : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_THORChainSwap_Proto_Error, rhs: WalletCore.TW_THORChainSwap_Proto_Error) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_THORChainSwap_Proto_Asset : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_THORChainSwap_Proto_Asset, rhs: WalletCore.TW_THORChainSwap_Proto_Asset) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_THORChainSwap_Proto_StreamParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_THORChainSwap_Proto_StreamParams, rhs: WalletCore.TW_THORChainSwap_Proto_StreamParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_THORChainSwap_Proto_SwapInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_THORChainSwap_Proto_SwapInput, rhs: WalletCore.TW_THORChainSwap_Proto_SwapInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_THORChainSwap_Proto_SwapOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_THORChainSwap_Proto_SwapOutput, rhs: WalletCore.TW_THORChainSwap_Proto_SwapOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct THORChainSwap {
  public static func buildSwap(input: Foundation.Data) -> Foundation.Data
}
public func CardanoMinAdaAmount(tokenBundle: Foundation.Data) -> Swift.UInt64
public func TWDataCreateWithNSData(_ data: Foundation.Data) -> Swift.UnsafeRawPointer
public func TWDataNSData(_ data: Swift.UnsafeRawPointer) -> Foundation.Data
public func TWStringCreateWithNSString(_ string: Swift.String) -> Swift.UnsafeRawPointer
public func TWStringNSString(_ string: Swift.UnsafeRawPointer) -> Swift.String
public typealias TezosSigningInput = WalletCore.TW_Tezos_Proto_SigningInput
public typealias TezosSigningOutput = WalletCore.TW_Tezos_Proto_SigningOutput
public typealias TezosOperationList = WalletCore.TW_Tezos_Proto_OperationList
public typealias TezosOperation = WalletCore.TW_Tezos_Proto_Operation
public typealias TezosFA12Parameters = WalletCore.TW_Tezos_Proto_FA12Parameters
public typealias TezosTxs = WalletCore.TW_Tezos_Proto_Txs
public typealias TezosTxObject = WalletCore.TW_Tezos_Proto_TxObject
public typealias TezosFA2Parameters = WalletCore.TW_Tezos_Proto_FA2Parameters
public typealias TezosOperationParameters = WalletCore.TW_Tezos_Proto_OperationParameters
public typealias TezosTransactionOperationData = WalletCore.TW_Tezos_Proto_TransactionOperationData
public typealias TezosRevealOperationData = WalletCore.TW_Tezos_Proto_RevealOperationData
public typealias TezosDelegationOperationData = WalletCore.TW_Tezos_Proto_DelegationOperationData
public struct TW_Tezos_Proto_SigningInput {
  public var operationList: WalletCore.TW_Tezos_Proto_OperationList {
    get
    set
  }
  public var hasOperationList: Swift.Bool {
    get
  }
  public mutating func clearOperationList()
  public var encodedOperations: Foundation.Data
  public var privateKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tezos_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tezos_Proto_OperationList {
  public var branch: Swift.String
  public var operations: [WalletCore.TW_Tezos_Proto_Operation]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tezos_Proto_Operation {
  public var counter: Swift.Int64
  public var source: Swift.String
  public var fee: Swift.Int64
  public var gasLimit: Swift.Int64
  public var storageLimit: Swift.Int64
  public var kind: WalletCore.TW_Tezos_Proto_Operation.OperationKind
  public var operationData: WalletCore.TW_Tezos_Proto_Operation.OneOf_OperationData?
  public var revealOperationData: WalletCore.TW_Tezos_Proto_RevealOperationData {
    get
    set
  }
  public var transactionOperationData: WalletCore.TW_Tezos_Proto_TransactionOperationData {
    get
    set
  }
  public var delegationOperationData: WalletCore.TW_Tezos_Proto_DelegationOperationData {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_OperationData : Swift.Equatable {
    case revealOperationData(WalletCore.TW_Tezos_Proto_RevealOperationData)
    case transactionOperationData(WalletCore.TW_Tezos_Proto_TransactionOperationData)
    case delegationOperationData(WalletCore.TW_Tezos_Proto_DelegationOperationData)
    public static func == (a: WalletCore.TW_Tezos_Proto_Operation.OneOf_OperationData, b: WalletCore.TW_Tezos_Proto_Operation.OneOf_OperationData) -> Swift.Bool
  }
  public enum OperationKind : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case endorsement
    case reveal
    case transaction
    case delegation
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension WalletCore.TW_Tezos_Proto_Operation.OperationKind : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Tezos_Proto_Operation.OperationKind]
  public typealias AllCases = [WalletCore.TW_Tezos_Proto_Operation.OperationKind]
}
public struct TW_Tezos_Proto_FA12Parameters {
  public var entrypoint: Swift.String
  public var from: Swift.String
  public var to: Swift.String
  public var value: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tezos_Proto_Txs {
  public var to: Swift.String
  public var tokenID: Swift.String
  public var amount: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tezos_Proto_TxObject {
  public var from: Swift.String
  public var txs: [WalletCore.TW_Tezos_Proto_Txs]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tezos_Proto_FA2Parameters {
  public var entrypoint: Swift.String
  public var txsObject: [WalletCore.TW_Tezos_Proto_TxObject]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tezos_Proto_OperationParameters {
  public var parameters: WalletCore.TW_Tezos_Proto_OperationParameters.OneOf_Parameters?
  public var fa12Parameters: WalletCore.TW_Tezos_Proto_FA12Parameters {
    get
    set
  }
  public var fa2Parameters: WalletCore.TW_Tezos_Proto_FA2Parameters {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Parameters : Swift.Equatable {
    case fa12Parameters(WalletCore.TW_Tezos_Proto_FA12Parameters)
    case fa2Parameters(WalletCore.TW_Tezos_Proto_FA2Parameters)
    public static func == (a: WalletCore.TW_Tezos_Proto_OperationParameters.OneOf_Parameters, b: WalletCore.TW_Tezos_Proto_OperationParameters.OneOf_Parameters) -> Swift.Bool
  }
  public init()
}
public struct TW_Tezos_Proto_TransactionOperationData {
  public var destination: Swift.String
  public var amount: Swift.Int64
  public var encodedParameter: Foundation.Data
  public var parameters: WalletCore.TW_Tezos_Proto_OperationParameters {
    get
    set
  }
  public var hasParameters: Swift.Bool {
    get
  }
  public mutating func clearParameters()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tezos_Proto_RevealOperationData {
  public var publicKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tezos_Proto_DelegationOperationData {
  public var delegate: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Tezos_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_SigningInput, rhs: WalletCore.TW_Tezos_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_SigningOutput, rhs: WalletCore.TW_Tezos_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_OperationList : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_OperationList, rhs: WalletCore.TW_Tezos_Proto_OperationList) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_Operation : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_Operation, rhs: WalletCore.TW_Tezos_Proto_Operation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_Operation.OperationKind : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Tezos_Proto_FA12Parameters : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_FA12Parameters, rhs: WalletCore.TW_Tezos_Proto_FA12Parameters) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_Txs : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_Txs, rhs: WalletCore.TW_Tezos_Proto_Txs) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_TxObject : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_TxObject, rhs: WalletCore.TW_Tezos_Proto_TxObject) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_FA2Parameters : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_FA2Parameters, rhs: WalletCore.TW_Tezos_Proto_FA2Parameters) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_OperationParameters : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_OperationParameters, rhs: WalletCore.TW_Tezos_Proto_OperationParameters) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_TransactionOperationData : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_TransactionOperationData, rhs: WalletCore.TW_Tezos_Proto_TransactionOperationData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_RevealOperationData : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_RevealOperationData, rhs: WalletCore.TW_Tezos_Proto_RevealOperationData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tezos_Proto_DelegationOperationData : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tezos_Proto_DelegationOperationData, rhs: WalletCore.TW_Tezos_Proto_DelegationOperationData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TezosMessageSigner {
  public static func formatMessage(message: Swift.String, url: Swift.String) -> Swift.String
  public static func inputToPayload(message: Swift.String) -> Swift.String
  public static func signMessage(privateKey: WalletCore.PrivateKey, message: Swift.String) -> Swift.String
  public static func verifyMessage(pubKey: WalletCore.PublicKey, message: Swift.String, signature: Swift.String) -> Swift.Bool
}
public typealias TheOpenNetworkTransfer = WalletCore.TW_TheOpenNetwork_Proto_Transfer
public typealias TheOpenNetworkJettonTransfer = WalletCore.TW_TheOpenNetwork_Proto_JettonTransfer
public typealias TheOpenNetworkSigningInput = WalletCore.TW_TheOpenNetwork_Proto_SigningInput
public typealias TheOpenNetworkSigningOutput = WalletCore.TW_TheOpenNetwork_Proto_SigningOutput
public typealias TheOpenNetworkWalletVersion = WalletCore.TW_TheOpenNetwork_Proto_WalletVersion
public typealias TheOpenNetworkSendMode = WalletCore.TW_TheOpenNetwork_Proto_SendMode
public enum TW_TheOpenNetwork_Proto_WalletVersion : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case walletV3R1
  case walletV3R2
  case walletV4R2
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_TheOpenNetwork_Proto_WalletVersion : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_TheOpenNetwork_Proto_WalletVersion]
  public typealias AllCases = [WalletCore.TW_TheOpenNetwork_Proto_WalletVersion]
}
public enum TW_TheOpenNetwork_Proto_SendMode : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case `default`
  case payFeesSeparately
  case ignoreActionPhaseErrors
  case destroyOnZeroBalance
  case attachAllInboundMessageValue
  case attachAllContractBalance
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_TheOpenNetwork_Proto_SendMode : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_TheOpenNetwork_Proto_SendMode]
  public typealias AllCases = [WalletCore.TW_TheOpenNetwork_Proto_SendMode]
}
public struct TW_TheOpenNetwork_Proto_Transfer {
  public var walletVersion: WalletCore.TW_TheOpenNetwork_Proto_WalletVersion
  public var dest: Swift.String
  public var amount: Swift.UInt64
  public var sequenceNumber: Swift.UInt32
  public var mode: Swift.UInt32
  public var expireAt: Swift.UInt32
  public var comment: Swift.String
  public var bounceable: Swift.Bool
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_TheOpenNetwork_Proto_JettonTransfer {
  public var transfer: WalletCore.TW_TheOpenNetwork_Proto_Transfer {
    get
    set
  }
  public var hasTransfer: Swift.Bool {
    get
  }
  public mutating func clearTransfer()
  public var queryID: Swift.UInt64
  public var jettonAmount: Swift.UInt64
  public var toOwner: Swift.String
  public var responseAddress: Swift.String
  public var forwardAmount: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_TheOpenNetwork_Proto_SigningInput {
  public var privateKey: Foundation.Data
  public var actionOneof: WalletCore.TW_TheOpenNetwork_Proto_SigningInput.OneOf_ActionOneof?
  public var transfer: WalletCore.TW_TheOpenNetwork_Proto_Transfer {
    get
    set
  }
  public var jettonTransfer: WalletCore.TW_TheOpenNetwork_Proto_JettonTransfer {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_ActionOneof : Swift.Equatable {
    case transfer(WalletCore.TW_TheOpenNetwork_Proto_Transfer)
    case jettonTransfer(WalletCore.TW_TheOpenNetwork_Proto_JettonTransfer)
    public static func == (a: WalletCore.TW_TheOpenNetwork_Proto_SigningInput.OneOf_ActionOneof, b: WalletCore.TW_TheOpenNetwork_Proto_SigningInput.OneOf_ActionOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_TheOpenNetwork_Proto_SigningOutput {
  public var encoded: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_TheOpenNetwork_Proto_WalletVersion : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_TheOpenNetwork_Proto_SendMode : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_TheOpenNetwork_Proto_Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_TheOpenNetwork_Proto_Transfer, rhs: WalletCore.TW_TheOpenNetwork_Proto_Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_TheOpenNetwork_Proto_JettonTransfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_TheOpenNetwork_Proto_JettonTransfer, rhs: WalletCore.TW_TheOpenNetwork_Proto_JettonTransfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_TheOpenNetwork_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_TheOpenNetwork_Proto_SigningInput, rhs: WalletCore.TW_TheOpenNetwork_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_TheOpenNetwork_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_TheOpenNetwork_Proto_SigningOutput, rhs: WalletCore.TW_TheOpenNetwork_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias ThetaSigningInput = WalletCore.TW_Theta_Proto_SigningInput
public typealias ThetaSigningOutput = WalletCore.TW_Theta_Proto_SigningOutput
public struct TW_Theta_Proto_SigningInput {
  public var chainID: Swift.String
  public var toAddress: Swift.String
  public var thetaAmount: Foundation.Data
  public var tfuelAmount: Foundation.Data
  public var sequence: Swift.UInt64
  public var fee: Foundation.Data
  public var privateKey: Foundation.Data
  public var publicKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Theta_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var signature: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Theta_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Theta_Proto_SigningInput, rhs: WalletCore.TW_Theta_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Theta_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Theta_Proto_SigningOutput, rhs: WalletCore.TW_Theta_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias TxCompilerPreSigningOutput = WalletCore.TW_TxCompiler_Proto_PreSigningOutput
public struct TW_TxCompiler_Proto_PreSigningOutput {
  public var dataHash: Foundation.Data
  public var data: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_TxCompiler_Proto_PreSigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_TxCompiler_Proto_PreSigningOutput, rhs: WalletCore.TW_TxCompiler_Proto_PreSigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TransactionCompiler {
  public static func preImageHashes(coinType: WalletCore.CoinType, txInputData: Foundation.Data) -> Foundation.Data
  public static func compileWithSignatures(coinType: WalletCore.CoinType, txInputData: Foundation.Data, signatures: WalletCore.DataVector, publicKeys: WalletCore.DataVector) -> Foundation.Data
  public static func compileWithSignaturesAndPubKeyType(coinType: WalletCore.CoinType, txInputData: Foundation.Data, signatures: WalletCore.DataVector, publicKeys: WalletCore.DataVector, pubKeyType: WalletCore.PublicKeyType) -> Foundation.Data
}
public struct TransactionDecoder {
  public static func decode(coinType: WalletCore.CoinType, encodedTx: Foundation.Data) -> Foundation.Data
}
public typealias TronTransferContract = WalletCore.TW_Tron_Proto_TransferContract
public typealias TronTransferAssetContract = WalletCore.TW_Tron_Proto_TransferAssetContract
public typealias TronTransferTRC20Contract = WalletCore.TW_Tron_Proto_TransferTRC20Contract
public typealias TronFreezeBalanceContract = WalletCore.TW_Tron_Proto_FreezeBalanceContract
public typealias TronFreezeBalanceV2Contract = WalletCore.TW_Tron_Proto_FreezeBalanceV2Contract
public typealias TronUnfreezeBalanceV2Contract = WalletCore.TW_Tron_Proto_UnfreezeBalanceV2Contract
public typealias TronWithdrawExpireUnfreezeContract = WalletCore.TW_Tron_Proto_WithdrawExpireUnfreezeContract
public typealias TronDelegateResourceContract = WalletCore.TW_Tron_Proto_DelegateResourceContract
public typealias TronUnDelegateResourceContract = WalletCore.TW_Tron_Proto_UnDelegateResourceContract
public typealias TronUnfreezeBalanceContract = WalletCore.TW_Tron_Proto_UnfreezeBalanceContract
public typealias TronUnfreezeAssetContract = WalletCore.TW_Tron_Proto_UnfreezeAssetContract
public typealias TronVoteAssetContract = WalletCore.TW_Tron_Proto_VoteAssetContract
public typealias TronVoteWitnessContract = WalletCore.TW_Tron_Proto_VoteWitnessContract
public typealias TronWithdrawBalanceContract = WalletCore.TW_Tron_Proto_WithdrawBalanceContract
public typealias TronTriggerSmartContract = WalletCore.TW_Tron_Proto_TriggerSmartContract
public typealias TronBlockHeader = WalletCore.TW_Tron_Proto_BlockHeader
public typealias TronTransaction = WalletCore.TW_Tron_Proto_Transaction
public typealias TronSigningInput = WalletCore.TW_Tron_Proto_SigningInput
public typealias TronSigningOutput = WalletCore.TW_Tron_Proto_SigningOutput
public struct TW_Tron_Proto_TransferContract {
  public var ownerAddress: Swift.String
  public var toAddress: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_TransferAssetContract {
  public var assetName: Swift.String
  public var ownerAddress: Swift.String
  public var toAddress: Swift.String
  public var amount: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_TransferTRC20Contract {
  public var contractAddress: Swift.String
  public var ownerAddress: Swift.String
  public var toAddress: Swift.String
  public var amount: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_FreezeBalanceContract {
  public var ownerAddress: Swift.String
  public var frozenBalance: Swift.Int64
  public var frozenDuration: Swift.Int64
  public var resource: Swift.String
  public var receiverAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_FreezeBalanceV2Contract {
  public var ownerAddress: Swift.String
  public var frozenBalance: Swift.Int64
  public var resource: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_UnfreezeBalanceV2Contract {
  public var ownerAddress: Swift.String
  public var unfreezeBalance: Swift.Int64
  public var resource: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_WithdrawExpireUnfreezeContract {
  public var ownerAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_DelegateResourceContract {
  public var ownerAddress: Swift.String
  public var resource: Swift.String
  public var balance: Swift.Int64
  public var receiverAddress: Swift.String
  public var lock: Swift.Bool
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_UnDelegateResourceContract {
  public var ownerAddress: Swift.String
  public var resource: Swift.String
  public var balance: Swift.Int64
  public var receiverAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_UnfreezeBalanceContract {
  public var ownerAddress: Swift.String
  public var resource: Swift.String
  public var receiverAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_UnfreezeAssetContract {
  public var ownerAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_VoteAssetContract {
  public var ownerAddress: Swift.String
  public var voteAddress: [Swift.String]
  public var support: Swift.Bool
  public var count: Swift.Int32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_VoteWitnessContract {
  public var ownerAddress: Swift.String
  public var votes: [WalletCore.TW_Tron_Proto_VoteWitnessContract.Vote]
  public var support: Swift.Bool
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public struct Vote {
    public var voteAddress: Swift.String
    public var voteCount: Swift.Int64
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_Tron_Proto_WithdrawBalanceContract {
  public var ownerAddress: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_TriggerSmartContract {
  public var ownerAddress: Swift.String
  public var contractAddress: Swift.String
  public var callValue: Swift.Int64
  public var data: Foundation.Data
  public var callTokenValue: Swift.Int64
  public var tokenID: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_BlockHeader {
  public var timestamp: Swift.Int64
  public var txTrieRoot: Foundation.Data
  public var parentHash: Foundation.Data
  public var number: Swift.Int64
  public var witnessAddress: Foundation.Data
  public var version: Swift.Int32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_Transaction {
  public var timestamp: Swift.Int64
  public var expiration: Swift.Int64
  public var blockHeader: WalletCore.TW_Tron_Proto_BlockHeader {
    get
    set
  }
  public var hasBlockHeader: Swift.Bool {
    get
  }
  public mutating func clearBlockHeader()
  public var feeLimit: Swift.Int64
  public var contractOneof: WalletCore.TW_Tron_Proto_Transaction.OneOf_ContractOneof?
  public var transfer: WalletCore.TW_Tron_Proto_TransferContract {
    get
    set
  }
  public var transferAsset: WalletCore.TW_Tron_Proto_TransferAssetContract {
    get
    set
  }
  public var freezeBalance: WalletCore.TW_Tron_Proto_FreezeBalanceContract {
    get
    set
  }
  public var unfreezeBalance: WalletCore.TW_Tron_Proto_UnfreezeBalanceContract {
    get
    set
  }
  public var unfreezeAsset: WalletCore.TW_Tron_Proto_UnfreezeAssetContract {
    get
    set
  }
  public var withdrawBalance: WalletCore.TW_Tron_Proto_WithdrawBalanceContract {
    get
    set
  }
  public var voteAsset: WalletCore.TW_Tron_Proto_VoteAssetContract {
    get
    set
  }
  public var voteWitness: WalletCore.TW_Tron_Proto_VoteWitnessContract {
    get
    set
  }
  public var triggerSmartContract: WalletCore.TW_Tron_Proto_TriggerSmartContract {
    get
    set
  }
  public var transferTrc20Contract: WalletCore.TW_Tron_Proto_TransferTRC20Contract {
    get
    set
  }
  public var freezeBalanceV2: WalletCore.TW_Tron_Proto_FreezeBalanceV2Contract {
    get
    set
  }
  public var unfreezeBalanceV2: WalletCore.TW_Tron_Proto_UnfreezeBalanceV2Contract {
    get
    set
  }
  public var withdrawExpireUnfreeze: WalletCore.TW_Tron_Proto_WithdrawExpireUnfreezeContract {
    get
    set
  }
  public var delegateResource: WalletCore.TW_Tron_Proto_DelegateResourceContract {
    get
    set
  }
  public var undelegateResource: WalletCore.TW_Tron_Proto_UnDelegateResourceContract {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_ContractOneof : Swift.Equatable {
    case transfer(WalletCore.TW_Tron_Proto_TransferContract)
    case transferAsset(WalletCore.TW_Tron_Proto_TransferAssetContract)
    case freezeBalance(WalletCore.TW_Tron_Proto_FreezeBalanceContract)
    case unfreezeBalance(WalletCore.TW_Tron_Proto_UnfreezeBalanceContract)
    case unfreezeAsset(WalletCore.TW_Tron_Proto_UnfreezeAssetContract)
    case withdrawBalance(WalletCore.TW_Tron_Proto_WithdrawBalanceContract)
    case voteAsset(WalletCore.TW_Tron_Proto_VoteAssetContract)
    case voteWitness(WalletCore.TW_Tron_Proto_VoteWitnessContract)
    case triggerSmartContract(WalletCore.TW_Tron_Proto_TriggerSmartContract)
    case transferTrc20Contract(WalletCore.TW_Tron_Proto_TransferTRC20Contract)
    case freezeBalanceV2(WalletCore.TW_Tron_Proto_FreezeBalanceV2Contract)
    case unfreezeBalanceV2(WalletCore.TW_Tron_Proto_UnfreezeBalanceV2Contract)
    case withdrawExpireUnfreeze(WalletCore.TW_Tron_Proto_WithdrawExpireUnfreezeContract)
    case delegateResource(WalletCore.TW_Tron_Proto_DelegateResourceContract)
    case undelegateResource(WalletCore.TW_Tron_Proto_UnDelegateResourceContract)
    public static func == (a: WalletCore.TW_Tron_Proto_Transaction.OneOf_ContractOneof, b: WalletCore.TW_Tron_Proto_Transaction.OneOf_ContractOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Tron_Proto_SigningInput {
  public var transaction: WalletCore.TW_Tron_Proto_Transaction {
    get
    set
  }
  public var hasTransaction: Swift.Bool {
    get
  }
  public mutating func clearTransaction()
  public var privateKey: Foundation.Data {
    get
    set
  }
  public var txID: Swift.String {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Tron_Proto_SigningOutput {
  public var id: Foundation.Data
  public var signature: Foundation.Data
  public var refBlockBytes: Foundation.Data
  public var refBlockHash: Foundation.Data
  public var json: Swift.String
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Tron_Proto_TransferContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_TransferContract, rhs: WalletCore.TW_Tron_Proto_TransferContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_TransferAssetContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_TransferAssetContract, rhs: WalletCore.TW_Tron_Proto_TransferAssetContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_TransferTRC20Contract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_TransferTRC20Contract, rhs: WalletCore.TW_Tron_Proto_TransferTRC20Contract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_FreezeBalanceContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_FreezeBalanceContract, rhs: WalletCore.TW_Tron_Proto_FreezeBalanceContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_FreezeBalanceV2Contract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_FreezeBalanceV2Contract, rhs: WalletCore.TW_Tron_Proto_FreezeBalanceV2Contract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_UnfreezeBalanceV2Contract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_UnfreezeBalanceV2Contract, rhs: WalletCore.TW_Tron_Proto_UnfreezeBalanceV2Contract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_WithdrawExpireUnfreezeContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_WithdrawExpireUnfreezeContract, rhs: WalletCore.TW_Tron_Proto_WithdrawExpireUnfreezeContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_DelegateResourceContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_DelegateResourceContract, rhs: WalletCore.TW_Tron_Proto_DelegateResourceContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_UnDelegateResourceContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_UnDelegateResourceContract, rhs: WalletCore.TW_Tron_Proto_UnDelegateResourceContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_UnfreezeBalanceContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_UnfreezeBalanceContract, rhs: WalletCore.TW_Tron_Proto_UnfreezeBalanceContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_UnfreezeAssetContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_UnfreezeAssetContract, rhs: WalletCore.TW_Tron_Proto_UnfreezeAssetContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_VoteAssetContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_VoteAssetContract, rhs: WalletCore.TW_Tron_Proto_VoteAssetContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_VoteWitnessContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_VoteWitnessContract, rhs: WalletCore.TW_Tron_Proto_VoteWitnessContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_VoteWitnessContract.Vote : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_VoteWitnessContract.Vote, rhs: WalletCore.TW_Tron_Proto_VoteWitnessContract.Vote) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_WithdrawBalanceContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_WithdrawBalanceContract, rhs: WalletCore.TW_Tron_Proto_WithdrawBalanceContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_TriggerSmartContract : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_TriggerSmartContract, rhs: WalletCore.TW_Tron_Proto_TriggerSmartContract) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_BlockHeader : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_BlockHeader, rhs: WalletCore.TW_Tron_Proto_BlockHeader) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_Transaction, rhs: WalletCore.TW_Tron_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_SigningInput, rhs: WalletCore.TW_Tron_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Tron_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Tron_Proto_SigningOutput, rhs: WalletCore.TW_Tron_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TronMessageSigner {
  public static func signMessage(privateKey: WalletCore.PrivateKey, message: Swift.String) -> Swift.String
  public static func verifyMessage(pubKey: WalletCore.PublicKey, message: Swift.String, signature: Swift.String) -> Swift.Bool
}
public struct UniversalAssetID : Swift.CustomStringConvertible, Swift.Equatable, Swift.Hashable {
  public enum Prefix : Swift.String {
    case coin
    case token
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let coin: WalletCore.CoinType
  public let token: Swift.String
  public var description: Swift.String {
    get
  }
  public init(coin: WalletCore.CoinType, token: Swift.String = "")
  public init?(string: Swift.String)
  public static func == (a: WalletCore.UniversalAssetID, b: WalletCore.UniversalAssetID) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.UniversalAssetID : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public typealias UtxoSigningInput = WalletCore.TW_Utxo_Proto_SigningInput
public typealias UtxoLockTime = WalletCore.TW_Utxo_Proto_LockTime
public typealias UtxoTxIn = WalletCore.TW_Utxo_Proto_TxIn
public typealias UtxoTxOut = WalletCore.TW_Utxo_Proto_TxOut
public typealias UtxoPreSigningOutput = WalletCore.TW_Utxo_Proto_PreSigningOutput
public typealias UtxoSighash = WalletCore.TW_Utxo_Proto_Sighash
public typealias UtxoPreSerialization = WalletCore.TW_Utxo_Proto_PreSerialization
public typealias UtxoTxInClaim = WalletCore.TW_Utxo_Proto_TxInClaim
public typealias UtxoSerializedTransaction = WalletCore.TW_Utxo_Proto_SerializedTransaction
public typealias UtxoError = WalletCore.TW_Utxo_Proto_Error
public typealias UtxoInputSelector = WalletCore.TW_Utxo_Proto_InputSelector
public typealias UtxoSigningMethod = WalletCore.TW_Utxo_Proto_SigningMethod
public typealias UtxoSighashType = WalletCore.TW_Utxo_Proto_SighashType
public enum TW_Utxo_Proto_Error : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case ok
  case invalidLeafHash
  case invalidSighashType
  case invalidLockTime
  case invalidTxid
  case sighashFailed
  case missingSighashMethod
  case failedEncoding
  case insufficientInputs
  case noOutputsSpecified
  case missingChangeScriptPubkey
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Utxo_Proto_Error : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Utxo_Proto_Error]
  public typealias AllCases = [WalletCore.TW_Utxo_Proto_Error]
}
public enum TW_Utxo_Proto_InputSelector : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case selectAscending
  case selectInOrder
  case selectDescending
  case useAll
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Utxo_Proto_InputSelector : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Utxo_Proto_InputSelector]
  public typealias AllCases = [WalletCore.TW_Utxo_Proto_InputSelector]
}
public enum TW_Utxo_Proto_SigningMethod : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case legacy
  case segwit
  case taprootAll
  case taprootOnePrevout
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Utxo_Proto_SigningMethod : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Utxo_Proto_SigningMethod]
  public typealias AllCases = [WalletCore.TW_Utxo_Proto_SigningMethod]
}
public enum TW_Utxo_Proto_SighashType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case useDefault
  case all
  case none
  case single
  case allPlusAnyoneCanPay
  case nonePlusAnyoneCanPay
  case singlePlusAnyoneCanPay
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Utxo_Proto_SighashType : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_Utxo_Proto_SighashType]
  public typealias AllCases = [WalletCore.TW_Utxo_Proto_SighashType]
}
public struct TW_Utxo_Proto_SigningInput {
  public var version: Swift.Int32
  public var lockTime: WalletCore.TW_Utxo_Proto_LockTime {
    get
    set
  }
  public var hasLockTime: Swift.Bool {
    get
  }
  public mutating func clearLockTime()
  public var inputs: [WalletCore.TW_Utxo_Proto_TxIn]
  public var outputs: [WalletCore.TW_Utxo_Proto_TxOut]
  public var inputSelector: WalletCore.TW_Utxo_Proto_InputSelector
  public var weightBase: Swift.UInt64
  public var changeScriptPubkey: Foundation.Data
  public var disableChangeOutput: Swift.Bool
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Utxo_Proto_LockTime {
  public var variant: WalletCore.TW_Utxo_Proto_LockTime.OneOf_Variant?
  public var blocks: Swift.UInt32 {
    get
    set
  }
  public var seconds: Swift.UInt32 {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Variant : Swift.Equatable {
    case blocks(Swift.UInt32)
    case seconds(Swift.UInt32)
    public static func == (a: WalletCore.TW_Utxo_Proto_LockTime.OneOf_Variant, b: WalletCore.TW_Utxo_Proto_LockTime.OneOf_Variant) -> Swift.Bool
  }
  public init()
}
public struct TW_Utxo_Proto_TxIn {
  public var txid: Foundation.Data
  public var vout: Swift.UInt32
  public var value: Swift.UInt64
  public var sequence: Swift.UInt32
  public var scriptPubkey: Foundation.Data
  public var sighashType: WalletCore.TW_Utxo_Proto_SighashType
  public var signingMethod: WalletCore.TW_Utxo_Proto_SigningMethod
  public var weightEstimate: Swift.UInt64
  public var leafHash: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Utxo_Proto_TxOut {
  public var value: Swift.UInt64
  public var scriptPubkey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Utxo_Proto_PreSigningOutput {
  public var error: WalletCore.TW_Utxo_Proto_Error
  public var txid: Foundation.Data
  public var sighashes: [WalletCore.TW_Utxo_Proto_Sighash]
  public var inputs: [WalletCore.TW_Utxo_Proto_TxIn]
  public var outputs: [WalletCore.TW_Utxo_Proto_TxOut]
  public var weightEstimate: Swift.UInt64
  public var feeEstimate: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Utxo_Proto_Sighash {
  public var sighash: Foundation.Data
  public var signingMethod: WalletCore.TW_Utxo_Proto_SigningMethod
  public var sighashType: WalletCore.TW_Utxo_Proto_SighashType
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Utxo_Proto_PreSerialization {
  public var version: Swift.Int32
  public var lockTime: WalletCore.TW_Utxo_Proto_LockTime {
    get
    set
  }
  public var hasLockTime: Swift.Bool {
    get
  }
  public mutating func clearLockTime()
  public var inputs: [WalletCore.TW_Utxo_Proto_TxInClaim]
  public var outputs: [WalletCore.TW_Utxo_Proto_TxOut]
  public var weightBase: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Utxo_Proto_TxInClaim {
  public var txid: Foundation.Data
  public var vout: Swift.UInt32
  public var value: Swift.UInt64
  public var sequence: Swift.UInt32
  public var scriptSig: Foundation.Data
  public var witnessItems: [Foundation.Data]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Utxo_Proto_SerializedTransaction {
  public var error: WalletCore.TW_Utxo_Proto_Error
  public var encoded: Foundation.Data
  public var txid: Foundation.Data
  public var weight: Swift.UInt64
  public var fee: Swift.UInt64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Utxo_Proto_Error : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Utxo_Proto_InputSelector : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Utxo_Proto_SigningMethod : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Utxo_Proto_SighashType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_Utxo_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Utxo_Proto_SigningInput, rhs: WalletCore.TW_Utxo_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Utxo_Proto_LockTime : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Utxo_Proto_LockTime, rhs: WalletCore.TW_Utxo_Proto_LockTime) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Utxo_Proto_TxIn : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Utxo_Proto_TxIn, rhs: WalletCore.TW_Utxo_Proto_TxIn) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Utxo_Proto_TxOut : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Utxo_Proto_TxOut, rhs: WalletCore.TW_Utxo_Proto_TxOut) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Utxo_Proto_PreSigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Utxo_Proto_PreSigningOutput, rhs: WalletCore.TW_Utxo_Proto_PreSigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Utxo_Proto_Sighash : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Utxo_Proto_Sighash, rhs: WalletCore.TW_Utxo_Proto_Sighash) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Utxo_Proto_PreSerialization : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Utxo_Proto_PreSerialization, rhs: WalletCore.TW_Utxo_Proto_PreSerialization) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Utxo_Proto_TxInClaim : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Utxo_Proto_TxInClaim, rhs: WalletCore.TW_Utxo_Proto_TxInClaim) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Utxo_Proto_SerializedTransaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Utxo_Proto_SerializedTransaction, rhs: WalletCore.TW_Utxo_Proto_SerializedTransaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias VeChainClause = WalletCore.TW_VeChain_Proto_Clause
public typealias VeChainSigningInput = WalletCore.TW_VeChain_Proto_SigningInput
public typealias VeChainSigningOutput = WalletCore.TW_VeChain_Proto_SigningOutput
public struct TW_VeChain_Proto_Clause {
  public var to: Swift.String
  public var value: Foundation.Data
  public var data: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_VeChain_Proto_SigningInput {
  public var chainTag: Swift.UInt32
  public var blockRef: Swift.UInt64
  public var expiration: Swift.UInt32
  public var clauses: [WalletCore.TW_VeChain_Proto_Clause]
  public var gasPriceCoef: Swift.UInt32
  public var gas: Swift.UInt64
  public var dependsOn: Foundation.Data
  public var nonce: Swift.UInt64
  public var privateKey: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_VeChain_Proto_SigningOutput {
  public var encoded: Foundation.Data
  public var signature: Foundation.Data
  public var error: WalletCore.TW_Common_Proto_SigningError
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_VeChain_Proto_Clause : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_VeChain_Proto_Clause, rhs: WalletCore.TW_VeChain_Proto_Clause) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_VeChain_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_VeChain_Proto_SigningInput, rhs: WalletCore.TW_VeChain_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_VeChain_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_VeChain_Proto_SigningOutput, rhs: WalletCore.TW_VeChain_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class Wallet : Swift.Hashable, Swift.Equatable {
  final public let identifier: Swift.String
  final public var keyURL: Foundation.URL
  final public var key: WalletCore.StoredKey
  final public var accounts: [WalletCore.Account] {
    get
  }
  public init(keyURL: Foundation.URL, key: WalletCore.StoredKey)
  final public func getAccount(password: Swift.String, coin: WalletCore.CoinType) throws -> WalletCore.Account
  final public func getAccount(password: Swift.String, coin: WalletCore.CoinType, derivation: WalletCore.Derivation) throws -> WalletCore.Account
  final public func getAccounts(password: Swift.String, coins: [WalletCore.CoinType]) throws -> [WalletCore.Account]
  final public func privateKey(password: Swift.String, coin: WalletCore.CoinType) throws -> WalletCore.PrivateKey
  final public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: WalletCore.Wallet, rhs: WalletCore.Wallet) -> Swift.Bool
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
public enum WalletType {
  case encryptedKey
  case hierarchicalDeterministicWallet
  public static func == (a: WalletCore.WalletType, b: WalletCore.WalletType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum WalletError : Foundation.LocalizedError {
  case invalidKeyType
  public static func == (a: WalletCore.WalletError, b: WalletCore.WalletError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias WalletConnectParseRequestInput = WalletCore.TW_WalletConnect_Proto_ParseRequestInput
public typealias WalletConnectParseRequestOutput = WalletCore.TW_WalletConnect_Proto_ParseRequestOutput
public typealias WalletConnectProtocol = WalletCore.TW_WalletConnect_Proto_Protocol
public typealias WalletConnectMethod = WalletCore.TW_WalletConnect_Proto_Method
public enum TW_WalletConnect_Proto_Protocol : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case v2
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_WalletConnect_Proto_Protocol : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_WalletConnect_Proto_Protocol]
  public typealias AllCases = [WalletCore.TW_WalletConnect_Proto_Protocol]
}
public enum TW_WalletConnect_Proto_Method : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case unknown
  case cosmosSignAmino
  case solanaSignTransaction
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_WalletConnect_Proto_Method : Swift.CaseIterable {
  public static var allCases: [WalletCore.TW_WalletConnect_Proto_Method]
  public typealias AllCases = [WalletCore.TW_WalletConnect_Proto_Method]
}
public struct TW_WalletConnect_Proto_ParseRequestInput {
  public var `protocol`: WalletCore.TW_WalletConnect_Proto_Protocol
  public var method: WalletCore.TW_WalletConnect_Proto_Method
  public var payload: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_WalletConnect_Proto_ParseRequestOutput {
  public var error: WalletCore.TW_Common_Proto_SigningError {
    get
    set
  }
  public var errorMessage: Swift.String {
    get
    set
  }
  public var signingInputOneof: WalletCore.TW_WalletConnect_Proto_ParseRequestOutput.OneOf_SigningInputOneof? {
    get
    set
  }
  public var binance: WalletCore.TW_Binance_Proto_SigningInput {
    get
    set
  }
  public var solana: WalletCore.TW_Solana_Proto_SigningInput {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_SigningInputOneof : Swift.Equatable {
    case binance(WalletCore.TW_Binance_Proto_SigningInput)
    case solana(WalletCore.TW_Solana_Proto_SigningInput)
    public static func == (a: WalletCore.TW_WalletConnect_Proto_ParseRequestOutput.OneOf_SigningInputOneof, b: WalletCore.TW_WalletConnect_Proto_ParseRequestOutput.OneOf_SigningInputOneof) -> Swift.Bool
  }
  public init()
}
extension WalletCore.TW_WalletConnect_Proto_Protocol : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_WalletConnect_Proto_Method : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension WalletCore.TW_WalletConnect_Proto_ParseRequestInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_WalletConnect_Proto_ParseRequestInput, rhs: WalletCore.TW_WalletConnect_Proto_ParseRequestInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_WalletConnect_Proto_ParseRequestOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_WalletConnect_Proto_ParseRequestOutput, rhs: WalletCore.TW_WalletConnect_Proto_ParseRequestOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class WalletConnectRequest {
  public static func parse(coin: WalletCore.CoinType, input: Foundation.Data) -> Foundation.Data
  @objc deinit
}
public struct Watch : Swift.Codable, Swift.Equatable {
  public var coin: WalletCore.CoinType
  public var name: Swift.String
  public var address: Swift.String
  public var xpub: Swift.String?
  public init(coin: WalletCore.CoinType, name: Swift.String, address: Swift.String, xpub: Swift.String?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: WalletCore.Watch, b: WalletCore.Watch) -> Swift.Bool
}
public typealias WavesTransferMessage = WalletCore.TW_Waves_Proto_TransferMessage
public typealias WavesLeaseMessage = WalletCore.TW_Waves_Proto_LeaseMessage
public typealias WavesCancelLeaseMessage = WalletCore.TW_Waves_Proto_CancelLeaseMessage
public typealias WavesSigningInput = WalletCore.TW_Waves_Proto_SigningInput
public typealias WavesSigningOutput = WalletCore.TW_Waves_Proto_SigningOutput
public struct TW_Waves_Proto_TransferMessage {
  public var amount: Swift.Int64
  public var asset: Swift.String
  public var fee: Swift.Int64
  public var feeAsset: Swift.String
  public var to: Swift.String
  public var attachment: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Waves_Proto_LeaseMessage {
  public var amount: Swift.Int64
  public var to: Swift.String
  public var fee: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Waves_Proto_CancelLeaseMessage {
  public var leaseID: Swift.String
  public var fee: Swift.Int64
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Waves_Proto_SigningInput {
  public var timestamp: Swift.Int64
  public var privateKey: Foundation.Data
  public var messageOneof: WalletCore.TW_Waves_Proto_SigningInput.OneOf_MessageOneof?
  public var transferMessage: WalletCore.TW_Waves_Proto_TransferMessage {
    get
    set
  }
  public var leaseMessage: WalletCore.TW_Waves_Proto_LeaseMessage {
    get
    set
  }
  public var cancelLeaseMessage: WalletCore.TW_Waves_Proto_CancelLeaseMessage {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case transferMessage(WalletCore.TW_Waves_Proto_TransferMessage)
    case leaseMessage(WalletCore.TW_Waves_Proto_LeaseMessage)
    case cancelLeaseMessage(WalletCore.TW_Waves_Proto_CancelLeaseMessage)
    public static func == (a: WalletCore.TW_Waves_Proto_SigningInput.OneOf_MessageOneof, b: WalletCore.TW_Waves_Proto_SigningInput.OneOf_MessageOneof) -> Swift.Bool
  }
  public init()
}
public struct TW_Waves_Proto_SigningOutput {
  public var signature: Foundation.Data
  public var json: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Waves_Proto_TransferMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Waves_Proto_TransferMessage, rhs: WalletCore.TW_Waves_Proto_TransferMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Waves_Proto_LeaseMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Waves_Proto_LeaseMessage, rhs: WalletCore.TW_Waves_Proto_LeaseMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Waves_Proto_CancelLeaseMessage : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Waves_Proto_CancelLeaseMessage, rhs: WalletCore.TW_Waves_Proto_CancelLeaseMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Waves_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Waves_Proto_SigningInput, rhs: WalletCore.TW_Waves_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Waves_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Waves_Proto_SigningOutput, rhs: WalletCore.TW_Waves_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct WebAuthn {
  public static func getPublicKey(attestationObject: Foundation.Data) -> WalletCore.PublicKey?
  public static func getRSValues(signature: Foundation.Data) -> Foundation.Data
  public static func reconstructOriginalMessage(authenticatorData: Foundation.Data, clientDataJSON: Foundation.Data) -> Foundation.Data
}
public typealias ZilliqaTransaction = WalletCore.TW_Zilliqa_Proto_Transaction
public typealias ZilliqaSigningInput = WalletCore.TW_Zilliqa_Proto_SigningInput
public typealias ZilliqaSigningOutput = WalletCore.TW_Zilliqa_Proto_SigningOutput
public struct TW_Zilliqa_Proto_Transaction {
  public var messageOneof: WalletCore.TW_Zilliqa_Proto_Transaction.OneOf_MessageOneof?
  public var transfer: WalletCore.TW_Zilliqa_Proto_Transaction.Transfer {
    get
    set
  }
  public var rawTransaction: WalletCore.TW_Zilliqa_Proto_Transaction.Raw {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_MessageOneof : Swift.Equatable {
    case transfer(WalletCore.TW_Zilliqa_Proto_Transaction.Transfer)
    case rawTransaction(WalletCore.TW_Zilliqa_Proto_Transaction.Raw)
    public static func == (a: WalletCore.TW_Zilliqa_Proto_Transaction.OneOf_MessageOneof, b: WalletCore.TW_Zilliqa_Proto_Transaction.OneOf_MessageOneof) -> Swift.Bool
  }
  public struct Transfer {
    public var amount: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Raw {
    public var amount: Foundation.Data
    public var code: Foundation.Data
    public var data: Foundation.Data
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct TW_Zilliqa_Proto_SigningInput {
  public var version: Swift.UInt32
  public var nonce: Swift.UInt64
  public var to: Swift.String
  public var gasPrice: Foundation.Data
  public var gasLimit: Swift.UInt64
  public var privateKey: Foundation.Data
  public var transaction: WalletCore.TW_Zilliqa_Proto_Transaction {
    get
    set
  }
  public var hasTransaction: Swift.Bool {
    get
  }
  public mutating func clearTransaction()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct TW_Zilliqa_Proto_SigningOutput {
  public var signature: Foundation.Data
  public var json: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension WalletCore.TW_Zilliqa_Proto_Transaction : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Zilliqa_Proto_Transaction, rhs: WalletCore.TW_Zilliqa_Proto_Transaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Zilliqa_Proto_Transaction.Transfer : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Zilliqa_Proto_Transaction.Transfer, rhs: WalletCore.TW_Zilliqa_Proto_Transaction.Transfer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Zilliqa_Proto_Transaction.Raw : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Zilliqa_Proto_Transaction.Raw, rhs: WalletCore.TW_Zilliqa_Proto_Transaction.Raw) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Zilliqa_Proto_SigningInput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Zilliqa_Proto_SigningInput, rhs: WalletCore.TW_Zilliqa_Proto_SigningInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.TW_Zilliqa_Proto_SigningOutput : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: WalletCore.TW_Zilliqa_Proto_SigningOutput, rhs: WalletCore.TW_Zilliqa_Proto_SigningOutput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCore.AESPaddingMode : Swift.Equatable {}
extension WalletCore.AESPaddingMode : Swift.Hashable {}
extension WalletCore.AESPaddingMode : Swift.RawRepresentable {}
extension WalletCore.BitcoinSigHashType : Swift.Equatable {}
extension WalletCore.BitcoinSigHashType : Swift.Hashable {}
extension WalletCore.BitcoinSigHashType : Swift.RawRepresentable {}
extension WalletCore.Blockchain : Swift.Equatable {}
extension WalletCore.Blockchain : Swift.Hashable {}
extension WalletCore.Blockchain : Swift.RawRepresentable {}
extension WalletCore.CoinType : Swift.Equatable {}
extension WalletCore.CoinType : Swift.Hashable {}
extension WalletCore.CoinType : Swift.RawRepresentable {}
extension WalletCore.Curve : Swift.Equatable {}
extension WalletCore.Curve : Swift.Hashable {}
extension WalletCore.Curve : Swift.RawRepresentable {}
extension WalletCore.Derivation : Swift.Equatable {}
extension WalletCore.Derivation : Swift.Hashable {}
extension WalletCore.Derivation : Swift.RawRepresentable {}
extension WalletCore.EthereumChainID : Swift.Equatable {}
extension WalletCore.EthereumChainID : Swift.Hashable {}
extension WalletCore.EthereumChainID : Swift.RawRepresentable {}
extension WalletCore.FilecoinAddressType : Swift.Equatable {}
extension WalletCore.FilecoinAddressType : Swift.Hashable {}
extension WalletCore.FilecoinAddressType : Swift.RawRepresentable {}
extension WalletCore.FiroAddressType : Swift.Equatable {}
extension WalletCore.FiroAddressType : Swift.Hashable {}
extension WalletCore.FiroAddressType : Swift.RawRepresentable {}
extension WalletCore.HDVersion : Swift.Equatable {}
extension WalletCore.HDVersion : Swift.Hashable {}
extension WalletCore.HDVersion : Swift.RawRepresentable {}
extension WalletCore.HRP : Swift.Equatable {}
extension WalletCore.HRP : Swift.Hashable {}
extension WalletCore.HRP : Swift.RawRepresentable {}
extension WalletCore.KeyStore.Error : Swift.Equatable {}
extension WalletCore.KeyStore.Error : Swift.Hashable {}
extension WalletCore.PrivateKeyType : Swift.Equatable {}
extension WalletCore.PrivateKeyType : Swift.Hashable {}
extension WalletCore.PrivateKeyType : Swift.RawRepresentable {}
extension WalletCore.PublicKeyType : Swift.Equatable {}
extension WalletCore.PublicKeyType : Swift.Hashable {}
extension WalletCore.PublicKeyType : Swift.RawRepresentable {}
extension WalletCore.Purpose : Swift.Equatable {}
extension WalletCore.Purpose : Swift.Hashable {}
extension WalletCore.Purpose : Swift.RawRepresentable {}
extension WalletCore.SS58AddressType : Swift.Equatable {}
extension WalletCore.SS58AddressType : Swift.Hashable {}
extension WalletCore.SS58AddressType : Swift.RawRepresentable {}
extension WalletCore.StellarMemoType : Swift.Equatable {}
extension WalletCore.StellarMemoType : Swift.Hashable {}
extension WalletCore.StellarMemoType : Swift.RawRepresentable {}
extension WalletCore.StellarPassphrase : Swift.Equatable {}
extension WalletCore.StellarPassphrase : Swift.Hashable {}
extension WalletCore.StellarPassphrase : Swift.RawRepresentable {}
extension WalletCore.StellarVersionByte : Swift.Equatable {}
extension WalletCore.StellarVersionByte : Swift.Hashable {}
extension WalletCore.StellarVersionByte : Swift.RawRepresentable {}
extension WalletCore.StoredKeyEncryption : Swift.Equatable {}
extension WalletCore.StoredKeyEncryption : Swift.Hashable {}
extension WalletCore.StoredKeyEncryption : Swift.RawRepresentable {}
extension WalletCore.StoredKeyEncryptionLevel : Swift.Equatable {}
extension WalletCore.StoredKeyEncryptionLevel : Swift.Hashable {}
extension WalletCore.StoredKeyEncryptionLevel : Swift.RawRepresentable {}
extension WalletCore.UniversalAssetID.Prefix : Swift.Equatable {}
extension WalletCore.UniversalAssetID.Prefix : Swift.Hashable {}
extension WalletCore.UniversalAssetID.Prefix : Swift.RawRepresentable {}
extension WalletCore.WalletType : Swift.Equatable {}
extension WalletCore.WalletType : Swift.Hashable {}
extension WalletCore.WalletError : Swift.Equatable {}
extension WalletCore.WalletError : Swift.Hashable {}
