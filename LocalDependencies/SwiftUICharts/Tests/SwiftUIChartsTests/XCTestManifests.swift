#if !canImport(ObjectiveC)
import XCTest

extension BarChartTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BarChartTests = [
        ("testBarAverage", testBarAverage),
        ("testBarGetDataPoint", testBarGetDataPoint),
        ("testBarGetPointLocation", testBarGetPointLocation),
        ("testBarGetYLabels", testBarGetYLabels),
        ("testBarIsGreaterThanTwoTrue", testBarIsGreaterThanTwoTrue),
        ("testBarMaxValue", testBarMaxValue),
        ("testBarMinValue", testBarMinValue),
        ("testBarRange", testBarRange),
    ]
}

extension GroupedBarChartTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GroupedBarChartTests = [
        ("testGroupedBarAverage", testGroupedBarAverage),
        ("testGroupedBarGetDataPoint", testGroupedBarGetDataPoint),
        ("testGroupedBarGetPointLocation", testGroupedBarGetPointLocation),
        ("testGroupedBarGetYLabels", testGroupedBarGetYLabels),
        ("testGroupedBarIsGreaterThanTwoTrue", testGroupedBarIsGreaterThanTwoTrue),
        ("testGroupedBarMaxValue", testGroupedBarMaxValue),
        ("testGroupedBarMinValue", testGroupedBarMinValue),
        ("testGroupedBarRange", testGroupedBarRange),
    ]
}

extension LineChartPathTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LineChartPathTests = [
        ("testDistance", testDistance),
        ("testDistanceToTouch", testDistanceToTouch),
        ("testGetIndicatorLocation", testGetIndicatorLocation),
        ("testGetLengthToTouch", testGetLengthToTouch),
        ("testGetLocationOnPath", testGetLocationOnPath),
        ("testGetPercentageOfPath", testGetPercentageOfPath),
        ("testGetTotalLength", testGetTotalLength),
        ("testRelativePoint", testRelativePoint),
    ]
}

extension LineChartTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LineChartTests = [
        ("testLineAverage", testLineAverage),
        ("testLineGetDataPoint", testLineGetDataPoint),
        ("testLineGetPointLocation", testLineGetPointLocation),
        ("testLineGetYLabels", testLineGetYLabels),
        ("testLineIsGreaterThanTwoFalse", testLineIsGreaterThanTwoFalse),
        ("testLineIsGreaterThanTwoTrue", testLineIsGreaterThanTwoTrue),
        ("testLineMaxValue", testLineMaxValue),
        ("testLineMinValue", testLineMinValue),
        ("testLineRange", testLineRange),
    ]
}

extension MultiLineChartTest {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MultiLineChartTest = [
        ("testMultiIsGreaterThanTwoFalse", testMultiIsGreaterThanTwoFalse),
        ("testMultiIsGreaterThanTwoTrue", testMultiIsGreaterThanTwoTrue),
        ("testMultiLineAverage", testMultiLineAverage),
        ("testMultiLineGetDataPoint", testMultiLineGetDataPoint),
        ("testMultiLineGetPointLocation", testMultiLineGetPointLocation),
        ("testMultiLineGetYLabels", testMultiLineGetYLabels),
        ("testMultiLineMaxValue", testMultiLineMaxValue),
        ("testMultiLineMinValue", testMultiLineMinValue),
        ("testMultiLineRange", testMultiLineRange),
    ]
}

extension StackedBarChartTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StackedBarChartTests = [
        ("testStackedBarAverage", testStackedBarAverage),
        ("testStackedBarGetDataPoint", testStackedBarGetDataPoint),
        ("testStackedBarGetPointLocation", testStackedBarGetPointLocation),
        ("testStackedBarGetYLabels", testStackedBarGetYLabels),
        ("testStackedBarIsGreaterThanTwoTrue", testStackedBarIsGreaterThanTwoTrue),
        ("testStackedBarMaxValue", testStackedBarMaxValue),
        ("testStackedBarMinValue", testStackedBarMinValue),
        ("testStackedBarRange", testStackedBarRange),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(BarChartTests.__allTests__BarChartTests),
        testCase(GroupedBarChartTests.__allTests__GroupedBarChartTests),
        testCase(LineChartPathTests.__allTests__LineChartPathTests),
        testCase(LineChartTests.__allTests__LineChartTests),
        testCase(MultiLineChartTest.__allTests__MultiLineChartTest),
        testCase(StackedBarChartTests.__allTests__StackedBarChartTests),
    ]
}
#endif
