//
//  ToxManager.swift
//  oChat
//
//  Created by Vitalii Sosin on 9.05.2025.
//  Copyright ¬© 2025 SosinVitalii.com. All rights reserved.
//

import SwiftUI
import Combine
import Foundation
import ToxSwift

/// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å ToxService.
@MainActor
final class ToxManager: ObservableObject {

  // MARK: - Singleton
  static let shared = ToxManager()

  // MARK: - –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–ª—è

  /// –†–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π ToxServiceProtocol (–≤–∞—à–∞ –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ C-–∫–æ–¥–æ–º toxcore).
  var toxService: ToxServiceProtocol!
  private let cryptoService = CryptoService.shared
  private let zipArchiveService = ZipArchiveService.shared
  private let fileManagerService = FileManagerService.shared

  /// –ü—É–ª —Ç–∞—Å–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö AsyncStream.
  private var tasks = Set<Task<Void, Never>>()

  // MARK: - –ü—É–±–ª–∏–∫—É–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ (–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ UI)

  /// –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å ¬´–¥–æ–±–∞–≤—å –≤ –¥—Ä—É–∑—å—è¬ª.
  @Published var friendRequests: [FriendRequest] = []

  /// –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π (–∏—Ö ID, –∏–º—è, —Å—Ç–∞—Ç—É—Å –∏ —Ç.–¥.).
  @Published var friends: [FriendModel] = FriendModel.mockList()

  /// –í—Å–µ –≤—Ö–æ–¥—è—â–∏–µ/–∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–¥–µ–ª—å–Ω–æ –ø–æ —á–∞—Ç–∞–º).
  @Published var messages: [UInt32: [ChatMessage]] = [
    1: ChatMessage.mockList(friendID: 1),
    2: ChatMessage.mockList(friendID: 2),
    3: ChatMessage.mockList(friendID: 3)
  ]

  /// –ê–∫—Ç–∏–≤–Ω—ã–µ/–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏.
  @Published var conferences: [ConferenceModel] = []

  /// –°–ø–∏—Å–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö/–∏—Å—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ (–¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞).
  @Published var fileTransfers: [FileTransferModel] = []

  /// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –ø–æ friendID).
  @Published var activeCalls: [UInt32: CallState] = [:]

  /// –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DHT (–¥–ª—è UI)
  @Published var connectionState: ConnectionStatus = .offline

  @AppStorage("toxSavedata")
  private var toxSavedataBase64: String = ""

  // MARK: - Bindings helpers

  // === –î–†–£–ó–¨–Ø ================================================================
  func bindingForFriend(_ friend: FriendModel) -> Binding<FriendModel>? {
    guard let index = friends.firstIndex(of: friend) else { return nil }
    return Binding(
      get: { self.friends[index] },
      set: { self.friends[index] = $0 }
    )
  }

  // === –ó–ê–ü–†–û–°–´ –í –î–†–£–ó–¨–Ø ======================================================
  func bindingForFriendRequest(_ request: FriendRequest) -> Binding<FriendRequest>? {
    guard let index = friendRequests.firstIndex(of: request) else { return nil }
    return Binding(
      get: { self.friendRequests[index] },
      set: { self.friendRequests[index] = $0 }
    )
  }

  // === –ö–û–ù–§–ï–†–ï–ù–¶–ò–ò ===========================================================
  func bindingForConference(_ conf: ConferenceModel) -> Binding<ConferenceModel>? {
    guard let index = conferences.firstIndex(of: conf) else { return nil }
    return Binding(
      get: { self.conferences[index] },
      set: { self.conferences[index] = $0 }
    )
  }

  // === –ü–ï–†–ï–î–ê–ß–ò –§–ê–ô–õ–û–í =======================================================
  func bindingForFileTransfer(_ transfer: FileTransferModel) -> Binding<FileTransferModel>? {
    guard let index = fileTransfers.firstIndex(of: transfer) else { return nil }
    return Binding(
      get: { self.fileTransfers[index] },
      set: { self.fileTransfers[index] = $0 }
    )
  }

  // === –°–û–û–ë–©–ï–ù–ò–Ø (—Å–ª–æ–≤–∞—Ä—å) ===================================================
  /// Binding –∫–æ –≤—Å–µ–º—É –º–∞—Å—Å–∏–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥—Ä—É–≥–æ–º.
  func bindingForMessages(friendId: UInt32) -> Binding<[ChatMessage]> {
    Binding(
      get: { self.messages[friendId, default: []] },
      set: { self.messages[friendId] = $0 }
    )
  }

  // === –û–î–ù–û –°–û–û–ë–©–ï–ù–ò–ï ==========================================================
  func bindingForMessage(friendId: UInt32,
                         message: ChatMessage) -> Binding<ChatMessage>? {
    guard let friendMsgs = messages[friendId],
          let index = friendMsgs.firstIndex(of: message) else {
      return nil
    }
    return Binding(
      get: { self.messages[friendId]![index] },
      set: { self.messages[friendId]![index] = $0 }
    )
  }

  // === –°–û–°–¢–û–Ø–ù–ò–ï –ó–í–û–ù–ö–ê (—Å–ª–æ–≤–∞—Ä—å) ============================================
  func bindingForCallState(friendId: UInt32) -> Binding<CallState>? {
    guard activeCalls[friendId] != nil else { return nil }
    return Binding(
      get: { self.activeCalls[friendId]! },
      set: { self.activeCalls[friendId] = $0 }
    )
  }

  // MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

  private init() {
    startToxService()
  }

  // MARK: - –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª Tox-—è–¥—Ä–∞

  func startToxService() {
    connectionState = .inProgress
    do {
      let bootstrapNodes = try JSONLoader.load([ToxNode].self, fromFile: "bootstrapNodes")
      var toxServiceOptions = ToxServiceOptions()

      // NEW: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if let saved = Data(base64Encoded: toxSavedataBase64), !saved.isEmpty {
        toxServiceOptions.savedataType = .toxSave
        toxServiceOptions.savedata = saved
        print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Tox-—Å–µ—Å—Å–∏—é (\(saved.count) B)")
      }

      self.toxService = try ToxService(options: toxServiceOptions, bootstrapNodes: bootstrapNodes)
    } catch {
      fatalError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ToxService: \(error)")
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–æ—Ç–æ–∫–∞–º —Å–æ–±—ã—Ç–∏–π
    observeStreams()

    // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: –∑–∞–≥—Ä—É–∑–∏–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
    Task {
      await refreshFriendsList()
      await refreshConferencesList()
    }
  }

  /// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–¥—Ä–æ –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏.
  /// –í—ã–∑—ã–≤–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Ö–æ–¥–∏—Ç –≤ background / –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è.
  func shutdown() async {
    connectionState = .offline
    // 3. –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–µ—Ç–∏ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã toxcore
    await toxService.shutdown()
    print("üö® –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Tox-—è–¥—Ä–∞")
  }

  /// –ü–æ–ª–Ω—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç —è–¥—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è.
  /// –í—ã–∑—ã–≤–∞–π—Ç–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ foreground –∏–ª–∏ –ø—Ä–∏ –≤—ã—è–≤–ª–µ–Ω–Ω–æ–π –ø–æ—Ç–µ—Ä–µ —Å–≤—è–∑–∏.
  func restart() async throws {
    connectionState = .inProgress
    do {
      // 3. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —è–¥—Ä–æ –≤–Ω—É—Ç—Ä–∏ ToxService
      try await toxService.restart()

      // 5. –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã UI –æ—Ç—Ä–∞–∑–∏–ª –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await refreshFriendsList()
      await refreshConferencesList()

      print("üîÑ Tox-—è–¥—Ä–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ")
    } catch {
      print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ ToxService: \(error)")
      throw error
    }
  }

  // MARK: - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è (AsyncStream)

  private func observeStreams() {
    // 1. –°–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    let msgTask = Task {
      for await incoming in await toxService.incomingMessages {
        await handleIncomingMessage(incoming)
      }
    }

    // 2. –°–æ–±—ã—Ç–∏—è –ø–æ —Ñ–∞–π–ª–∞–º
    let fileTask = Task {
      for await fileEvent in await toxService.fileEvents {
        handleFileEvent(fileEvent)
      }
    }

    // 3. –°–æ–±—ã—Ç–∏—è –∑–≤–æ–Ω–∫–æ–≤
    let callTask = Task {
      for await callEvent in await toxService.callEvents {
        handleCallEvent(callEvent)
      }
    }

    // 4. –°–æ–±—ã—Ç–∏—è –¥—Ä—É–∑–µ–π
    let friendTask = Task {
      for await friendEvent in await toxService.friendEvents {
        await handleFriendEvent(friendEvent)
      }
    }

    // 5. –°–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
    let confTask = Task {
      for await conferenceEvent in await toxService.conferenceEvents {
        handleConferenceEvent(conferenceEvent)
      }
    }

    // 6. –°—Ç–∞—Ç—É—Å DHT-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    let dhtTask = Task {
      for await connectionState in await toxService.connectionStatusEvents {
        handleDHTConnectionState(connectionState)
      }
    }

    tasks = [msgTask, fileTask, callTask, friendTask, confTask, dhtTask]
  }

  // MARK: - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π

  private func handleIncomingMessage(_ incoming: IncomingMessage) async {
    guard let jsonData = incoming.text.data(using: .utf8),
          let model = try? JSONDecoder().decode(MessengerNetworkRequestModel.self, from: jsonData) else {
      return
    }

    let toxAddressDecrypt = cryptoService.decrypt(model.toxAddress)
    guard let idx = friends.firstIndex(where: { $0.id == incoming.friendID }) else { return }
    let pushNotificationTokenDecrypt = cryptoService.decrypt(model.pushNotificationToken)
    friends[idx].pushNotificationToken = pushNotificationTokenDecrypt
    friends[idx].address = toxAddressDecrypt
    guard let messageTextDecrypt = cryptoService.decrypt(model.messageText) else { return }

    let newMessage = ChatMessage(
      messageId: nil,
      friendID: incoming.friendID,
      message: messageTextDecrypt,
      replyMessageText: nil,
      reactions: nil,
      messageType: .incoming,
      date: Date(),
      messageStatus: .sent,
      attachments: []
    )
    messages[incoming.friendID]?.append(newMessage)
    persistState()
  }

  private func handleFileEvent(_ event: FileEvent) {
    switch event {
    case let .incomingRequest(friendID, fileID, kind, size, fileName):
      // –°–æ–∑–¥–∞–¥–∏–º –º–æ–¥–µ–ª—å "–≤—Ö–æ–¥—è—â–µ–≥–æ —Ñ–∞–π–ª–∞" –∏ –¥–æ–±–∞–≤–∏–º –≤ —Å–ø–∏—Å–æ–∫
      let transfer = FileTransferModel(
        friendID: friendID,
        fileID: fileID,
        fileName: fileName,
        fileSize: size,
        progress: 0.0,
        status: .incoming,
        fileData: Data() // üö® –ù–µ –∑–Ω–∞—é —á—Ç–æ —Ç—É—Ç –¥–µ–ª–∞—Ç—å
      )
      fileTransfers.append(transfer)

    case let .chunkRequest(friendID, fileID, position, length):
      // –î—Ä—É–≥ –ø—Ä–æ—Å–∏—Ç —É –Ω–∞—Å –∫—É—Å–æ–∫ —Ñ–∞–π–ª–∞ - –∑–¥–µ—Å—å –º–æ–∂–µ–º –≤—ã—á–∏—Ç–∞—Ç—å –Ω—É–∂–Ω—ã–π –∫—É—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
      Task {
        // –ü—Ä–∏–º–µ—Ä: –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–ø—É—Å—Ç–æ–π Data –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
        let dataToSend = Data()
        do {
          try await toxService.sendFileChunk(
            toFriend: friendID,
            fileID: fileID,
            position: position,
            data: dataToSend
          )
        } catch {
          print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—É—Å–æ–∫ —Ñ–∞–π–ª–∞: \(error)")
        }
      }

    case let .chunk(friendID, fileID, position, data):
      // –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∫—É—Å–æ–∫ —Ñ–∞–π–ª–∞ –æ—Ç –¥—Ä—É–≥–∞
      // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É–¥–∞-—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –¥–∏—Å–∫).
      // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å progress, –µ—Å–ª–∏ –∑–Ω–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä.
      if let idx = fileTransfers.firstIndex(where: { $0.fileID == fileID && $0.friendID == friendID }) {
        // –î–æ–ø—É—Å—Ç–∏–º, —É—Å–ª–æ–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º "–ø—Ä–æ–≥—Ä–µ—Å—Å" –Ω–∞ —Ä–∞–∑–º–µ—Ä chunk
        fileTransfers[idx].progress += Double(data.count)
      }

    case let .stateChanged(friendID, fileID, control):
      // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø–∞—É–∑–∞, –æ—Ç–º–µ–Ω–∞, –∏ —Ç.–¥.)
      if let idx = fileTransfers.firstIndex(where: { $0.fileID == fileID && $0.friendID == friendID }) {
        switch control {
        case .pause:
          fileTransfers[idx].status = .paused
        case .resume:
          fileTransfers[idx].status = .inProgress
        case .cancel, .kill:
          fileTransfers[idx].status = .cancelled
        }
      }
    }
  }

  private func handleCallEvent(_ event: CallEvent) {
    switch event {
    case let .call(friendID, audioEnabled, videoEnabled):
      // –£ –¥—Ä—É–≥–∞ –ª–∏–±–æ –Ω–∞—á–∞–ª—Å—è –≤—ã–∑–æ–≤, –ª–∏–±–æ —Å—Ç–∞—Ç—É—Å –ø–æ–º–µ–Ω—è–ª—Å—è
      activeCalls[friendID] = CallState(
        audioEnabled: audioEnabled,
        videoEnabled: videoEnabled
      )

    case let .audioFrame(friendID, sampleCount, channels, sampleRate, data):
      // –ü–æ–ª—É—á–∏–ª–∏ PCM-–∞—É–¥–∏–æ - –º–æ–∂–Ω–æ –ø—Ä–æ–∫–∏–Ω—É—Ç—å –≤ –∞—É–¥–∏–æ-—Ä–µ–Ω–¥–µ—Ä
      print("–ê—É–¥–∏–æ-—Ñ—Ä–µ–π–º –æ—Ç \(friendID), \(sampleCount) —Å–µ–º–ø–ª–æ–≤, \(channels) –∫–∞–Ω–∞–ª(–∞), rate=\(sampleRate)")

    case let .videoFrame(friendID, width, height, y, u, v, yStride, uStride, vStride):
      // –ü–æ–ª—É—á–∏–ª–∏ –≤–∏–¥–µ–æ-—Ñ—Ä–µ–π–º YUV420 - –º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —á–µ—Ä–µ–∑ Metal/SwiftUI/AVFoundation
      print("–í–∏–¥–µ–æ-—Ñ—Ä–µ–π–º –æ—Ç \(friendID), —Ä–∞–∑–º–µ—Ä \(width)x\(height)")
    }
  }

  private func handleFriendEvent(_ event: FriendEvent) async {
    switch event {
    case let .request(publicKey, message):
      guard let jsonData = message.data(using: .utf8),
            let model = try? JSONDecoder().decode(MessengerNetworkRequestModel.self, from: jsonData) else {
        return
      }
      let friendRequest = FriendRequest(
        publicKey: publicKey,
        meshAddress: nil,
        toxAddress: nil,
        publicKeyForEncryption: model.publicKeyForEncryption,
        pushNotificationToken: nil,
        chatRules: model.chatRules
      )
      friendRequests.append(friendRequest)

    case let .connectionStatusChanged(friendID, state):
      guard let idx = friends.firstIndex(where: { $0.id == friendID }) else { return }
      switch state {
      case .none:
        friends[idx].connectionState = .offline
      case .tcp:
        friends[idx].connectionState = .online
      case .udp:
        friends[idx].connectionState = .online
      }

    case let .typing(friendID, isTyping):
      guard let idx = friends.firstIndex(where: { $0.id == friendID }) else { return }
      friends[idx].isTyping = isTyping
      print("–î—Ä—É–≥ \(friendID) typing = \(isTyping)")

    case let .readReceipt(friendID, messageID):
      // –£–¥–æ–±–Ω–æ –æ—Ç–º–µ—á–∞—Ç—å, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ

      guard let idx = messages[friendID]?.firstIndex(where: { $0.messageId == messageID }) else { return }
      messages[friendID]?[idx].messageStatus = .read
      print("–î—Ä—É–≥ \(friendID) –ø—Ä–æ—á–∏—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ \(messageID)")

    case .lossyPacket: break
    case .losslessPacket: break
    case .nameChanged: break
    case .statusMessageChanged: break
    case .userStatusChanged: break
    }
  }

  private func handleConferenceEvent(_ event: ConferenceEvent) {
    switch event {
    case let .invited(friendID, cookie):
      // –ù–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é
      print("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é –æ—Ç –¥—Ä—É–≥–∞ \(friendID). Cookie = \(cookie)")

    case let .connected(conferenceID):
      // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
      print("–ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ \(conferenceID)")
      Task {
        await refreshConferencesList()
      }

    case let .message(conferenceID, peerID, kind, text):
      // –ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      print("–ö–æ–Ω—Ñ. \(conferenceID): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç \(peerID) => \(text)")

    case let .titleChanged(conferenceID, title):
      if let idx = conferences.firstIndex(where: { $0.id == conferenceID }) {
        conferences[idx].title = title
      }

    case let .peerNameChanged(conferenceID, peerID, name):
      print("–ö–æ–Ω—Ñ. \(conferenceID): peer \(peerID) —Å–º–µ–Ω–∏–ª –∏–º—è –Ω–∞ \(name)")

    case let .peerListChanged(conferenceID):
      print("–ö–æ–Ω—Ñ. \(conferenceID): —Å–æ—Å—Ç–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑–º–µ–Ω–∏–ª—Å—è")
    }
  }

  // MARK: - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ DHT

  private func handleDHTConnectionState(_ state: ToxConnectionState) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ @Published-—Å–≤–æ–π—Å—Ç–≤–æ, —á—Ç–æ–±—ã UI –º–æ–≥ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
    switch state {
    case .none:
      connectionState = .offline
    case .tcp:
      connectionState = .online
    case .udp:
      connectionState = .online
    }

    print("–ò–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å DHT-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: \(state)")
    Task {
      print("OwnAddress: \(await getOwnAddress())")
    }
  }

  // MARK: - –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤

  func refreshFriendsList() async { // üö® –ü–æ–¥—É–º–∞—Ç—å –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å
    //    let friendIDs = await toxService.friendList()
    //    var updatedFriends: [FriendModel] = []
    //
    //    for friendID in friendIDs {
    //      let name = await toxService.getFriendName(friendID)
    //      let connectionState = await toxService.getFriendConnectionStatus(forID: friendID)
    //
    //      let model = FriendModel(
    //        id: friendID,
    //        address: T##String,
    //        meshAddress: T##String?,
    //        encryptionPublicKey: T##String?,
    //        pushNotificationToken: T##String?,
    //        contactEmoji: T##String?,
    //        connectionState: T##ConnectionStatus,
    //        isTyping: T##Bool,
    //        unreadCount: T##Int
    //      )
    //
    //      let model = FriendModel(
    //        id: friendID,
    //        name: name,
    //        statusMessage: statusMessage,
    //        userStatus: userStatus,
    //        connectionState: connectionState
    //      )
    //      updatedFriends.append(model)
    //    }
    //
    //    self.friends = updatedFriends
  }

  func refreshConferencesList() async {
    let confIDs = await toxService.conferenceList()
    var updatedConfs: [ConferenceModel] = []

    for cid in confIDs {
      let title = await toxService.getConferenceTitle(cid)
      let type = await toxService.getConferenceType(cid)

      let model = ConferenceModel(
        id: cid,
        title: title,
        type: type
      )
      updatedConfs.append(model)
    }

    self.conferences = updatedConfs
  }

  // MARK: - –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è View (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π, —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ç.–¥.)

  public func acceptFriendRequest(friendRequest: FriendRequest) async {
    // –ö—Ç–æ-—Ç–æ —Å—Ç—É—á–∏—Ç—Å—è –∫ –Ω–∞–º. –ú–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    do {
      let friendID = try await toxService.acceptFriendRequest(publicKey: friendRequest.publicKey)
      print("‚úÖ –ü—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å; friendID = \(friendID)")
      let friend = FriendModel(
        id: friendID,
        address: "",
        meshAddress: nil,
        encryptionPublicKey: friendRequest.publicKeyForEncryption,
        pushNotificationToken: nil,
        avatar: .init(),
        connectionState: .online,
        isTyping: false,
        unreadCount: .zero,
        chatRules: friendRequest.chatRules
      )

      friends.append(friend)
    } catch {
      print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å: \(error)")
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –¥—Ä—É–≥—É.
  func sendMessage(to friendID: UInt32, text: String) async {
    guard let idx = friends.firstIndex(where: { $0.id == friendID }) else { return }
    guard let encryptionPublicKey = friends[idx].encryptionPublicKey else { return }

    let messageTextEncrypt = cryptoService.encrypt(text, publicKey: encryptionPublicKey)
    let pushNotificationTokenEncrypt = cryptoService.encrypt(Secrets.pushNotificationToken, publicKey: encryptionPublicKey)
    let toxAddressEncrypt = await cryptoService.encrypt(getOwnAddress(), publicKey: encryptionPublicKey)

    let model = MessengerNetworkRequestModel(
      messageID: UUID().uuidString,
      messageText: messageTextEncrypt,
      replyMessageText: nil,
      reactions: nil,
      attachments: nil,
      meshAddress: nil,
      toxAddress: toxAddressEncrypt,
      publicKeyForEncryption: cryptoService.publicKey(),
      pushNotificationToken: pushNotificationTokenEncrypt,
      chatRules: friends[idx].chatRules
    )
    guard let json = createJSONString(from: model), let jsonData = json.data(using: .utf8) else { return }

    // —Å—á—ë—Ç—á–∏–∫ –±–∞–π—Ç–æ–≤
    if jsonData.count > 1_300 {
      // JSON —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
      await sendFile(to: friendID, messageText: text, attachments: [])
      return
    }

    do {
      let messageId = try await toxService.sendMessage(
        toFriend: friendID,
        text: json
      )
      // –°–æ—Ö—Ä–∞–Ω–∏–º –∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ (–∫–∞–∫ –∏—Å—Ö–æ–¥—è—â–µ–µ)
      let outgoing = ChatMessage(
        messageId: messageId,
        friendID: friendID,
        message: text,
        replyMessageText: nil,
        reactions: nil,
        messageType: .outgoing,
        date: Date(),
        messageStatus: .sent,
        attachments: nil
      )
      messages[friendID]?.append(outgoing)
      persistState()
    } catch {
      print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥—É \(friendID): \(error)")
    }
  }

  /// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç **—Ç–æ–ª—å–∫–æ** 76-—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å. (–ï—Å–ª–∏ –Ω—É–∂–µ–Ω PK-hex ‚Äì –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥.)
  func addFriend(addressHex: String, greeting: String) {
    Task { @MainActor in
      let cleaned = addressHex
        .replacingOccurrences(of: " ", with: "")
        .replacingOccurrences(of: "-", with: "")
        .lowercased()

      guard let addrData = Data(hexString: cleaned) else {
        print("‚ùå Tox-–∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 76 hex-—Å–∏–º–≤–æ–ª–æ–≤"); return
      }

      do {
        let id = try await toxService.addFriend(withAddress: addrData, greeting: greeting)
        print("‚úÖ friendID = \(id)")
        await refreshFriendsList()
        persistState()
      } catch {
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: \(error)")
      }
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞ –ø–æ ID.
  func removeFriend(_ friendID: UInt32) {
    Task {
      do {
        try await toxService.removeFriend(withID: friendID)
        await refreshFriendsList()
      } catch {
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞: \(error)")
      }
    }
  }

  /// –ù–∞—á–∞—Ç—å –∞—É–¥–∏–æ-–∑–≤–æ–Ω–æ–∫ (–±–µ–∑ –≤–∏–¥–µ–æ).
  func startAudioCall(with friendID: UInt32) {
    Task {
      do {
        try await toxService.startCall(
          friendID: friendID,
          audioBitRate: 48_000,
          videoBitRate: 0
        )
        print("–ó–≤–æ–Ω–æ–∫ –Ω–∞—á–∞—Ç")
      } catch {
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∑–≤–æ–Ω–∫–∞: \(error)")
      }
    }
  }

  /// –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫.
  func answerCall(from friendID: UInt32) {
    Task {
      do {
        try await toxService.answerCall(
          friendID: friendID,
          audioBitRate: 48_000,
          videoBitRate: 0
        )
        print("–ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç")
      } catch {
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–≤–æ–Ω–∫–∞: \(error)")
      }
    }
  }

  /// –ó–∞–≤–µ—Ä—à–∏—Ç—å (–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å) –∑–≤–æ–Ω–æ–∫.
  func hangupCall(with friendID: UInt32) {
    Task {
      do {
        try await toxService.controlCall(
          friendID: friendID,
          control: .cancel
        )
      } catch {
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞: \(error)")
      }
    }
  }

  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é.
  func createConference() {
    Task {
      do {
        let newConfID = try await toxService.createConference()
        print("–°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è #\(newConfID)")
        await refreshConferencesList()
      } catch {
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é: \(error)")
      }
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é.
  func sendMessage(inConference confID: UInt32, text: String) {
    Task {
      do {
        try await toxService.sendMessage(
          inConference: confID,
          text: text,
          type: .normal
        )
      } catch {
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ—É \(confID): \(error)")
      }
    }
  }

  /// –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é.
  func inviteToConference(friendID: UInt32, confID: UInt32) {
    Task {
      do {
        try await toxService.inviteToConference(
          friendID: friendID,
          conferenceID: confID
        )
      } catch {
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞ \(friendID) –≤ –∫–æ–Ω—Ñ—É \(confID): \(error)")
      }
    }
  }

  /// –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ—â–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
  func leaveConference(confID: UInt32, goodbyeText: String = "–ü–æ–∫–∞!") {
    Task {
      do {
        try await toxService.leaveConference(confID, partingMessage: goodbyeText)
        await refreshConferencesList()
      } catch {
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ \(confID): \(error)")
      }
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å (–∑–∞–ø—É—à–∏—Ç—å) —Ñ–∞–π–ª –¥—Ä—É–≥—É —Ü–µ–ª–∏–∫–æ–º.
  func sendFile(
    to friendID: UInt32,
    messageText: String?,
    attachments: [MediaAttachmentURL]
  ) async {
    guard let idx = friends.firstIndex(where: { $0.id == friendID }) else { return }
    guard let encryptionPublicKey = friends[idx].encryptionPublicKey else { return }
    do {
      let valid = attachments.compactMap { $0 }
      var mapped = [MediaAttachmentData]()
      mapped.reserveCapacity(valid.count)
      for attachment in valid {
        mapped.append(try await attachment.mapToData())
      }

      var messageTextEncrypt: String?
      if let messageText {
        messageTextEncrypt = cryptoService.encrypt(messageText, publicKey: encryptionPublicKey)
      }
      let pushNotificationTokenEncrypt = cryptoService.encrypt(Secrets.pushNotificationToken, publicKey: encryptionPublicKey)
      let toxAddressEncrypt = await cryptoService.encrypt(getOwnAddress(), publicKey: encryptionPublicKey)

      let model = MessengerNetworkRequestModel(
        messageID: UUID().uuidString,
        messageText: messageTextEncrypt,
        replyMessageText: nil,
        reactions: nil,
        attachments: mapped,
        meshAddress: nil,
        toxAddress: toxAddressEncrypt,
        publicKeyForEncryption: cryptoService.publicKey(),
        pushNotificationToken: pushNotificationTokenEncrypt,
        chatRules: friends[idx].chatRules
      )
      guard let json = createJSONString(from: model), let jsonData = json.data(using: .utf8) else { return }

      let password = cryptoService.generatePassword(length: 30)
      let passwordEncrypt = cryptoService.encrypt(password, publicKey: encryptionPublicKey)
      guard let passwordEncrypt,
            let passwordEncodedString = passwordEncrypt.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed) else {
        return
      }
      let zipFileURL = try await zipArchiveService.zipFiles(
        files: [(name: UUID().uuidString, data: jsonData)],
        archiveName: passwordEncodedString,
        password: password
      )

      let fileSize = UInt64(jsonData.count)
      let zipFile = try Data(contentsOf: zipFileURL)
      let fileName = UUID().uuidString

      let fileID = try await toxService.sendFile(
        toFriend: friendID,
        size: fileSize,
        fileName: fileName
      )

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã —Ç—Ä–µ–∫–∞—Ç—å
      let transfer = FileTransferModel(
        friendID: friendID,
        fileID: fileID,
        fileName: fileName,
        fileSize: fileSize,
        progress: 0,
        status: .inProgress,
        fileData: zipFile
      )
      fileTransfers.append(transfer)

      // –ñ–¥—ë–º, –∫–æ–≥–¥–∞ –¥—Ä—É–≥ –∑–∞–ø—Ä–æ—Å–∏—Ç chunk-–∏ (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É)
    } catch {
      print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: \(error)")
    }
  }

  // MARK: - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞

  func getOwnAddress() async -> String {
    await toxService.getOwnAddress()
  }

  func getOwnPublicKey() async -> Data {
    await toxService.getOwnPublicKey()
  }

  func getOwnSecretKey() async -> Data {
    await toxService.getOwnSecretKey()
  }

  func setDisplayName(_ name: String) {
    Task {
      do {
        try await toxService.setDisplayName(name)
      } catch {
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è: \(error)")
      }
    }
  }

  func getDisplayName() async -> String {
    await toxService.getDisplayName()
  }

  func setStatusMessage(_ message: String) {
    Task {
      do {
        try await toxService.setStatusMessage(message)
      } catch {
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ: \(error)")
      }
    }
  }

  func friendExists(_ friendID: UInt32) async -> Bool {
    await toxService.friendExists(friendID)
  }

  func getFriendLastOnline(_ friendID: UInt32) async -> UInt64 {
    await toxService.getFriendLastOnline(friendID)
  }

  func getFriendPublicKey(_ friendID: UInt32) async -> Data {
    await toxService.getFriendPublicKey(friendID)
  }

  func getFileID(ofFriend friendID: UInt32, at index: UInt32) async -> UInt32? {
    await toxService.getFileID(ofFriend: friendID, at: index)
  }

  func controlFile(toFriend friendID: UInt32, fileID: UInt32, control: FileControl) {
    Task {
      do {
        try await toxService.controlFile(toFriend: friendID, fileID: fileID, control: control)
      } catch {
        print("–û—à–∏–±–∫–∞ controlFile: \(error)")
      }
    }
  }

  func seekFile(toFriend friendID: UInt32, fileID: UInt32, position: UInt64) {
    Task {
      do {
        try await toxService.seekFile(toFriend: friendID, fileID: fileID, position: position)
      } catch {
        print("–û—à–∏–±–∫–∞ seekFile: \(error)")
      }
    }
  }

  func joinConference(fromFriend friendID: UInt32, cookie: Data) {
    Task {
      do {
        let confID = try await toxService.joinConference(fromFriend: friendID, cookie: cookie)
        print("–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ #\(confID)")
        await refreshConferencesList()
      } catch {
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: \(error)")
      }
    }
  }

  func setConferenceTitle(_ conferenceID: UInt32, title: String) {
    Task {
      do {
        try await toxService.setConferenceTitle(conferenceID, title: title)
        if let idx = conferences.firstIndex(where: { $0.id == conferenceID }) {
          conferences[idx].title = title
        }
      } catch {
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: \(error)")
      }
    }
  }

  func exportSavedata() async -> Data {
    await toxService.exportSavedata()
  }

  // MARK: - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã (proxy –¥–ª—è toxService)

  static func libraryVersion() -> (major: UInt32, minor: UInt32, patch: UInt32) {
    ToxService.libraryVersion
  }

  static func isCompatible(major: UInt32, minor: UInt32, patch: UInt32) -> Bool {
    ToxService.isCompatible(major: major, minor: minor, patch: patch)
  }

  // MARK: - Persistence
  private func persistState() {
    Task.detached(priority: .background) { [weak self] in
      guard let self else { return }
      let data = await self.toxService.exportSavedata()
      let base64 = data.base64EncodedString()
      await MainActor.run {
        self.toxSavedataBase64 = base64
        print("‚ù§Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω")
      }
    }
  }
}

// MARK: - –ü—Ä–∏–º–µ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ @Published)

// MARK: - –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è hex -> Data
extension Data {
  init?(hexString: String) {
    let cleaned = hexString
      .replacingOccurrences(of: " ", with: "")
      .replacingOccurrences(of: "-", with: "")

    guard cleaned.count % 2 == 0 else {
      return nil
    }

    var data = Data(capacity: cleaned.count / 2)
    var index = cleaned.startIndex
    while index < cleaned.endIndex {
      let byteString = cleaned[index..<cleaned.index(index, offsetBy: 2)]
      if let byte = UInt8(byteString, radix: 16) {
        data.append(byte)
      } else {
        return nil
      }
      index = cleaned.index(index, offsetBy: 2)
    }

    self = data
  }
}

extension ToxManager {
  func createJSONString(from model: MessengerNetworkRequestModel) -> String? {
    let encoder = JSONEncoder()

    do {
      let jsonData = try encoder.encode(model)
      guard let jsonString = String(data: jsonData, encoding: .utf8) else {
        print("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö JSON –≤ —Å—Ç—Ä–æ–∫—É.")
        return nil
      }
      return jsonString
    } catch {
      print("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ JSON: \(error)")
      return nil
    }
  }
}

#if DEBUG
@MainActor
extension ToxManager {
  /// –ó–∞–≥–ª—É—à–∫–∞ —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏, —á—Ç–æ–±—ã –ø—Ä–µ–≤—å—é —Ä–∞–±–æ—Ç–∞–ª–æ –æ—Ñ–ª–∞–π–Ω
  static var preview: ToxManager {
    let manager = ToxManager.shared
    manager.friends = FriendModel.mockList()
    manager.messages = [
      1: ChatMessage.mockList(friendID: 1),
      2: ChatMessage.mockList(friendID: 2),
      3: ChatMessage.mockList(friendID: 3)
    ]
    manager.friendRequests = FriendRequest.mockList()
    manager.connectionState = .online
    return manager
  }
}
#endif
