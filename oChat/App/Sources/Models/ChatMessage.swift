//
//  ChatMessage.swift
//  oChat
//
//  Created by Vitalii Sosin on 14.05.2025.
//  Copyright ¬© 2025 SosinVitalii.com. All rights reserved.
//

import Foundation

/// –ú–æ–¥–µ–ª—å —á–∞—Ç–∞/—Å–æ–æ–±—â–µ–Ω–∏—è
struct ChatMessage: Identifiable, Codable, Equatable {
  // –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è SwiftUI
  let id: UUID

  /// ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ TOX
  var messageId: UInt32?

  /// ID –¥—Ä—É–≥–∞ –≤ TOX
  let friendID: UInt32

  /// –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
  var message: String

  /// –¶–∏—Ç–∏—Ä—É–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  var replyMessageText: String?

  /// –†–µ–∞–∫—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä —Å–º–∞–π–ª—ã
  var reactions: String?

  /// –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ).
  let messageType: MessageType

  /// –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  let date: Date

  /// –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
  var messageStatus: MessageStatus

  /// –ù–∞–±–æ—Ä –ª—é–±—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∑–∞–ø–∏—Å—å, —Ñ–∞–π–ª).
  var attachments: [MediaAttachmentURL]?

  init(
    messageId: UInt32?,
    friendID: UInt32,
    message: String,
    replyMessageText: String?,
    reactions: String?,
    messageType: MessageType,
    date: Date,
    messageStatus: MessageStatus,
    attachments: [MediaAttachmentURL]?
  ) {
    self.id = UUID()
    self.messageId = messageId
    self.friendID = friendID
    self.message = message
    self.replyMessageText = replyMessageText
    self.reactions = reactions
    self.messageType = messageType
    self.date = date
    self.messageStatus = messageStatus
    self.attachments = attachments
  }
}

/// –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–µ —Å—Ç–∞—Ç—É—Å—ã —Å–æ–æ–±—â–µ–Ω–∏–π
public enum MessageStatus: Codable, Equatable {
  /// –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
  /// –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏.
  case sending

  /// –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
  /// –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
  case failed

  /// –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
  /// –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.
  case sent

  /// –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  case read
}

/// –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
enum MessageType: Codable, Equatable {
  /// –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  case incoming
  /// –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  case outgoing
  /// —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
  case system
}

extension ChatMessage {
  static func mockList(friendID: UInt32, count: Int = 10) -> [ChatMessage] {
    let now = Date()
    let samples = ["–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                   "–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ üôÇ",
                   "–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?",
                   "–†–∞–±–æ—Ç–∞—é –Ω–∞–¥ oChat üöÄ",
                   "–ó–≤—É—á–∏—Ç –∫—Ä—É—Ç–æ!"]

    return (0..<count).map { idx -> ChatMessage in
      let text = samples[idx % samples.count]
      let reply = idx == 4 ? "–¶–∏—Ç–∞—Ç–∞: \(samples[1])" : nil
      let reaction = idx == 3 ? "üëç" : nil
      let type: MessageType

      if idx.isMultiple(of: 3) {
        type = .system
      } else if idx.isMultiple(of: 2) {
        type = .outgoing
      } else {
        type = .incoming
      }

      let date = Calendar.current.date(byAdding: .minute,
                                       value: -(idx * 5),
                                       to: now) ?? now
      let status: MessageStatus =
      type == .outgoing ? (idx % 3 == 0 ? .read : .sent) : .read

      return ChatMessage(
        messageId: UInt32(idx + 1),
        friendID: friendID,
        message: text,
        replyMessageText: reply,
        reactions: reaction,
        messageType: type,
        date: date,
        messageStatus: status,
        attachments: nil
      )
    }
  }

  /// –û–¥–∏–Ω–æ—á–Ω–∞—è ¬´–ø—É—Å—Ç—ã—à–∫–∞¬ª, —É–¥–æ–±–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å,
  /// –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—â—ë –Ω–µ—Ç, –Ω–æ UI —Ç—Ä–µ–±—É–µ—Ç –æ–±—ä–µ–∫—Ç.
  static let placeholder = ChatMessage(
    messageId: nil,
    friendID: 0,
    message: "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π",
    replyMessageText: nil,
    reactions: nil,
    messageType: .incoming,
    date: .distantPast,
    messageStatus: .sent,
    attachments: nil
  )
}
