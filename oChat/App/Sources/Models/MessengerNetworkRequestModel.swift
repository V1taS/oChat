//
//  MessengerNetworkRequestModel.swift
//  oChat
//
//  Created by Vitalii Sosin on 14.05.2025.
//  Copyright ¬© 2025 SosinVitalii.com. All rights reserved.
//

import Foundation

// MARK: - –ú–æ–¥–µ–ª—å —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

/// 1 372 –±–∞–π—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
/// –ï–¥–∏–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è –ª—é–±–æ–π –∏—Å—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –∏–∑ oChat.
/// –°–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ (`payload`) –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (`system`).
public struct MessengerNetworkRequestModel: Codable {

  /// –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º (—Ç–µ–∫—Å—Ç, —Ü–∏—Ç–∞—Ç—É, —Ä–µ–∞–∫—Ü–∏—é, –º–µ–¥–∏–∞‚Ä¶).
  public let payloads: [Payload]

  /// –ê–¥—Ä–µ—Å–∞, –∫–ª—é—á–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ –∏ –ø—Ä–æ—á–∏–µ –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
  public let system: SystemInfo
}

// MARK: - Payload

extension MessengerNetworkRequestModel {
  /// –í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.
  public enum Payload: Codable {
    // MARK: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
    /// –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    /// - Parameters:
    ///   - id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è.
    ///   - text: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–∞.
    case message(id: String, text: String)

    /// –û—Ç–≤–µ—Ç (reply) –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    /// - Parameters:
    ///   - id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è-–æ—Ç–≤–µ—Ç–∞.
    ///   - quotedMessageID: ID —Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ü–∏—Ç–∏—Ä—É–µ–º.
    case quote(id: String, quotedMessageID: String)

    /// –†–µ–∞–∫—Ü–∏—è (—ç–º–æ–¥–∑–∏) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    /// - Parameters:
    ///   - id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ä–µ–∞–∫—Ü–∏–∏.
    ///   - value: –¢–µ–∫—Å—Ç —Ä–µ–∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´üëç¬ª).
    case reaction(id: String, value: String)

    /// –ú–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Ñ–∞–π–ª—ã).
    /// - Parameters:
    ///   - id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞.
    ///   - attachments: –°–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–∏–π.
    case media(id: String, attachments: [MediaAttachmentData])

    /// –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–∞–Ω–Ω–µ—Ä ¬´–¥—Ä—É–∂–±–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞¬ª, ¬´–∏—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞¬ª –∏ —Ç. –¥.).
    /// - Parameters:
    ///   - id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.
    ///   - text: –¢–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    case system(id: String, text: String)

    // MARK: –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ / –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    private enum CodingKeys: String, CodingKey {
      case type, id, text, quotedMessageID, reaction, attachments
    }
    private enum Kind: String, Codable {
      case message, quote, reaction, media, system
    }

    public func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)

      switch self {
      case let .message(id, text):
        try container.encode(Kind.message, forKey: .type)
        try container.encode(id, forKey: .id)
        try container.encode(text, forKey: .text)

      case let .quote(id, quoted):
        try container.encode(Kind.quote, forKey: .type)
        try container.encode(id, forKey: .id)
        try container.encode(quoted, forKey: .quotedMessageID)

      case let .reaction(id, value):
        try container.encode(Kind.reaction, forKey: .type)
        try container.encode(id, forKey: .id)
        try container.encode(value, forKey: .reaction)

      case let .media(id, files):
        try container.encode(Kind.media, forKey: .type)
        try container.encode(id, forKey: .id)
        try container.encode(files, forKey: .attachments)

      case let .system(id, text):
        try container.encode(Kind.system, forKey: .type)
        try container.encode(id, forKey: .id)
        try container.encode(text, forKey: .text)
      }
    }

    public init(from decoder: Decoder) throws {
      let container = try decoder.container(keyedBy: CodingKeys.self)
      let kind = try container.decode(Kind.self, forKey: .type)

      switch kind {
      case .message:
        self = .message(
          id: try container.decode(String.self, forKey: .id),
          text: try container.decode(String.self, forKey: .text)
        )
      case .quote:
        self = .quote(
          id: try container.decode(String.self, forKey: .id),
          quotedMessageID: try container.decode(String.self, forKey: .quotedMessageID)
        )
      case .reaction:
        self = .reaction(
          id: try container.decode(String.self, forKey: .id),
          value: try container.decode(String.self, forKey: .reaction)
        )
      case .media:
        self = .media(
          id: try container.decode(String.self, forKey: .id),
          attachments: try container.decode([MediaAttachmentData].self, forKey: .attachments)
        )
      case .system:
        self = .system(
          id: try container.decode(String.self, forKey: .id),
          text: try container.decode(String.self, forKey: .text)
        )
      }
    }
  }
}

// MARK: - SystemInfo

extension MessengerNetworkRequestModel {
  public struct SystemInfo: Codable {
    /// –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –≤ mesh-—Å–µ—Ç–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ).
    public let meshAddress: String?

    /// TOX-–∞–¥—Ä–µ—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (76 —Å–∏–º–≤–æ–ª–æ–≤).
    public let toxAddress: String?

    /// –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    public let publicKeyForEncryption: String?

    /// –¢–æ–∫–µ–Ω APNs –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    public let pushNotificationToken: String?

    /// –ü—Ä–∞–≤–∏–ª–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, auto-delete, –∑–∞–ø—Ä–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤).
    public let chatRules: ChatRules

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    public init(
      meshAddress: String?,
      toxAddress: String?,
      publicKeyForEncryption: String?,
      pushNotificationToken: String?,
      chatRules: ChatRules = .init()
    ) {
      self.meshAddress = meshAddress
      self.toxAddress = toxAddress
      self.publicKeyForEncryption = publicKeyForEncryption
      self.pushNotificationToken = pushNotificationToken
      self.chatRules = chatRules
    }
  }
}
