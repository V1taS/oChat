//
//  ToxManager.swift
//  oChat
//
//  Created by Vitalii Sosin on 22.05.2025.
//  Copyright ¬© 2025 SosinVitalii.com. All rights reserved.
//

import Foundation
import Combine
import SwiftUI
import ToxSwift

@MainActor
final class ToxManager: ObservableObject {
  static let shared = ToxManager()

  // –ü–æ–¥–º–µ–Ω–µ–¥–∂–µ—Ä—ã
  let friendManager: FriendManager
  let chatManager: ChatManager
  let fileTransferManager: FileTransferManager
  let callManager: CallManager
  let conferenceManager: ConferenceManager
  let connectionManager: ConnectionManager
  let persistenceManager: PersistenceManager

  // Core
  let toxService: ToxServiceProtocol
  private var tasks = Set<Task<Void, Never>>()

  private init() {
    do {
      let bootstrapNodes = try JSONLoader.load([ToxNode].self, fromFile: "bootstrapNodes")
      var toxServiceOptions = ToxServiceOptions()

      // NEW: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if let data = Data(base64Encoded: UserDefaults.standard.string(forKey: "toxSavedata") ?? ""), !data.isEmpty {
        // TODO: - –ù–∞ –≤—Ä–µ–º—è –æ—Ç–∫–ª—é—á—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        //        toxServiceOptions.savedataType = .toxSave
        //        toxServiceOptions.savedata = data
        //        print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Tox-—Å–µ—Å—Å–∏—é (\(saved.count) B)")
      }

      let toxService = try ToxService(
        options: toxServiceOptions,
        bootstrapNodes: bootstrapNodes
      )
      self.toxService = toxService

      // –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
      connectionManager = ConnectionManager()
      friendManager = FriendManager(
        toxService: toxService,
        ownAddressProvider: {
          await toxService.getOwnAddress()
        },
        pushTokenProvider: {
          Secrets.pushNotificationToken ?? ""
        })
      fileTransferManager = FileTransferManager(
        toxService: toxService,
        friendManager: friendManager,
        ownAddressProvider: {
          await toxService.getOwnAddress()
        },
        pushTokenProvider: {
          Secrets.pushNotificationToken ?? ""
        })
      chatManager = ChatManager(
        toxService: toxService,
        friendManager: friendManager,
        fileTransferManager: fileTransferManager,
        ownAddressProvider: {
          await toxService.getOwnAddress()
        },
        pushTokenProvider: {
          Secrets.pushNotificationToken ?? ""
        })
      callManager = CallManager(
        toxService: toxService
      )
      conferenceManager = ConferenceManager(
        toxService: toxService
      )
      persistenceManager = PersistenceManager(
        toxService: toxService
      )

      observeStreams()
    } catch {
      fatalError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ToxService: \(error)")
    }
  }

  /// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–¥—Ä–æ –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏.
  func shutdown() async {
    connectionManager.connectionState = .offline
    // 3. –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–µ—Ç–∏ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã toxcore
    await toxService.shutdown()
    print("üö® –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Tox-—è–¥—Ä–∞")
  }

  /// –ü–æ–ª–Ω—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç —è–¥—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è.
  func restart() async throws {
    connectionManager.connectionState = .inProgress
    do {
      // 3. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —è–¥—Ä–æ –≤–Ω—É—Ç—Ä–∏ ToxService
      try await toxService.restart()
      print("üîÑ Tox-—è–¥—Ä–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ")
    } catch {
      print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ ToxService: \(error)")
      throw error
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ ToxService
  private func observeStreams() {
    tasks.insert(Task { for await friend in await toxService.friendEvents { await friendManager.handleFriendEvent(friend) } })
    tasks.insert(Task { for await msg in await toxService.incomingMessages { await chatManager.handleIncomingMessage(msg) } })
    tasks.insert(Task { for await file in await toxService.fileEvents { fileTransferManager.handleFileEvent(file) } })
    tasks.insert(Task { for await call in await toxService.callEvents { callManager.handleCallEvent(call) } })
    tasks.insert(Task { for await conf in await toxService.conferenceEvents { conferenceManager.handleConferenceEvent(conf) } })
    tasks.insert(Task { for await state in await toxService.connectionStatusEvents { connectionManager.handle(state) } })
  }
}

// MARK: - Preview

extension ToxManager {
  /// –ó–∞–≥–ª—É—à–∫–∞ —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏, —á—Ç–æ–±—ã –ø—Ä–µ–≤—å—é —Ä–∞–±–æ—Ç–∞–ª–æ –æ—Ñ–ª–∞–π–Ω
  static var preview: ToxManager {
    let manager = ToxManager.shared
    return manager
  }
}
