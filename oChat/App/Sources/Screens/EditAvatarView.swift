//
//  EditAvatarView.swift
//  oChat
//
//  Created by Vitalii Sosin on 17.05.2025.
//  Copyright ¬© 2025 SosinVitalii.com. All rights reserved.
//

import SwiftUI

struct EditAvatarView: View {

  // MARK: - Public Properties

  @EnvironmentObject var friendManager: FriendManager
  private let friendModel: FriendModel

  @State var color: Color = .blue
  @State var icon: AvatarModel.IconType = .customEmoji("?")

  // MARK: - Init

  init(friendModel: FriendModel) {
    self.friendModel = friendModel
    self.color = friendModel.avatar.color
    self.icon = friendModel.avatar.icon
  }

  // MARK: - Private States

  @Environment(\.dismiss) private var dismiss
  @FocusState private var isEmojiKeyboardFocused: Bool
  @State private var typedEmoji: String = ""

  // MARK: - View Body

  var body: some View {
    NavigationStack {
      VStack {
        Form {
          // –í–∏–∑—É–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å
          Section {
            ZStack {
              Circle()
                .foregroundColor(color.opacity(0.2))
                .frame(width: 100, height: 100)
                .shadow(color: color.opacity(0.6),
                        radius: 8, x: 0, y: 4)

              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–±–æ —ç–º–æ–¥–∑–∏, –ª–∏–±–æ SF Symbol
              switch icon {
              case .systemSymbol(let systemName):
                Image(systemName: systemName)
                  .resizable()
                  .scaledToFit()
                  .frame(maxHeight: 40)
                  .foregroundColor(color)
              case .customEmoji(let emoji):
                Text(emoji)
                  .foregroundColor(color)
                  .fontWeight(.bold)
                  .font(.system(size: 40))
              }
            }
            .frame(maxWidth: .infinity, alignment: .center)
            .padding(.vertical, 4)
          }

          // –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
          Section {
            let columns = [GridItem(.adaptive(minimum: 40), spacing: 12)]
            LazyVGrid(columns: columns, spacing: 12) {
              ForEach(availableColors, id: \.self) { color in
                ZStack {
                  Circle()
                    .foregroundColor(color)
                    .frame(width: 42, height: 42)
                    .padding(4)
                    .overlay(
                      Circle()
                        .stroke(
                          Color.gray.opacity(
                            self.color == color ? 0.8 : 0
                          ),
                          lineWidth: 2
                        )
                    )
                }
                .onTapGesture {
                  self.color = color
                }
              }
            }
            .padding(.vertical, 4)
          } header: {
            Text(localized(key: "SelectColor"))
              .padding(.leading, -16)
          }

          // –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∏–∫–æ–Ω–∫–∏
          Section {
            let columns = [GridItem(.adaptive(minimum: 40), spacing: 12)]
            LazyVGrid(columns: columns, spacing: 12) {
              ForEach(availableIcons, id: \.self) { icon in
                switch icon {
                case let .customEmoji(defaultEmoji):
                  ZStack {
                    Circle()
                      .foregroundColor(
                        (self.icon == .customEmoji(extractEmoji()))
                        ? self.color.opacity(0.2)
                        : Color.gray.opacity(0.1)
                      )
                      .frame(width: 42, height: 42)

                    Text(currentlySelectedEmoji(defaultEmoji: defaultEmoji))
                      .foregroundColor(color)
                      .fontWeight(.bold)
                      .font(.system(size: 18))
                  }
                  .onTapGesture {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç customEmoji
                    self.icon = .customEmoji(defaultEmoji)
                    typedEmoji = defaultEmoji
                    // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ‚Äî —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ ¬´—Å–∫—Ä—ã—Ç–æ–º¬ª TextField –¥–ª—è —ç–º–æ–¥–∑–∏
                    isEmojiKeyboardFocused = true
                  }

                case let .systemSymbol(sysName):
                  ZStack {
                    Circle()
                      .foregroundColor(
                        (self.icon == .systemSymbol(sysName))
                        ? color.opacity(0.2)
                        : Color.gray.opacity(0.1)
                      )
                      .frame(width: 42, height: 42)

                    Image(systemName: sysName)
                      .resizable()
                      .scaledToFit()
                      .frame(maxHeight: 15)
                      .foregroundColor(
                        (self.icon == .systemSymbol(sysName))
                        ? color
                        : .primary
                      )
                  }
                  .onTapGesture {
                    self.icon = .systemSymbol(sysName)
                  }
                }
              }
            }
            .padding(.vertical, 4)
          } header: {
            Text(localized(key: "SelectIcon"))
              .padding(.leading, -16)
          }
        }
      }
      .navigationTitle(friendModel.shortAddress)
      .navigationBarTitleDisplayMode(.large)

      // –ü—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ì–æ—Ç–æ–≤–æ" –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏
      .safeAreaInset(edge: .bottom) {
        if isEmojiKeyboardFocused {
          HStack {
            Spacer()
            Button(localized(key: "doneTitle")) {
              // –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ä—É—á–Ω—É—é
              isEmojiKeyboardFocused = false
            }
            .padding(.trailing)
          }
          .frame(maxWidth: .infinity)
          .padding(.vertical, 8)
          .background(.regularMaterial)
        }
      }

      // –ö–Ω–æ–ø–∫–∏ –≤ Toolbar
      .toolbar {
        ToolbarItem(placement: .cancellationAction) {
          Button(localized(key: "cancel")) {
            dismiss()
          }
        }
        ToolbarItem(placement: .confirmationAction) {
          Button(localized(key: "doneTitle")) {
            processCategory()
            dismiss()
          }
        }
      }

      // ¬´–°–∫—Ä—ã—Ç—ã–π¬ª TextField –¥–ª—è –≤–≤–æ–¥–∞ —ç–º–æ–¥–∑–∏
      .overlay(
        TextField("", text: $typedEmoji)
          .focused($isEmojiKeyboardFocused)
          .onChange(of: typedEmoji) { newValue, _ in
            if let last = newValue.last {
              // –ï—Å–ª–∏ –≤–≤–µ–ª–∏ —ç–º–æ–¥–∑–∏, –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
              self.icon = .customEmoji(String(last))
              isEmojiKeyboardFocused = false
              typedEmoji = ""
            }
          }
          .keyboardType(.default)
          .textInputAutocapitalization(.none)
          .frame(width: 0, height: 0)
          .opacity(0)
      )
      // –ü–æ –∑–∞–∫—Ä—ã—Ç–∏—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      .onDisappear {

      }
    }
  }

  // MARK: - Private Helpers

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  private func processCategory() {
    friendManager.bindingForFriend(friendModel)?.avatar.color.wrappedValue = self.color
    friendManager.bindingForFriend(friendModel)?.avatar.icon.wrappedValue = self.icon
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  /// –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑ —Å–ø–∏—Å–∫–∞
  private func currentlySelectedEmoji(defaultEmoji: String) -> String {
    let currentlySelectedEmoji: String
    switch self.icon {
    case let .customEmoji(userEmoji):
      currentlySelectedEmoji = userEmoji
    default:
      currentlySelectedEmoji = defaultEmoji
    }
    return currentlySelectedEmoji
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—à–∏–±–∫—É
  private func handleFailure(_ actionTitle: String) {
    Task {
      NotificationService.shared.showNegativeAlertWith(title: actionTitle)
    }
  }

  /// –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
  private func localized(key: String) -> String {
    NSLocalizedString(
      key,
      tableName: "ScreensLocalizable",
      bundle: .main,
      value: key,
      comment: ""
    )
  }

  // –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–æ–∫—É-—ç–º–æ–¥–∑–∏ –∏–∑ newCategoryIcon, –µ—Å–ª–∏ —ç—Ç–æ .customEmoji
  private func extractEmoji() -> String {
    switch self.icon {
    case let .customEmoji(e):
      return e
    default:
      return "üôÇ"
    }
  }
}

extension EditAvatarView {
  var availableColors: [Color] {
    [
      .red, .orange, .yellow, .green,
      .mint, .teal, .blue, .indigo,
      .purple, .pink, .brown, .gray,
      .black,
      .cyan,
      Color(red: 1.0, green: 0.0, blue: 1.0),
      Color(red: 0.5, green: 0.0, blue: 0.5),
      Color(red: 0.5, green: 0.0, blue: 0.0),
      Color(red: 0.0, green: 0.0, blue: 0.5),
      Color(red: 0.5, green: 0.5, blue: 0.0),
      Color(red: 1.0, green: 0.84, blue: 0.0),
      Color(red: 0.82, green: 0.41, blue: 0.12)
    ]
  }

  var availableIcons: [AvatarModel.IconType] {
    [
      // –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - ¬´–∫–∞—Å—Ç–æ–º–Ω–∞—è —ç–º–æ–¥–∑–∏¬ª
      .customEmoji("üôÇ"),

      // –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ SF Symbols
      .systemSymbol("list.bullet"),
      .systemSymbol("star.fill"),
      .systemSymbol("heart.fill"),
      .systemSymbol("flag.fill"),
      .systemSymbol("house.fill"),
      .systemSymbol("folder.fill"),
      .systemSymbol("tray.fill"),
      .systemSymbol("bell.fill"),
      .systemSymbol("cart.fill"),
      .systemSymbol("checkmark"),
      .systemSymbol("person.fill"),
      .systemSymbol("pencil"),
      .systemSymbol("envelope.fill"),
      .systemSymbol("calendar"),
      .systemSymbol("paperplane.fill"),
      .systemSymbol("clock.fill"),
      .systemSymbol("book.fill"),
      .systemSymbol("bookmark.fill"),
      .systemSymbol("graduationcap.fill"),
      .systemSymbol("gamecontroller.fill"),
      .systemSymbol("bag.fill"),
      .systemSymbol("airplane"),
      .systemSymbol("car.fill"),
      .systemSymbol("bicycle"),
      .systemSymbol("gearshape.fill"),
      .systemSymbol("bed.double.fill"),
      .systemSymbol("hammer.fill"),
      .systemSymbol("leaf.fill"),
      .systemSymbol("doc.text.fill"),
      .systemSymbol("flame.fill"),
      .systemSymbol("camera.fill"),
      .systemSymbol("music.note"),
      .systemSymbol("bubble.left.fill"),
      .systemSymbol("magnifyingglass"),
      .systemSymbol("exclamationmark.circle.fill"),
      .systemSymbol("bell.badge.fill"),
      .systemSymbol("fork.knife"),
      .systemSymbol("shippingbox.fill"),
      .systemSymbol("ticket.fill")
    ]
  }
}

// MARK: - Preview

#Preview {
  EditAvatarView(friendModel: .mockList().first!)
    .environmentObject(FriendManager.preview)
}
